import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, P as compute_rest_props, v as validate_slots, T as assign, U as exclude_internal_props, A as current_component, B as getEventsAction, L as empty, r as insert_dev, M as group_outros, b as transition_out, N as check_outros, t as transition_in, l as detach_dev, f as element, h as claim_element, j as children, W as set_attributes, q as add_location, F as action_destroyer, Z as get_spread_update, x as create_slot, C as space, D as claim_space, p as attr_dev, y as update_slot } from './client.819062b1.js';

/* node_modules/@rubus/rubus/src/packages/Button/Button.svelte generated by Svelte v3.29.4 */
const file = "node_modules/@rubus/rubus/src/packages/Button/Button.svelte";
const get_button_icon_slot_changes_1 = dirty => ({});
const get_button_icon_slot_context_1 = ctx => ({});
const get_button_icon_slot_changes = dirty => ({});
const get_button_icon_slot_context = ctx => ({});

// (138:0) {:else}
function create_else_block_1(ctx) {
	let button;
	let current_block_type_index;
	let if_block;
	let eventsListen_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_2, create_else_block_2];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*exterior*/ ctx[3] == "clear" || /*exterior*/ ctx[3] == "logic-or" || /*exterior*/ ctx[3] == "logic-and") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let button_levels = [/*buttonProps*/ ctx[4], { "aria-label": /*ariaLabel*/ ctx[0] }];
	let button_data = {};

	for (let i = 0; i < button_levels.length; i += 1) {
		button_data = assign(button_data, button_levels[i]);
	}

	const block = {
		c: function create() {
			button = element("button");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			button = claim_element(nodes, "BUTTON", { "aria-label": true });
			var button_nodes = children(button);
			if_block.l(button_nodes);
			button_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(button, button_data);
			add_location(button, file, 138, 2, 4206);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			if_blocks[current_block_type_index].m(button, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(eventsListen_action = /*eventsListen*/ ctx[5].call(null, button));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(button, null);
			}

			set_attributes(button, button_data = get_spread_update(button_levels, [
				dirty & /*buttonProps*/ 16 && /*buttonProps*/ ctx[4],
				(!current || dirty & /*ariaLabel*/ 1) && { "aria-label": /*ariaLabel*/ ctx[0] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(138:0) {:else}",
		ctx
	});

	return block;
}

// (127:0) {#if href}
function create_if_block(ctx) {
	let a;
	let current_block_type_index;
	let if_block;
	let eventsListen_action;
	let current;
	let mounted;
	let dispose;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*exterior*/ ctx[3] == "clear" || /*exterior*/ ctx[3] == "logic-or" || /*exterior*/ ctx[3] == "logic-and") return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	let a_levels = [
		/*buttonProps*/ ctx[4],
		{ "aria-label": /*ariaLabel*/ ctx[0] },
		{ href: /*href*/ ctx[1] },
		{ target: /*target*/ ctx[2] }
	];

	let a_data = {};

	for (let i = 0; i < a_levels.length; i += 1) {
		a_data = assign(a_data, a_levels[i]);
	}

	const block = {
		c: function create() {
			a = element("a");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				"aria-label": true,
				href: true,
				target: true
			});

			var a_nodes = children(a);
			if_block.l(a_nodes);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_attributes(a, a_data);
			add_location(a, file, 127, 2, 3840);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			if_blocks[current_block_type_index].m(a, null);
			current = true;

			if (!mounted) {
				dispose = action_destroyer(eventsListen_action = /*eventsListen*/ ctx[5].call(null, a));
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(a, null);
			}

			set_attributes(a, a_data = get_spread_update(a_levels, [
				dirty & /*buttonProps*/ 16 && /*buttonProps*/ ctx[4],
				(!current || dirty & /*ariaLabel*/ 1) && { "aria-label": /*ariaLabel*/ ctx[0] },
				(!current || dirty & /*href*/ 2) && { href: /*href*/ ctx[1] },
				(!current || dirty & /*target*/ 4) && { target: /*target*/ ctx[2] }
			]));
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(127:0) {#if href}",
		ctx
	});

	return block;
}

// (142:4) {:else}
function create_else_block_2(ctx) {
	let t;
	let span;
	let span_class_value;
	let current;
	const button_icon_slot_template = /*#slots*/ ctx[17]["button-icon"];
	const button_icon_slot = create_slot(button_icon_slot_template, ctx, /*$$scope*/ ctx[16], get_button_icon_slot_context_1);
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	const block = {
		c: function create() {
			if (button_icon_slot) button_icon_slot.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			if (button_icon_slot) button_icon_slot.l(nodes);
			t = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "spectrum-" + (/*exterior*/ ctx[3] == "action"
			? "ActionButton"
			: "Button") + "-label");

			add_location(span, file, 143, 6, 4422);
		},
		m: function mount(target, anchor) {
			if (button_icon_slot) {
				button_icon_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (button_icon_slot) {
				if (button_icon_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(button_icon_slot, button_icon_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_button_icon_slot_changes_1, get_button_icon_slot_context_1);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (!current || dirty & /*exterior*/ 8 && span_class_value !== (span_class_value = "spectrum-" + (/*exterior*/ ctx[3] == "action"
			? "ActionButton"
			: "Button") + "-label")) {
				attr_dev(span, "class", span_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button_icon_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button_icon_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (button_icon_slot) button_icon_slot.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(142:4) {:else}",
		ctx
	});

	return block;
}

// (140:4) {#if exterior == 'clear' || exterior == 'logic-or' || exterior == 'logic-and'}
function create_if_block_2(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(140:4) {#if exterior == 'clear' || exterior == 'logic-or' || exterior == 'logic-and'}",
		ctx
	});

	return block;
}

// (131:4) {:else}
function create_else_block(ctx) {
	let t;
	let span;
	let span_class_value;
	let current;
	const button_icon_slot_template = /*#slots*/ ctx[17]["button-icon"];
	const button_icon_slot = create_slot(button_icon_slot_template, ctx, /*$$scope*/ ctx[16], get_button_icon_slot_context);
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	const block = {
		c: function create() {
			if (button_icon_slot) button_icon_slot.c();
			t = space();
			span = element("span");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			if (button_icon_slot) button_icon_slot.l(nodes);
			t = claim_space(nodes);
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			if (default_slot) default_slot.l(span_nodes);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "spectrum-" + (/*exterior*/ ctx[3] == "action"
			? "ActionButton"
			: "Button") + "-label");

			add_location(span, file, 132, 6, 4067);
		},
		m: function mount(target, anchor) {
			if (button_icon_slot) {
				button_icon_slot.m(target, anchor);
			}

			insert_dev(target, t, anchor);
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (button_icon_slot) {
				if (button_icon_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(button_icon_slot, button_icon_slot_template, ctx, /*$$scope*/ ctx[16], dirty, get_button_icon_slot_changes, get_button_icon_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}

			if (!current || dirty & /*exterior*/ 8 && span_class_value !== (span_class_value = "spectrum-" + (/*exterior*/ ctx[3] == "action"
			? "ActionButton"
			: "Button") + "-label")) {
				attr_dev(span, "class", span_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button_icon_slot, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button_icon_slot, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (button_icon_slot) button_icon_slot.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(131:4) {:else}",
		ctx
	});

	return block;
}

// (129:4) {#if exterior == 'clear' || exterior == 'logic-or' || exterior == 'logic-and'}
function create_if_block_1(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		l: function claim(nodes) {
			if (default_slot) default_slot.l(nodes);
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 65536) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[16], dirty, null, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(129:4) {#if exterior == 'clear' || exterior == 'logic-or' || exterior == 'logic-and'}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*href*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = [
		"tabindex","disabled","id","ariaLabel","href","target","type","exterior","variant","isQuiet","isSelected","isSmall","emphasized","notAllowed"
	];

	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Button", slots, ['default','button-icon']);
	let { tabindex = 0 } = $$props;
	let { disabled = false } = $$props;
	let { id = "" } = $$props;
	let { ariaLabel = "button" } = $$props;
	let { href = "" } = $$props;
	let { target = "" } = $$props;
	let { type = "button" } = $$props;
	let { exterior = "general" } = $$props;
	let { variant = "cta" } = $$props;
	let { isQuiet = false } = $$props;
	let { isSelected = false } = $$props;
	let { isSmall = false } = $$props;
	let { emphasized = false } = $$props;
	let { notAllowed = false } = $$props;
	const eventsListen = getEventsAction(current_component);

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(18, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("tabindex" in $$new_props) $$invalidate(6, tabindex = $$new_props.tabindex);
		if ("disabled" in $$new_props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("id" in $$new_props) $$invalidate(8, id = $$new_props.id);
		if ("ariaLabel" in $$new_props) $$invalidate(0, ariaLabel = $$new_props.ariaLabel);
		if ("href" in $$new_props) $$invalidate(1, href = $$new_props.href);
		if ("target" in $$new_props) $$invalidate(2, target = $$new_props.target);
		if ("type" in $$new_props) $$invalidate(9, type = $$new_props.type);
		if ("exterior" in $$new_props) $$invalidate(3, exterior = $$new_props.exterior);
		if ("variant" in $$new_props) $$invalidate(10, variant = $$new_props.variant);
		if ("isQuiet" in $$new_props) $$invalidate(11, isQuiet = $$new_props.isQuiet);
		if ("isSelected" in $$new_props) $$invalidate(12, isSelected = $$new_props.isSelected);
		if ("isSmall" in $$new_props) $$invalidate(13, isSmall = $$new_props.isSmall);
		if ("emphasized" in $$new_props) $$invalidate(14, emphasized = $$new_props.emphasized);
		if ("notAllowed" in $$new_props) $$invalidate(15, notAllowed = $$new_props.notAllowed);
		if ("$$scope" in $$new_props) $$invalidate(16, $$scope = $$new_props.$$scope);
	};

	$$self.$capture_state = () => ({
		current_component,
		getEventsAction,
		tabindex,
		disabled,
		id,
		ariaLabel,
		href,
		target,
		type,
		exterior,
		variant,
		isQuiet,
		isSelected,
		isSmall,
		emphasized,
		notAllowed,
		eventsListen,
		buttonProps
	});

	$$self.$inject_state = $$new_props => {
		if ("tabindex" in $$props) $$invalidate(6, tabindex = $$new_props.tabindex);
		if ("disabled" in $$props) $$invalidate(7, disabled = $$new_props.disabled);
		if ("id" in $$props) $$invalidate(8, id = $$new_props.id);
		if ("ariaLabel" in $$props) $$invalidate(0, ariaLabel = $$new_props.ariaLabel);
		if ("href" in $$props) $$invalidate(1, href = $$new_props.href);
		if ("target" in $$props) $$invalidate(2, target = $$new_props.target);
		if ("type" in $$props) $$invalidate(9, type = $$new_props.type);
		if ("exterior" in $$props) $$invalidate(3, exterior = $$new_props.exterior);
		if ("variant" in $$props) $$invalidate(10, variant = $$new_props.variant);
		if ("isQuiet" in $$props) $$invalidate(11, isQuiet = $$new_props.isQuiet);
		if ("isSelected" in $$props) $$invalidate(12, isSelected = $$new_props.isSelected);
		if ("isSmall" in $$props) $$invalidate(13, isSmall = $$new_props.isSmall);
		if ("emphasized" in $$props) $$invalidate(14, emphasized = $$new_props.emphasized);
		if ("notAllowed" in $$props) $$invalidate(15, notAllowed = $$new_props.notAllowed);
		if ("buttonProps" in $$props) $$invalidate(4, buttonProps = $$new_props.buttonProps);
	};

	let buttonProps;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		 $$invalidate(4, buttonProps = {
			id,
			type,
			role: "button",
			tabindex,
			disabled,
			...$$restProps,
			class: [
				exterior === "general" && "spectrum-Button",
				exterior === "general" && `spectrum-Button--${variant}`,
				exterior === "general" && isQuiet && `spectrum-Button--quiet`,
				exterior === "clear" && "spectrum-ClearButton",
				exterior === "clear" && `spectrum-ClearButton--${variant}`,
				exterior === "clear" && (isSmall
				? "spectrum-ClearButton--small"
				: "spectrum-ClearButton--medium"),
				exterior === "logic-or" && "spectrum-LogicButton spectrum-LogicButton--or",
				exterior === "logic-and" && "spectrum-LogicButton spectrum-LogicButton--and",
				exterior === "action" && "spectrum-ActionButton",
				exterior === "action" && isQuiet && `spectrum-ActionButton--quiet`,
				exterior === "action" && emphasized && "spectrum-ActionButton--emphasized",
				isSelected && "is-selected",
				disabled && notAllowed && "not-allowed",
				`${$$restProps.class}`
			].filter(Boolean).join(" ")
		});
	};

	return [
		ariaLabel,
		href,
		target,
		exterior,
		buttonProps,
		eventsListen,
		tabindex,
		disabled,
		id,
		type,
		variant,
		isQuiet,
		isSelected,
		isSmall,
		emphasized,
		notAllowed,
		$$scope,
		slots
	];
}

class Button extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			tabindex: 6,
			disabled: 7,
			id: 8,
			ariaLabel: 0,
			href: 1,
			target: 2,
			type: 9,
			exterior: 3,
			variant: 10,
			isQuiet: 11,
			isSelected: 12,
			isSmall: 13,
			emphasized: 14,
			notAllowed: 15
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Button",
			options,
			id: create_fragment.name
		});
	}

	get tabindex() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tabindex(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disabled() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disabled(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get id() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get href() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set href(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get target() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set target(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get exterior() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set exterior(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isQuiet() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isQuiet(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSelected() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSelected(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSmall() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSmall(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get emphasized() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set emphasized(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get notAllowed() {
		throw new Error("<Button>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set notAllowed(value) {
		throw new Error("<Button>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Button as B };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
