import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, x as create_slot, v as validate_slots, f as element, C as space, h as claim_element, j as children, D as claim_space, l as detach_dev, p as attr_dev, q as add_location, E as toggle_class, r as insert_dev, u as append_dev, y as update_slot, t as transition_in, b as transition_out, T as assign, P as compute_rest_props, z as afterUpdate, U as exclude_internal_props, a7 as svg_element, a8 as set_svg_attributes, Z as get_spread_update, n as noop } from './client.819062b1.js';

/* node_modules/@rubus/rubus/src/packages/ButtonGroup/ButtonIconWrap.svelte generated by Svelte v3.29.4 */

const file = "node_modules/@rubus/rubus/src/packages/ButtonGroup/ButtonIconWrap.svelte";
const get_button_icon_hold_slot_changes = dirty => ({});
const get_button_icon_hold_slot_context = ctx => ({});
const get_button_wrap_label_slot_changes = dirty => ({});
const get_button_wrap_label_slot_context = ctx => ({});

function create_fragment(ctx) {
	let div1;
	let t0;
	let div0;
	let t1;
	let div2;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);
	const button_wrap_label_slot_template = /*#slots*/ ctx[2]["button-wrap-label"];
	const button_wrap_label_slot = create_slot(button_wrap_label_slot_template, ctx, /*$$scope*/ ctx[1], get_button_wrap_label_slot_context);
	const button_icon_hold_slot_template = /*#slots*/ ctx[2]["button-icon-hold"];
	const button_icon_hold_slot = create_slot(button_icon_hold_slot_template, ctx, /*$$scope*/ ctx[1], get_button_icon_hold_slot_context);

	const block = {
		c: function create() {
			div1 = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			div0 = element("div");
			if (button_wrap_label_slot) button_wrap_label_slot.c();
			t1 = space();
			div2 = element("div");
			if (button_icon_hold_slot) button_icon_hold_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			if (default_slot) default_slot.l(div1_nodes);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			if (button_wrap_label_slot) button_wrap_label_slot.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if (button_icon_hold_slot) button_icon_hold_slot.l(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "rubus-button-label-wrap");
			add_location(div0, file, 33, 2, 2691);
			attr_dev(div1, "class", "spectrum-Button-wrap wrap-layout svelte-1cidfyy");
			toggle_class(div1, "rubus-button-wrap", /*onlyIcon*/ ctx[0]);
			add_location(div1, file, 31, 0, 2596);
			attr_dev(div2, "class", "spectrum-ActionButton-hold");
			add_location(div2, file, 37, 0, 2783);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);

			if (default_slot) {
				default_slot.m(div1, null);
			}

			append_dev(div1, t0);
			append_dev(div1, div0);

			if (button_wrap_label_slot) {
				button_wrap_label_slot.m(div0, null);
			}

			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);

			if (button_icon_hold_slot) {
				button_icon_hold_slot.m(div2, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[1], dirty, null, null);
				}
			}

			if (button_wrap_label_slot) {
				if (button_wrap_label_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(button_wrap_label_slot, button_wrap_label_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_button_wrap_label_slot_changes, get_button_wrap_label_slot_context);
				}
			}

			if (dirty & /*onlyIcon*/ 1) {
				toggle_class(div1, "rubus-button-wrap", /*onlyIcon*/ ctx[0]);
			}

			if (button_icon_hold_slot) {
				if (button_icon_hold_slot.p && dirty & /*$$scope*/ 2) {
					update_slot(button_icon_hold_slot, button_icon_hold_slot_template, ctx, /*$$scope*/ ctx[1], dirty, get_button_icon_hold_slot_changes, get_button_icon_hold_slot_context);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			transition_in(button_wrap_label_slot, local);
			transition_in(button_icon_hold_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			transition_out(button_wrap_label_slot, local);
			transition_out(button_icon_hold_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
			if (button_wrap_label_slot) button_wrap_label_slot.d(detaching);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			if (button_icon_hold_slot) button_icon_hold_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ButtonIconWrap", slots, ['default','button-wrap-label','button-icon-hold']);
	let { onlyIcon = false } = $$props;
	const writable_props = ["onlyIcon"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ButtonIconWrap> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("onlyIcon" in $$props) $$invalidate(0, onlyIcon = $$props.onlyIcon);
		if ("$$scope" in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ onlyIcon });

	$$self.$inject_state = $$props => {
		if ("onlyIcon" in $$props) $$invalidate(0, onlyIcon = $$props.onlyIcon);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [onlyIcon, $$scope, slots];
}

class ButtonIconWrap extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { onlyIcon: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ButtonIconWrap",
			options,
			id: create_fragment.name
		});
	}

	get onlyIcon() {
		throw new Error("<ButtonIconWrap>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onlyIcon(value) {
		throw new Error("<ButtonIconWrap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

const viewBoxes = {
  M: "0 0 36 36",
  L: "0 0 48 48",
};

/* node_modules/@rubus/svelte-spectrum-icons-workflow/src/Copy.svelte generated by Svelte v3.29.4 */
const file$1 = "node_modules/@rubus/svelte-spectrum-icons-workflow/src/Copy.svelte";

function create_fragment$1(ctx) {
	let svg;
	let rect0;
	let rect0_height_value;
	let rect0_rx_value;
	let rect0_ry_value;
	let rect0_width_value;
	let rect0_x_value;
	let rect0_y_value;
	let rect1;
	let rect1_height_value;
	let rect1_rx_value;
	let rect1_ry_value;
	let rect1_width_value;
	let rect1_x_value;
	let rect1_y_value;
	let rect2;
	let rect2_height_value;
	let rect2_rx_value;
	let rect2_ry_value;
	let rect2_width_value;
	let rect2_x_value;
	let rect2_y_value;
	let rect3;
	let rect3_height_value;
	let rect3_rx_value;
	let rect3_ry_value;
	let rect3_width_value;
	let rect3_x_value;
	let rect3_y_value;
	let rect4;
	let rect4_height_value;
	let rect4_rx_value;
	let rect4_ry_value;
	let rect4_width_value;
	let rect4_x_value;
	let rect4_y_value;
	let rect5;
	let rect5_height_value;
	let rect5_rx_value;
	let rect5_ry_value;
	let rect5_width_value;
	let rect5_x_value;
	let rect5_y_value;
	let rect6;
	let rect6_height_value;
	let rect6_rx_value;
	let rect6_ry_value;
	let rect6_width_value;
	let rect6_x_value;
	let rect6_y_value;
	let rect7;
	let rect7_height_value;
	let rect7_rx_value;
	let rect7_ry_value;
	let rect7_width_value;
	let rect7_x_value;
	let rect7_y_value;
	let rect8;
	let rect8_height_value;
	let rect8_rx_value;
	let rect8_ry_value;
	let rect8_width_value;
	let rect8_x_value;
	let rect8_y_value;
	let rect9;
	let rect9_height_value;
	let rect9_rx_value;
	let rect9_ry_value;
	let rect9_width_value;
	let rect9_x_value;
	let rect9_y_value;
	let rect10;
	let rect10_height_value;
	let rect10_rx_value;
	let rect10_ry_value;
	let rect10_width_value;
	let rect10_x_value;
	let rect10_y_value;
	let rect11;
	let rect11_height_value;
	let rect11_rx_value;
	let rect11_ry_value;
	let rect11_width_value;
	let rect11_x_value;
	let rect11_y_value;
	let rect12;
	let rect12_height_value;
	let rect12_rx_value;
	let rect12_ry_value;
	let rect12_width_value;
	let rect12_x_value;
	let rect12_y_value;
	let rect13;
	let rect13_height_value;
	let rect13_rx_value;
	let rect13_ry_value;
	let rect13_width_value;
	let rect13_x_value;
	let rect13_y_value;
	let rect14;
	let rect14_height_value;
	let rect14_rx_value;
	let rect14_ry_value;
	let rect14_width_value;
	let rect14_x_value;
	let rect14_y_value;
	let rect15;
	let rect15_height_value;
	let rect15_rx_value;
	let rect15_ry_value;
	let rect15_width_value;
	let rect15_x_value;
	let rect15_y_value;
	let rect16;
	let rect16_height_value;
	let rect16_rx_value;
	let rect16_ry_value;
	let rect16_width_value;
	let rect16_x_value;
	let rect16_y_value;
	let rect17;
	let rect17_height_value;
	let rect17_rx_value;
	let rect17_ry_value;
	let rect17_width_value;
	let rect17_x_value;
	let rect17_y_value;
	let rect18;
	let rect18_height_value;
	let rect18_rx_value;
	let rect18_ry_value;
	let rect18_width_value;
	let rect18_x_value;
	let rect18_y_value;
	let rect19;
	let rect19_height_value;
	let rect19_rx_value;
	let rect19_ry_value;
	let rect19_width_value;
	let rect19_x_value;
	let rect19_y_value;
	let path;
	let svg_viewBox_value;
	let svg_width_value;
	let svg_height_value;
	let svg_class_value;

	let svg_levels = [
		{
			viewBox: svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]
		},
		{ "aria-label": /*ariaLabel*/ ctx[4] },
		/*$$restProps*/ ctx[6],
		{
			width: svg_width_value = /*width*/ ctx[1] !== "100%"
			? /*width*/ ctx[1]
			: /*autoScale*/ ctx[5]
		},
		{
			height: svg_height_value = /*height*/ ctx[2] !== "100%"
			? /*height*/ ctx[2]
			: /*autoScale*/ ctx[5]
		},
		{ fill: "currentColor" },
		{
			class: svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]
		}
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			rect0 = svg_element("rect");
			rect1 = svg_element("rect");
			rect2 = svg_element("rect");
			rect3 = svg_element("rect");
			rect4 = svg_element("rect");
			rect5 = svg_element("rect");
			rect6 = svg_element("rect");
			rect7 = svg_element("rect");
			rect8 = svg_element("rect");
			rect9 = svg_element("rect");
			rect10 = svg_element("rect");
			rect11 = svg_element("rect");
			rect12 = svg_element("rect");
			rect13 = svg_element("rect");
			rect14 = svg_element("rect");
			rect15 = svg_element("rect");
			rect16 = svg_element("rect");
			rect17 = svg_element("rect");
			rect18 = svg_element("rect");
			rect19 = svg_element("rect");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					viewBox: true,
					"aria-label": true,
					width: true,
					height: true,
					fill: true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);

			rect0 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect0).forEach(detach_dev);

			rect1 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect1).forEach(detach_dev);

			rect2 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect2).forEach(detach_dev);

			rect3 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect3).forEach(detach_dev);

			rect4 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect4).forEach(detach_dev);

			rect5 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect5).forEach(detach_dev);

			rect6 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect6).forEach(detach_dev);

			rect7 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect7).forEach(detach_dev);

			rect8 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect8).forEach(detach_dev);

			rect9 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect9).forEach(detach_dev);

			rect10 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect10).forEach(detach_dev);

			rect11 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect11).forEach(detach_dev);

			rect12 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect12).forEach(detach_dev);

			rect13 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect13).forEach(detach_dev);

			rect14 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect14).forEach(detach_dev);

			rect15 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect15).forEach(detach_dev);

			rect16 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect16).forEach(detach_dev);

			rect17 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect17).forEach(detach_dev);

			rect18 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect18).forEach(detach_dev);

			rect19 = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect19).forEach(detach_dev);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect0, "height", rect0_height_value = 2);
			attr_dev(rect0, "rx", rect0_rx_value = 0.5);
			attr_dev(rect0, "ry", rect0_ry_value = 0.5);
			attr_dev(rect0, "width", rect0_width_value = 2);
			attr_dev(rect0, "x", rect0_x_value = 32);
			attr_dev(rect0, "y", rect0_y_value = 22);
			add_location(rect0, file$1, 26, 2, 738);
			attr_dev(rect1, "height", rect1_height_value = 2);
			attr_dev(rect1, "rx", rect1_rx_value = 0.5);
			attr_dev(rect1, "ry", rect1_ry_value = 0.5);
			attr_dev(rect1, "width", rect1_width_value = 2);
			attr_dev(rect1, "x", rect1_x_value = 32);
			attr_dev(rect1, "y", rect1_y_value = 18);
			add_location(rect1, file$1, 27, 2, 802);
			attr_dev(rect2, "height", rect2_height_value = 2);
			attr_dev(rect2, "rx", rect2_rx_value = 0.5);
			attr_dev(rect2, "ry", rect2_ry_value = 0.5);
			attr_dev(rect2, "width", rect2_width_value = 2);
			attr_dev(rect2, "x", rect2_x_value = 32);
			attr_dev(rect2, "y", rect2_y_value = 14);
			add_location(rect2, file$1, 28, 2, 866);
			attr_dev(rect3, "height", rect3_height_value = 2);
			attr_dev(rect3, "rx", rect3_rx_value = 0.5);
			attr_dev(rect3, "ry", rect3_ry_value = 0.5);
			attr_dev(rect3, "width", rect3_width_value = 2);
			attr_dev(rect3, "x", rect3_x_value = 32);
			attr_dev(rect3, "y", rect3_y_value = 10);
			add_location(rect3, file$1, 29, 2, 930);
			attr_dev(rect4, "height", rect4_height_value = 2);
			attr_dev(rect4, "rx", rect4_rx_value = 0.5);
			attr_dev(rect4, "ry", rect4_ry_value = 0.5);
			attr_dev(rect4, "width", rect4_width_value = 2);
			attr_dev(rect4, "x", rect4_x_value = 32);
			attr_dev(rect4, "y", rect4_y_value = 6);
			add_location(rect4, file$1, 30, 2, 994);
			attr_dev(rect5, "height", rect5_height_value = 2);
			attr_dev(rect5, "rx", rect5_rx_value = 0.5);
			attr_dev(rect5, "ry", rect5_ry_value = 0.5);
			attr_dev(rect5, "width", rect5_width_value = 2);
			attr_dev(rect5, "x", rect5_x_value = 32);
			attr_dev(rect5, "y", rect5_y_value = 2);
			add_location(rect5, file$1, 31, 2, 1057);
			attr_dev(rect6, "height", rect6_height_value = 2);
			attr_dev(rect6, "rx", rect6_rx_value = 0.5);
			attr_dev(rect6, "ry", rect6_ry_value = 0.5);
			attr_dev(rect6, "width", rect6_width_value = 2);
			attr_dev(rect6, "x", rect6_x_value = 28);
			attr_dev(rect6, "y", rect6_y_value = 2);
			add_location(rect6, file$1, 32, 2, 1120);
			attr_dev(rect7, "height", rect7_height_value = 2);
			attr_dev(rect7, "rx", rect7_rx_value = 0.5);
			attr_dev(rect7, "ry", rect7_ry_value = 0.5);
			attr_dev(rect7, "width", rect7_width_value = 2);
			attr_dev(rect7, "x", rect7_x_value = 24);
			attr_dev(rect7, "y", rect7_y_value = 2);
			add_location(rect7, file$1, 33, 2, 1183);
			attr_dev(rect8, "height", rect8_height_value = 2);
			attr_dev(rect8, "rx", rect8_rx_value = 0.5);
			attr_dev(rect8, "ry", rect8_ry_value = 0.5);
			attr_dev(rect8, "width", rect8_width_value = 2);
			attr_dev(rect8, "x", rect8_x_value = 20);
			attr_dev(rect8, "y", rect8_y_value = 2);
			add_location(rect8, file$1, 34, 2, 1246);
			attr_dev(rect9, "height", rect9_height_value = 2);
			attr_dev(rect9, "rx", rect9_rx_value = 0.5);
			attr_dev(rect9, "ry", rect9_ry_value = 0.5);
			attr_dev(rect9, "width", rect9_width_value = 2);
			attr_dev(rect9, "x", rect9_x_value = 16);
			attr_dev(rect9, "y", rect9_y_value = 2);
			add_location(rect9, file$1, 35, 2, 1309);
			attr_dev(rect10, "height", rect10_height_value = 2);
			attr_dev(rect10, "rx", rect10_rx_value = 0.5);
			attr_dev(rect10, "ry", rect10_ry_value = 0.5);
			attr_dev(rect10, "width", rect10_width_value = 2);
			attr_dev(rect10, "x", rect10_x_value = 12);
			attr_dev(rect10, "y", rect10_y_value = 2);
			add_location(rect10, file$1, 36, 2, 1372);
			attr_dev(rect11, "height", rect11_height_value = 2);
			attr_dev(rect11, "rx", rect11_rx_value = 0.5);
			attr_dev(rect11, "ry", rect11_ry_value = 0.5);
			attr_dev(rect11, "width", rect11_width_value = 2);
			attr_dev(rect11, "x", rect11_x_value = 12);
			attr_dev(rect11, "y", rect11_y_value = 6);
			add_location(rect11, file$1, 37, 2, 1435);
			attr_dev(rect12, "height", rect12_height_value = 2);
			attr_dev(rect12, "rx", rect12_rx_value = 0.5);
			attr_dev(rect12, "ry", rect12_ry_value = 0.5);
			attr_dev(rect12, "width", rect12_width_value = 2);
			attr_dev(rect12, "x", rect12_x_value = 12);
			attr_dev(rect12, "y", rect12_y_value = 10);
			add_location(rect12, file$1, 38, 2, 1498);
			attr_dev(rect13, "height", rect13_height_value = 2);
			attr_dev(rect13, "rx", rect13_rx_value = 0.5);
			attr_dev(rect13, "ry", rect13_ry_value = 0.5);
			attr_dev(rect13, "width", rect13_width_value = 2);
			attr_dev(rect13, "x", rect13_x_value = 12);
			attr_dev(rect13, "y", rect13_y_value = 14);
			add_location(rect13, file$1, 39, 2, 1562);
			attr_dev(rect14, "height", rect14_height_value = 2);
			attr_dev(rect14, "rx", rect14_rx_value = 0.5);
			attr_dev(rect14, "ry", rect14_ry_value = 0.5);
			attr_dev(rect14, "width", rect14_width_value = 2);
			attr_dev(rect14, "x", rect14_x_value = 12);
			attr_dev(rect14, "y", rect14_y_value = 18);
			add_location(rect14, file$1, 40, 2, 1626);
			attr_dev(rect15, "height", rect15_height_value = 2);
			attr_dev(rect15, "rx", rect15_rx_value = 0.5);
			attr_dev(rect15, "ry", rect15_ry_value = 0.5);
			attr_dev(rect15, "width", rect15_width_value = 2);
			attr_dev(rect15, "x", rect15_x_value = 12);
			attr_dev(rect15, "y", rect15_y_value = 22);
			add_location(rect15, file$1, 41, 2, 1690);
			attr_dev(rect16, "height", rect16_height_value = 2);
			attr_dev(rect16, "rx", rect16_rx_value = 0.5);
			attr_dev(rect16, "ry", rect16_ry_value = 0.5);
			attr_dev(rect16, "width", rect16_width_value = 2);
			attr_dev(rect16, "x", rect16_x_value = 16);
			attr_dev(rect16, "y", rect16_y_value = 22);
			add_location(rect16, file$1, 42, 2, 1754);
			attr_dev(rect17, "height", rect17_height_value = 2);
			attr_dev(rect17, "rx", rect17_rx_value = 0.5);
			attr_dev(rect17, "ry", rect17_ry_value = 0.5);
			attr_dev(rect17, "width", rect17_width_value = 2);
			attr_dev(rect17, "x", rect17_x_value = 20);
			attr_dev(rect17, "y", rect17_y_value = 22);
			add_location(rect17, file$1, 43, 2, 1818);
			attr_dev(rect18, "height", rect18_height_value = 2);
			attr_dev(rect18, "rx", rect18_rx_value = 0.5);
			attr_dev(rect18, "ry", rect18_ry_value = 0.5);
			attr_dev(rect18, "width", rect18_width_value = 2);
			attr_dev(rect18, "x", rect18_x_value = 24);
			attr_dev(rect18, "y", rect18_y_value = 22);
			add_location(rect18, file$1, 44, 2, 1882);
			attr_dev(rect19, "height", rect19_height_value = 2);
			attr_dev(rect19, "rx", rect19_rx_value = 0.5);
			attr_dev(rect19, "ry", rect19_ry_value = 0.5);
			attr_dev(rect19, "width", rect19_width_value = 2);
			attr_dev(rect19, "x", rect19_x_value = 28);
			attr_dev(rect19, "y", rect19_y_value = 22);
			add_location(rect19, file$1, 45, 2, 1946);
			attr_dev(path, "d", "M10 12H3a1 1 0 0 0-1 1v20a1 1 0 0 0 1 1h20a1 1 0 0 0 1-1v-7H11a1 1 0 0 1-1-1z");
			add_location(path, file$1, 46, 2, 2010);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$1, 18, 0, 479);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, rect0);
			append_dev(svg, rect1);
			append_dev(svg, rect2);
			append_dev(svg, rect3);
			append_dev(svg, rect4);
			append_dev(svg, rect5);
			append_dev(svg, rect6);
			append_dev(svg, rect7);
			append_dev(svg, rect8);
			append_dev(svg, rect9);
			append_dev(svg, rect10);
			append_dev(svg, rect11);
			append_dev(svg, rect12);
			append_dev(svg, rect13);
			append_dev(svg, rect14);
			append_dev(svg, rect15);
			append_dev(svg, rect16);
			append_dev(svg, rect17);
			append_dev(svg, rect18);
			append_dev(svg, rect19);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				dirty & /*scale*/ 1 && svg_viewBox_value !== (svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]) && { viewBox: svg_viewBox_value },
				dirty & /*ariaLabel*/ 16 && { "aria-label": /*ariaLabel*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				dirty & /*width, autoScale*/ 34 && svg_width_value !== (svg_width_value = /*width*/ ctx[1] !== "100%"
				? /*width*/ ctx[1]
				: /*autoScale*/ ctx[5]) && { width: svg_width_value },
				dirty & /*height, autoScale*/ 36 && svg_height_value !== (svg_height_value = /*height*/ ctx[2] !== "100%"
				? /*height*/ ctx[2]
				: /*autoScale*/ ctx[5]) && { height: svg_height_value },
				{ fill: "currentColor" },
				dirty & /*className*/ 8 && svg_class_value !== (svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]) && { class: svg_class_value }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	const omit_props_names = ["scale","width","height","className","ariaLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Copy", slots, []);
	let { scale = "M" } = $$props;
	let { width = "100%" } = $$props;
	let { height = "100%" } = $$props;
	let { className = "" } = $$props;
	let { ariaLabel = "Copy" } = $$props;
	let autoScale = 18;

	afterUpdate(() => {
		let rootClassName = document && document.documentElement.className;

		if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
			$$invalidate(5, autoScale = 22);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scale" in $$new_props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$new_props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$new_props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$new_props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		viewBoxes,
		scale,
		width,
		height,
		className,
		ariaLabel,
		autoScale
	});

	$$self.$inject_state = $$new_props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
		if ("autoScale" in $$props) $$invalidate(5, autoScale = $$new_props.autoScale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, width, height, className, ariaLabel, autoScale, $$restProps];
}

class Copy extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			scale: 0,
			width: 1,
			height: 2,
			className: 3,
			ariaLabel: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Copy",
			options,
			id: create_fragment$1.name
		});
	}

	get scale() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Copy>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Copy>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@rubus/svelte-spectrum-icons-workflow/src/LoupeView.svelte generated by Svelte v3.29.4 */
const file$2 = "node_modules/@rubus/svelte-spectrum-icons-workflow/src/LoupeView.svelte";

function create_fragment$2(ctx) {
	let svg;
	let rect;
	let rect_height_value;
	let rect_rx_value;
	let rect_ry_value;
	let rect_width_value;
	let rect_x_value;
	let rect_y_value;
	let svg_viewBox_value;
	let svg_width_value;
	let svg_height_value;
	let svg_class_value;

	let svg_levels = [
		{
			viewBox: svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]
		},
		{ "aria-label": /*ariaLabel*/ ctx[4] },
		/*$$restProps*/ ctx[6],
		{
			width: svg_width_value = /*width*/ ctx[1] !== "100%"
			? /*width*/ ctx[1]
			: /*autoScale*/ ctx[5]
		},
		{
			height: svg_height_value = /*height*/ ctx[2] !== "100%"
			? /*height*/ ctx[2]
			: /*autoScale*/ ctx[5]
		},
		{ fill: "currentColor" },
		{
			class: svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]
		}
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			rect = svg_element("rect");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					viewBox: true,
					"aria-label": true,
					width: true,
					height: true,
					fill: true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);

			rect = claim_element(
				svg_nodes,
				"rect",
				{
					height: true,
					rx: true,
					ry: true,
					width: true,
					x: true,
					y: true
				},
				1
			);

			children(rect).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(rect, "height", rect_height_value = 32);
			attr_dev(rect, "rx", rect_rx_value = 1);
			attr_dev(rect, "ry", rect_ry_value = 1);
			attr_dev(rect, "width", rect_width_value = 32);
			attr_dev(rect, "x", rect_x_value = 2);
			attr_dev(rect, "y", rect_y_value = 2);
			add_location(rect, file$2, 26, 2, 743);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$2, 18, 0, 484);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, rect);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				dirty & /*scale*/ 1 && svg_viewBox_value !== (svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]) && { viewBox: svg_viewBox_value },
				dirty & /*ariaLabel*/ 16 && { "aria-label": /*ariaLabel*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				dirty & /*width, autoScale*/ 34 && svg_width_value !== (svg_width_value = /*width*/ ctx[1] !== "100%"
				? /*width*/ ctx[1]
				: /*autoScale*/ ctx[5]) && { width: svg_width_value },
				dirty & /*height, autoScale*/ 36 && svg_height_value !== (svg_height_value = /*height*/ ctx[2] !== "100%"
				? /*height*/ ctx[2]
				: /*autoScale*/ ctx[5]) && { height: svg_height_value },
				{ fill: "currentColor" },
				dirty & /*className*/ 8 && svg_class_value !== (svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]) && { class: svg_class_value }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	const omit_props_names = ["scale","width","height","className","ariaLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("LoupeView", slots, []);
	let { scale = "M" } = $$props;
	let { width = "100%" } = $$props;
	let { height = "100%" } = $$props;
	let { className = "" } = $$props;
	let { ariaLabel = "LoupeView" } = $$props;
	let autoScale = 18;

	afterUpdate(() => {
		let rootClassName = document && document.documentElement.className;

		if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
			$$invalidate(5, autoScale = 22);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scale" in $$new_props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$new_props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$new_props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$new_props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		viewBoxes,
		scale,
		width,
		height,
		className,
		ariaLabel,
		autoScale
	});

	$$self.$inject_state = $$new_props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
		if ("autoScale" in $$props) $$invalidate(5, autoScale = $$new_props.autoScale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, width, height, className, ariaLabel, autoScale, $$restProps];
}

class LoupeView extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			scale: 0,
			width: 1,
			height: 2,
			className: 3,
			ariaLabel: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LoupeView",
			options,
			id: create_fragment$2.name
		});
	}

	get scale() {
		throw new Error("<LoupeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<LoupeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<LoupeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<LoupeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<LoupeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<LoupeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<LoupeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<LoupeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<LoupeView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<LoupeView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@rubus/svelte-spectrum-icons-workflow/src/Selection.svelte generated by Svelte v3.29.4 */
const file$3 = "node_modules/@rubus/svelte-spectrum-icons-workflow/src/Selection.svelte";

function create_fragment$3(ctx) {
	let svg;
	let path;
	let svg_viewBox_value;
	let svg_width_value;
	let svg_height_value;
	let svg_class_value;

	let svg_levels = [
		{
			viewBox: svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]
		},
		{ "aria-label": /*ariaLabel*/ ctx[4] },
		/*$$restProps*/ ctx[6],
		{
			width: svg_width_value = /*width*/ ctx[1] !== "100%"
			? /*width*/ ctx[1]
			: /*autoScale*/ ctx[5]
		},
		{
			height: svg_height_value = /*height*/ ctx[2] !== "100%"
			? /*height*/ ctx[2]
			: /*autoScale*/ ctx[5]
		},
		{ fill: "currentColor" },
		{
			class: svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]
		}
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					viewBox: true,
					"aria-label": true,
					width: true,
					height: true,
					fill: true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path, "d", "M4 20h2v5H4zM4 12h2v5H4zM6 30v-2H4v3.111a.889.889 0 0 0 .89.889H9v-2zM12 30h5v2h-5zM20 30h5v2h-5zM30\n    11h2v5h-2zM30 19h2v5h-2zM30 27v3h-2v2h3a1 1 0 0 0 1-1v-4zM31.112 4H27v2h3v2h2V4.889A.889.889 0 0 0 31.112 4zM19\n    4h5.001v2H19zM11 4h5.001v2H11zM8 4H5a1 1 0 0 0-1 1v4h2V6h2z");
			add_location(path, file$3, 26, 2, 743);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$3, 18, 0, 484);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				dirty & /*scale*/ 1 && svg_viewBox_value !== (svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]) && { viewBox: svg_viewBox_value },
				dirty & /*ariaLabel*/ 16 && { "aria-label": /*ariaLabel*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				dirty & /*width, autoScale*/ 34 && svg_width_value !== (svg_width_value = /*width*/ ctx[1] !== "100%"
				? /*width*/ ctx[1]
				: /*autoScale*/ ctx[5]) && { width: svg_width_value },
				dirty & /*height, autoScale*/ 36 && svg_height_value !== (svg_height_value = /*height*/ ctx[2] !== "100%"
				? /*height*/ ctx[2]
				: /*autoScale*/ ctx[5]) && { height: svg_height_value },
				{ fill: "currentColor" },
				dirty & /*className*/ 8 && svg_class_value !== (svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]) && { class: svg_class_value }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props, $$invalidate) {
	const omit_props_names = ["scale","width","height","className","ariaLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Selection", slots, []);
	let { scale = "M" } = $$props;
	let { width = "100%" } = $$props;
	let { height = "100%" } = $$props;
	let { className = "" } = $$props;
	let { ariaLabel = "Selection" } = $$props;
	let autoScale = 18;

	afterUpdate(() => {
		let rootClassName = document && document.documentElement.className;

		if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
			$$invalidate(5, autoScale = 22);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scale" in $$new_props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$new_props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$new_props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$new_props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		viewBoxes,
		scale,
		width,
		height,
		className,
		ariaLabel,
		autoScale
	});

	$$self.$inject_state = $$new_props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
		if ("autoScale" in $$props) $$invalidate(5, autoScale = $$new_props.autoScale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, width, height, className, ariaLabel, autoScale, $$restProps];
}

class Selection extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			scale: 0,
			width: 1,
			height: 2,
			className: 3,
			ariaLabel: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Selection",
			options,
			id: create_fragment$3.name
		});
	}

	get scale() {
		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Selection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Selection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@rubus/svelte-spectrum-icons-workflow/src/Transparency.svelte generated by Svelte v3.29.4 */
const file$4 = "node_modules/@rubus/svelte-spectrum-icons-workflow/src/Transparency.svelte";

function create_fragment$4(ctx) {
	let svg;
	let path0;
	let path1;
	let svg_viewBox_value;
	let svg_width_value;
	let svg_height_value;
	let svg_class_value;

	let svg_levels = [
		{
			viewBox: svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]
		},
		{ "aria-label": /*ariaLabel*/ ctx[4] },
		/*$$restProps*/ ctx[6],
		{
			width: svg_width_value = /*width*/ ctx[1] !== "100%"
			? /*width*/ ctx[1]
			: /*autoScale*/ ctx[5]
		},
		{
			height: svg_height_value = /*height*/ ctx[2] !== "100%"
			? /*height*/ ctx[2]
			: /*autoScale*/ ctx[5]
		},
		{ fill: "currentColor" },
		{
			class: svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]
		}
	];

	let svg_data = {};

	for (let i = 0; i < svg_levels.length; i += 1) {
		svg_data = assign(svg_data, svg_levels[i]);
	}

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l: function claim(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					viewBox: true,
					"aria-label": true,
					width: true,
					height: true,
					fill: true,
					class: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(path0, "d", "M12 12h6v6h-6zM18 18h6v6h-6z");
			add_location(path0, file$4, 26, 2, 746);
			attr_dev(path1, "d", "M31 4H5a1 1 0 0 0-1 1v26a1 1 0 0 0 1 1h26a1 1 0 0 0 1-1V5a1 1 0 0 0-1-1zm-1\n    8h-6v6h6v6h-6v6h-6v-6h-6v6H6v-6h6v-6H6v-6h6V6h6v5.98h6V6h6z");
			add_location(path1, file$4, 27, 2, 790);
			set_svg_attributes(svg, svg_data);
			add_location(svg, file$4, 18, 0, 487);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: function update(ctx, [dirty]) {
			set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
				dirty & /*scale*/ 1 && svg_viewBox_value !== (svg_viewBox_value = viewBoxes[/*scale*/ ctx[0]]) && { viewBox: svg_viewBox_value },
				dirty & /*ariaLabel*/ 16 && { "aria-label": /*ariaLabel*/ ctx[4] },
				dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
				dirty & /*width, autoScale*/ 34 && svg_width_value !== (svg_width_value = /*width*/ ctx[1] !== "100%"
				? /*width*/ ctx[1]
				: /*autoScale*/ ctx[5]) && { width: svg_width_value },
				dirty & /*height, autoScale*/ 36 && svg_height_value !== (svg_height_value = /*height*/ ctx[2] !== "100%"
				? /*height*/ ctx[2]
				: /*autoScale*/ ctx[5]) && { height: svg_height_value },
				{ fill: "currentColor" },
				dirty & /*className*/ 8 && svg_class_value !== (svg_class_value = "spectrum-Icon spectrum-Icon-workflow " + /*className*/ ctx[3]) && { class: svg_class_value }
			]));
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$4.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$4($$self, $$props, $$invalidate) {
	const omit_props_names = ["scale","width","height","className","ariaLabel"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Transparency", slots, []);
	let { scale = "M" } = $$props;
	let { width = "100%" } = $$props;
	let { height = "100%" } = $$props;
	let { className = "" } = $$props;
	let { ariaLabel = "Transparency" } = $$props;
	let autoScale = 18;

	afterUpdate(() => {
		let rootClassName = document && document.documentElement.className;

		if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
			$$invalidate(5, autoScale = 22);
		}
	});

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
		if ("scale" in $$new_props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$new_props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$new_props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$new_props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$new_props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		viewBoxes,
		scale,
		width,
		height,
		className,
		ariaLabel,
		autoScale
	});

	$$self.$inject_state = $$new_props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$new_props.scale);
		if ("width" in $$props) $$invalidate(1, width = $$new_props.width);
		if ("height" in $$props) $$invalidate(2, height = $$new_props.height);
		if ("className" in $$props) $$invalidate(3, className = $$new_props.className);
		if ("ariaLabel" in $$props) $$invalidate(4, ariaLabel = $$new_props.ariaLabel);
		if ("autoScale" in $$props) $$invalidate(5, autoScale = $$new_props.autoScale);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, width, height, className, ariaLabel, autoScale, $$restProps];
}

class Transparency extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			scale: 0,
			width: 1,
			height: 2,
			className: 3,
			ariaLabel: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Transparency",
			options,
			id: create_fragment$4.name
		});
	}

	get scale() {
		throw new Error("<Transparency>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<Transparency>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get width() {
		throw new Error("<Transparency>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set width(value) {
		throw new Error("<Transparency>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get height() {
		throw new Error("<Transparency>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set height(value) {
		throw new Error("<Transparency>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get className() {
		throw new Error("<Transparency>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set className(value) {
		throw new Error("<Transparency>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ariaLabel() {
		throw new Error("<Transparency>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ariaLabel(value) {
		throw new Error("<Transparency>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { ButtonIconWrap as B, Copy as C, LoupeView as L, Selection as S, Transparency as T, viewBoxes as v };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
