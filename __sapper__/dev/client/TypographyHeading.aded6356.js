import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, x as create_slot, v as validate_slots, f as element, h as claim_element, j as children, l as detach_dev, p as attr_dev, E as toggle_class, q as add_location, r as insert_dev, y as update_slot, t as transition_in, b as transition_out } from './client.819062b1.js';

/* node_modules/@rubus/rubus/src/packages/Typography/TypographyBody.svelte generated by Svelte v3.29.4 */

const file = "node_modules/@rubus/rubus/src/packages/Typography/TypographyBody.svelte";

function create_fragment(ctx) {
	let p;
	let p_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[2], null);

	const block = {
		c: function create() {
			p = element("p");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			if (default_slot) default_slot.l(p_nodes);
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", p_class_value = "spectrum-Body spectrum-Body--" + /*scale*/ ctx[0]);
			toggle_class(p, "spectrum-Body--serif", /*isSerif*/ ctx[1]);
			add_location(p, file, 14, 0, 302);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);

			if (default_slot) {
				default_slot.m(p, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 4) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[2], dirty, null, null);
				}
			}

			if (!current || dirty & /*scale*/ 1 && p_class_value !== (p_class_value = "spectrum-Body spectrum-Body--" + /*scale*/ ctx[0])) {
				attr_dev(p, "class", p_class_value);
			}

			if (dirty & /*scale, isSerif*/ 3) {
				toggle_class(p, "spectrum-Body--serif", /*isSerif*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TypographyBody", slots, ['default']);
	let { scale = "M" } = $$props;
	let { isSerif = false } = $$props;
	const writable_props = ["scale", "isSerif"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TypographyBody> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$props.scale);
		if ("isSerif" in $$props) $$invalidate(1, isSerif = $$props.isSerif);
		if ("$$scope" in $$props) $$invalidate(2, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ scale, isSerif });

	$$self.$inject_state = $$props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$props.scale);
		if ("isSerif" in $$props) $$invalidate(1, isSerif = $$props.isSerif);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, isSerif, $$scope, slots];
}

class TypographyBody extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { scale: 0, isSerif: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TypographyBody",
			options,
			id: create_fragment.name
		});
	}

	get scale() {
		throw new Error("<TypographyBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<TypographyBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSerif() {
		throw new Error("<TypographyBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSerif(value) {
		throw new Error("<TypographyBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* node_modules/@rubus/rubus/src/packages/Typography/TypographyHeading.svelte generated by Svelte v3.29.4 */

const file$1 = "node_modules/@rubus/rubus/src/packages/Typography/TypographyHeading.svelte";

function create_fragment$1(ctx) {
	let h1;
	let h1_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	const block = {
		c: function create() {
			h1 = element("h1");
			if (default_slot) default_slot.c();
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			if (default_slot) default_slot.l(h1_nodes);
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", h1_class_value = "spectrum-Heading spectrum-Heading--" + /*scale*/ ctx[0] + "  spectrum-Heading--" + /*thickness*/ ctx[2]);
			toggle_class(h1, "spectrum-Heading--serif", /*isSerif*/ ctx[1]);
			add_location(h1, file$1, 20, 0, 455);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);

			if (default_slot) {
				default_slot.m(h1, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (!current || dirty & /*scale, thickness*/ 5 && h1_class_value !== (h1_class_value = "spectrum-Heading spectrum-Heading--" + /*scale*/ ctx[0] + "  spectrum-Heading--" + /*thickness*/ ctx[2])) {
				attr_dev(h1, "class", h1_class_value);
			}

			if (dirty & /*scale, thickness, isSerif*/ 7) {
				toggle_class(h1, "spectrum-Heading--serif", /*isSerif*/ ctx[1]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("TypographyHeading", slots, ['default']);
	let { scale = "M" } = $$props;
	let { isSerif = false } = $$props;
	let { thickness = "default" } = $$props;
	const writable_props = ["scale", "isSerif", "thickness"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<TypographyHeading> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$props.scale);
		if ("isSerif" in $$props) $$invalidate(1, isSerif = $$props.isSerif);
		if ("thickness" in $$props) $$invalidate(2, thickness = $$props.thickness);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ scale, isSerif, thickness });

	$$self.$inject_state = $$props => {
		if ("scale" in $$props) $$invalidate(0, scale = $$props.scale);
		if ("isSerif" in $$props) $$invalidate(1, isSerif = $$props.isSerif);
		if ("thickness" in $$props) $$invalidate(2, thickness = $$props.thickness);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [scale, isSerif, thickness, $$scope, slots];
}

class TypographyHeading extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { scale: 0, isSerif: 1, thickness: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TypographyHeading",
			options,
			id: create_fragment$1.name
		});
	}

	get scale() {
		throw new Error("<TypographyHeading>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set scale(value) {
		throw new Error("<TypographyHeading>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isSerif() {
		throw new Error("<TypographyHeading>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isSerif(value) {
		throw new Error("<TypographyHeading>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get thickness() {
		throw new Error("<TypographyHeading>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set thickness(value) {
		throw new Error("<TypographyHeading>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { TypographyHeading as T, TypographyBody as a };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHlwb2dyYXBoeUhlYWRpbmcuYWRlZDYzNTYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AcnVidXMvcnVidXMvc3JjL3BhY2thZ2VzL1R5cG9ncmFwaHkvVHlwb2dyYXBoeUJvZHkuc3ZlbHRlIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BydWJ1cy9ydWJ1cy9zcmMvcGFja2FnZXMvVHlwb2dyYXBoeS9UeXBvZ3JhcGh5SGVhZGluZy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgLyoqXG4gICAqIFNldCBib2R5IHNjYWxlIHNwZWNpZmljYXRpb25zXG4gICAqIEB0eXBlIHtcIlhTXCIgfCBcIlNcIiB8IFwiTVwiIHwgXCJMXCIgfCBcIlhMXCIgfCBcIlhYTFwiIHwgXCJYWFhMXCJ9IFtzY2FsZSA9IFwiTVwiXVxuICAgKi9cbiAgZXhwb3J0IGxldCBzY2FsZSA9IFwiTVwiO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHVzZSBzZXJpZiBmb250IGZhbWlseSBpbiB0aGUgY29udGV4dFxuICAgKiBAdHlwZSB7Ym9vbGVhbn0gW2lzU2VyaWYgPSBmYWxzZV1cbiAgICovXG4gIGV4cG9ydCBsZXQgaXNTZXJpZiA9IGZhbHNlO1xuPC9zY3JpcHQ+XG5cbjxwIGNsYXNzPVwic3BlY3RydW0tQm9keSBzcGVjdHJ1bS1Cb2R5LS17c2NhbGV9XCIgY2xhc3M6c3BlY3RydW0tQm9keS0tc2VyaWY9e2lzU2VyaWZ9PlxuICA8c2xvdCAvPlxuPC9wPlxuIiwiPHNjcmlwdD5cbiAgLyoqXG4gICAqIFNldCBIZWFkaW5nIHNjYWxlIHNwZWNpZmljYXRpb25zXG4gICAqIEB0eXBlIHtcIlhYU1wiIHwgXCJYU1wiIHwgXCJTXCIgfCBcIk1cIiB8IFwiTFwiIHwgXCJYTFwiIHwgXCJYWExcIiB8IFwiWFhYTFwifSBbc2NhbGUgPSBcIk1cIl1cbiAgICovXG4gIGV4cG9ydCBsZXQgc2NhbGUgPSBcIk1cIjtcblxuICAvKipcbiAgICogV2hldGhlciB0byB1c2Ugc2VyaWYgZm9udCBmYW1pbHkgaW4gdGhlIGNvbnRleHRcbiAgICogQHR5cGUge2Jvb2xlYW59IFtpc1NlcmlmID0gZmFsc2VdXG4gICAqL1xuICBleHBvcnQgbGV0IGlzU2VyaWYgPSBmYWxzZTtcblxuICAvKipcbiAgICogU2V0IHRoZSBmb250IHdlaWdodFxuICAgKiBAdHlwZSB7XCJoZWF2eVwiIHwgXCJsaWdodFwiIHwgXCJkZWZhdWx0XCIgfSBbdGhpY2tuZXNzID0gXCJkZWZhdWx0XCJdXG4gICAqL1xuICBleHBvcnQgbGV0IHRoaWNrbmVzcyA9IFwiZGVmYXVsdFwiO1xuPC9zY3JpcHQ+XG5cbjxoMVxuICBjbGFzcz1cInNwZWN0cnVtLUhlYWRpbmcgc3BlY3RydW0tSGVhZGluZy0te3NjYWxlfSAgc3BlY3RydW0tSGVhZGluZy0te3RoaWNrbmVzc31cIlxuICBjbGFzczpzcGVjdHJ1bS1IZWFkaW5nLS1zZXJpZj17aXNTZXJpZn0+XG4gIDxzbG90IC8+XG48L2gxPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvRkFjd0MsR0FBSzt1REFBK0IsR0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5SEFBM0MsR0FBSzs7Ozs7d0RBQStCLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BVHRFLEtBQUssR0FBRyxHQUFHO09BTVgsT0FBTyxHQUFHLEtBQUs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEZDVWlCLEdBQUssNkNBQXNCLEdBQVM7MkRBQ2hELEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NElBREssR0FBSyw2Q0FBc0IsR0FBUzs7Ozs7NERBQ2hELEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BakIzQixLQUFLLEdBQUcsR0FBRztPQU1YLE9BQU8sR0FBRyxLQUFLO09BTWYsU0FBUyxHQUFHLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
