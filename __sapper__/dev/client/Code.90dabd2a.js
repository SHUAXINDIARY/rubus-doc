import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, f as element, g as text, h as claim_element, j as children, k as claim_text, l as detach_dev, p as attr_dev, q as add_location, r as insert_dev, u as append_dev, w as set_data_dev, n as noop } from './client.819062b1.js';

/* src/components/code/Code.svelte generated by Svelte v3.29.4 */
const file = "src/components/code/Code.svelte";

function create_fragment(ctx) {
	let pre;
	let code_1;
	let t;
	let code_1_class_value;

	const block = {
		c: function create() {
			pre = element("pre");
			code_1 = element("code");
			t = text(/*code*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			pre = claim_element(nodes, "PRE", { class: true });
			var pre_nodes = children(pre);
			code_1 = claim_element(pre_nodes, "CODE", { class: true });
			var code_1_nodes = children(code_1);
			t = claim_text(code_1_nodes, /*code*/ ctx[1]);
			code_1_nodes.forEach(detach_dev);
			pre_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(code_1, "class", code_1_class_value = "language-" + /*language*/ ctx[0]);
			add_location(code_1, file, 17, 26, 642);
			attr_dev(pre, "class", "line-numbers svelte-hsr8op");
			add_location(pre, file, 17, 0, 616);
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			append_dev(pre, code_1);
			append_dev(code_1, t);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*code*/ 2) set_data_dev(t, /*code*/ ctx[1]);

			if (dirty & /*language*/ 1 && code_1_class_value !== (code_1_class_value = "language-" + /*language*/ ctx[0])) {
				attr_dev(code_1, "class", code_1_class_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Code", slots, []);
	let { language } = $$props;
	let { code } = $$props;

	onMount(() => {
		Promise.all([import('./prismjs.1dfb38bc.js'), __inject_styles(["client-a35f0bc6.css"])]).then(function(x) { return x[0]; }).then(function (n) { return n.p; });
	});

	const writable_props = ["language", "code"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Code> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("language" in $$props) $$invalidate(0, language = $$props.language);
		if ("code" in $$props) $$invalidate(1, code = $$props.code);
	};

	$$self.$capture_state = () => ({ onMount, language, code });

	$$self.$inject_state = $$props => {
		if ("language" in $$props) $$invalidate(0, language = $$props.language);
		if ("code" in $$props) $$invalidate(1, code = $$props.code);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [language, code];
}

class Code extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { language: 0, code: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Code",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*language*/ ctx[0] === undefined && !("language" in props)) {
			console.warn("<Code> was created without expected prop 'language'");
		}

		if (/*code*/ ctx[1] === undefined && !("code" in props)) {
			console.warn("<Code> was created without expected prop 'code'");
		}
	}

	get language() {
		throw new Error("<Code>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set language(value) {
		throw new Error("<Code>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get code() {
		throw new Error("<Code>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set code(value) {
		throw new Error("<Code>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Code as C };

import __inject_styles from './inject_styles.5607aec6.js';//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29kZS45MGRhYmQyYS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvY29kZS9Db2RlLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0PlxuICBpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICBleHBvcnQgbGV0IGxhbmd1YWdlO1xuICBleHBvcnQgbGV0IGNvZGU7XG5cbiAgb25Nb3VudCgoKSA9PiB7XG4gICAgaW1wb3J0KFwiLi9wcmlzbWpzLmpzXCIpO1xuICB9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIHByZSB7XG4gICAgbWF4LWhlaWdodDogNDAwcHg7XG4gICAgbWFyZ2luOiAwO1xuICB9XG48L3N0eWxlPlxuXG48cHJlIGNsYXNzPVwibGluZS1udW1iZXJzXCI+PGNvZGUgY2xhc3M9XCJsYW5ndWFnZS17bGFuZ3VhZ2V9XCI+e2NvZGV9PC9jb2RlPjwvcHJlPlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztxQkFpQjZELEdBQUk7Ozs7Ozs7O3lDQUFKLEdBQUk7Ozs7Ozs2RUFBaEIsR0FBUTs7Ozs7Ozs7Ozs7b0RBQUksR0FBSTs7eUdBQWhCLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FmNUMsUUFBUTtPQUNSLElBQUk7O0NBRWYsT0FBTztzQkFDRSx1QkFBYzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
