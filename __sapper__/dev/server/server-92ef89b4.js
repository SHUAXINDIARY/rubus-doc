'use strict';

var sirv = require('sirv');
var polka = require('polka');
var compression = require('compression');
var fs = require('fs');
var path = require('path');
var Stream = require('stream');
var http = require('http');
var Url = require('url');
var https = require('https');
var zlib = require('zlib');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var sirv__default = /*#__PURE__*/_interopDefaultLegacy(sirv);
var polka__default = /*#__PURE__*/_interopDefaultLegacy(polka);
var compression__default = /*#__PURE__*/_interopDefaultLegacy(compression);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var Stream__default = /*#__PURE__*/_interopDefaultLegacy(Stream);
var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var Url__default = /*#__PURE__*/_interopDefaultLegacy(Url);
var https__default = /*#__PURE__*/_interopDefaultLegacy(https);
var zlib__default = /*#__PURE__*/_interopDefaultLegacy(zlib);

function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
        throw new Error(`'${name}' is not a store with a 'subscribe' method`);
    }
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function compute_rest_props(props, keys) {
    const rest = {};
    keys = new Set(keys);
    for (const k in props)
        if (!keys.has(k) && k[0] !== '$')
            rest[k] = props[k];
    return rest;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function beforeUpdate(fn) {
    get_current_component().$$.before_update.push(fn);
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function setContext(key, context) {
    get_current_component().$$.context.set(key, context);
}
function getContext(key) {
    return get_current_component().$$.context.get(key);
}

// source: https://html.spec.whatwg.org/multipage/indices.html
const boolean_attributes = new Set([
    'allowfullscreen',
    'allowpaymentrequest',
    'async',
    'autofocus',
    'autoplay',
    'checked',
    'controls',
    'default',
    'defer',
    'disabled',
    'formnovalidate',
    'hidden',
    'ismap',
    'loop',
    'multiple',
    'muted',
    'nomodule',
    'novalidate',
    'open',
    'playsinline',
    'readonly',
    'required',
    'reversed',
    'selected'
]);

const invalid_attribute_name_character = /[\s'">/=\u{FDD0}-\u{FDEF}\u{FFFE}\u{FFFF}\u{1FFFE}\u{1FFFF}\u{2FFFE}\u{2FFFF}\u{3FFFE}\u{3FFFF}\u{4FFFE}\u{4FFFF}\u{5FFFE}\u{5FFFF}\u{6FFFE}\u{6FFFF}\u{7FFFE}\u{7FFFF}\u{8FFFE}\u{8FFFF}\u{9FFFE}\u{9FFFF}\u{AFFFE}\u{AFFFF}\u{BFFFE}\u{BFFFF}\u{CFFFE}\u{CFFFF}\u{DFFFE}\u{DFFFF}\u{EFFFE}\u{EFFFF}\u{FFFFE}\u{FFFFF}\u{10FFFE}\u{10FFFF}]/u;
// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
// https://infra.spec.whatwg.org/#noncharacter
function spread(args, classes_to_add) {
    const attributes = Object.assign({}, ...args);
    if (classes_to_add) {
        if (attributes.class == null) {
            attributes.class = classes_to_add;
        }
        else {
            attributes.class += ' ' + classes_to_add;
        }
    }
    let str = '';
    Object.keys(attributes).forEach(name => {
        if (invalid_attribute_name_character.test(name))
            return;
        const value = attributes[name];
        if (value === true)
            str += ' ' + name;
        else if (boolean_attributes.has(name.toLowerCase())) {
            if (value)
                str += ' ' + name;
        }
        else if (value != null) {
            str += ` ${name}="${String(value).replace(/"/g, '&#34;').replace(/'/g, '&#39;')}"`;
        }
    });
    return str;
}
const escaped = {
    '"': '&quot;',
    "'": '&#39;',
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;'
};
function escape(html) {
    return String(html).replace(/["'&<>]/g, match => escaped[match]);
}
function each(items, fn) {
    let str = '';
    for (let i = 0; i < items.length; i += 1) {
        str += fn(items[i], i);
    }
    return str;
}
const missing_component = {
    $$render: () => ''
};
function validate_component(component, name) {
    if (!component || !component.$$render) {
        if (name === 'svelte:component')
            name += ' this={...}';
        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
    }
    return component;
}
let on_destroy;
function create_ssr_component(fn) {
    function $$render(result, props, bindings, slots) {
        const parent_component = current_component;
        const $$ = {
            on_destroy,
            context: new Map(parent_component ? parent_component.$$.context : []),
            // these will be immediately discarded
            on_mount: [],
            before_update: [],
            after_update: [],
            callbacks: blank_object()
        };
        set_current_component({ $$ });
        const html = fn(result, props, bindings, slots);
        set_current_component(parent_component);
        return html;
    }
    return {
        render: (props = {}, options = {}) => {
            on_destroy = [];
            const result = { title: '', head: '', css: new Set() };
            const html = $$render(result, props, {}, options);
            run_all(on_destroy);
            return {
                html,
                css: {
                    code: Array.from(result.css).map(css => css.code).join('\n'),
                    map: null // TODO
                },
                head: result.title + result.head
            };
        },
        $$render
    };
}
function add_attribute(name, value, boolean) {
    if (value == null || (boolean && !value))
        return '';
    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `"${value}"`}`}`;
}

/* src/components/code/Code.svelte generated by Svelte v3.29.4 */

const Code = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { language } = $$props;
	let { code } = $$props;

	onMount(() => {
		Promise.resolve().then(function () { return require('./prismjs-8ceceb81.js'); }).then(function (n) { return n.prismjs; });
	});

	if ($$props.language === void 0 && $$bindings.language && language !== void 0) $$bindings.language(language);
	if ($$props.code === void 0 && $$bindings.code && code !== void 0) $$bindings.code(code);
	return `<pre class="${"line-numbers"}"><code class="${"language-" + escape(language)}">${escape(code)}</code></pre>`;
});

/* src/routes/index.svelte generated by Svelte v3.29.4 */

const Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let code_sample = `var _self = (typeof window !== 'undefined')
	? window   // if in browser
	: (
		(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)
		? self // if in worker
		: {}   // if in node js
	);
`;

	return `${validate_component(Code, "Code").$$render(
		$$result,
		{
			language: "javascript",
			code: code_sample
		},
		{},
		{}
	)}`;
});

var component_0 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Routes
});

var zh = [
	{
		url: "./",
		name: "首页"
	},
	{
		url: "./docs",
		name: "文档"
	},
	{
		url: "./resources",
		name: "资源"
	}
];
var en = [
	{
		url: "./",
		name: "Home"
	},
	{
		url: "./docs",
		name: "Docs"
	},
	{
		url: "./resources",
		name: "Resources"
	}
];
var nav = {
	zh: zh,
	en: en
};

var router = /*#__PURE__*/Object.freeze({
    __proto__: null,
    zh: zh,
    en: en,
    'default': nav
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/AlertMedium.svelte generated by Svelte v3.29.4 */

const AlertMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "AlertMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M10.563 2.206l-9.249 16.55a.5.5 0 00.436.744h18.5a.5.5 0 00.436-.744l-9.251-16.55a.5.5 0 00-.872 0zm1.436\n      15.044a.25.25 0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-1.5a.25.25 0 01.25-.25h1.5a.25.25 0 01.25.25zm0-3.5a.25.25 0\n      01-.25.25h-1.5a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h1.5a.25.25 0 01.25.25z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M8.564 1.289L.2 16.256A.5.5 0 00.636 17h16.728a.5.5 0 00.436-.744L9.436 1.289a.5.5 0 00-.872 0zM10 14.75a.25.25\n      0 01-.25.25h-1.5a.25.25 0 01-.25-.25v-1.5a.25.25 0 01.25-.25h1.5a.25.25 0 01.25.25zm0-3a.25.25 0\n      01-.25.25h-1.5a.25.25 0 01-.25-.25v-6a.25.25 0 01.25-.25h1.5a.25.25 0 01.25.25z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/CheckmarkMedium.svelte generated by Svelte v3.29.4 */

const CheckmarkMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "CheckmarkMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M6 14a1 1 0 01-.789-.385l-4-5a1 1 0 111.577-1.23L6 11.376l7.213-8.99a1 1 0 111.576 1.23l-8 10a1 1 0\n      01-.789.384z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M4.5 10a1.022 1.022 0 01-.799-.384l-2.488-3a1 1 0 011.576-1.233L4.5 7.376l4.712-5.991a1 1 0 111.576 1.23l-5.51\n      7A.978.978 0 014.5 10z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/CheckmarkSmall.svelte generated by Svelte v3.29.4 */

const CheckmarkSmall = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "CheckmarkSmall" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M4.5 11a.999.999 0 01-.788-.385l-3-4a1 1 0 111.576-1.23L4.5 8.376l5.212-6.99a1 1 0 111.576 1.23l-6 8A.999.999 0\n    014.5 11z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M3.788 9A.999.999 0 013 8.615l-2.288-3a1 1 0 111.576-1.23l1.5 1.991 3.924-4.991a1 1 0 111.576 1.23l-4.712\n    6A.999.999 0 013.788 9z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/ChevronDownMedium.svelte generated by Svelte v3.29.4 */

const ChevronDownMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "ChevronDownMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M11.99 1.51a1 1 0 00-1.707-.707L6 5.086 1.717.803A1 1 0 10.303 2.217l4.99 4.99a1 1 0 001.414 0l4.99-4.99a.997.997\n    0 00.293-.707z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M9.99 1.01A1 1 0 008.283.303L5 3.586 1.717.303A1 1 0 10.303 1.717l3.99 3.98a1 1 0 001.414 0l3.99-3.98a.997.997 0\n    00.293-.707z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/ChevronRightMedium.svelte generated by Svelte v3.29.4 */

const ChevronRightMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "ChevronRightMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M7.5 6a.997.997 0 00-.293-.707L2.217.303A1 1 0 10.803 1.717L5.086 6 .803 10.283a1 1 0 101.414\n    1.414l4.99-4.99A.997.997 0 007.5 6z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M5.99 5a.997.997 0 00-.293-.707L1.717.303A1 1 0 10.303 1.717L3.586 5 .303 8.283a1 1 0 101.414\n    1.414l3.98-3.99A.997.997 0 005.99 5z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/DashSmall.svelte generated by Svelte v3.29.4 */

const DashSmall = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "DashSmall" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M10.99 5H1.01a1 1 0 000 2h9.98a1 1 0 100-2z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M8 4H2a1 1 0 000 2h6a1 1 0 000-2z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/HelpSmall.svelte generated by Svelte v3.29.4 */

const HelpSmall = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "HelpSmall" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M9 1a8 8 0 108 8 8 8 0 00-8-8zm.023 13.438a1.345 1.345 0 01-.104-2.688q.052-.002.104 0a1.31 1.31 0 011.397\n      1.217q.004.059.003.118a1.291 1.291 0 01-1.4 1.353zm1.783-6.409l-.1.1c-.395.414-.842.884-.842 1.175a1.386 1.386 0\n      00.179.674l.073.139-.057.215a.308.308 0 01-.284.189H8.436a.434.434 0 01-.325-.117 2.056 2.056 0\n      01-.422-1.262A3.058 3.058 0 018.8 7.071c.1-.11.2-.21.288-.3.314-.325.507-.535.507-.758 0-.154\n      0-.622-.893-.622a2.958 2.958 0 00-1.58.459.3.3 0 01-.327-.01l-.118-.085-.028-.225V4.081a.44.44 0 01.2-.41A4.135\n      4.135 0 019 3.119a2.552 2.552 0 012.751 2.636 3.067 3.067 0 01-.944 2.274z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M7 .778A6.222 6.222 0 1013.222 7 6.222 6.222 0 007 .778zm.018 10.452a1.046 1.046 0 11-.08-2.091q.04-.002.08\n      0a1.019 1.019 0 011.087.946q.003.046.002.092a1.004 1.004 0 01-1.09\n      1.053zm1.387-4.985l-.078.078c-.307.322-.655.687-.655.913a1.078 1.078 0 00.14.525l.056.108-.044.167a.24.24 0\n      01-.221.147H6.56a.338.338 0 01-.252-.091 1.6 1.6 0 01-.329-.982 2.378 2.378 0\n      01.864-1.61c.078-.086.156-.164.224-.234.245-.252.395-.416.395-.59 0-.119 0-.483-.695-.483a2.3 2.3 0\n      00-1.229.357.233.233 0 01-.254-.008l-.092-.066-.022-.175V3.174a.342.342 0 01.156-.319A3.216 3.216 0 017\n      2.425a1.985 1.985 0 012.14 2.051 2.385 2.385 0 01-.735 1.769z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/InfoMedium.svelte generated by Svelte v3.29.4 */

const InfoMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "InfoMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M11 2a9 9 0 109 9 9 9 0 00-9-9zm-.15 2.65a1.359 1.359 0 011.431 1.283q.004.064.001.129a1.332 1.332 0 01-1.432\n    1.432 1.353 1.353 0 01-1.432-1.433 1.359 1.359 0 011.304-1.412q.064-.002.128.001zM13.5 16a.5.5 0 01-.5.5H9a.5.5 0\n    01-.5-.5v-1a.5.5 0 01.5-.5h1v-4H9a.5.5 0 01-.5-.5V9a.5.5 0 01.5-.5h2.5a.5.5 0 01.5.5v5.5h1a.5.5 0 01.5.5z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M9 1a8 8 0 108 8 8 8 0 00-8-8zm-.15 2.15a1.359 1.359 0 011.431 1.283q.004.064.001.129A1.332 1.332 0 018.85\n    5.994a1.353 1.353 0 01-1.432-1.433 1.359 1.359 0 011.304-1.412q.064-.002.128.001zM11 13.5a.5.5 0 01-.5.5h-3a.5.5 0\n    01-.5-.5v-1a.5.5 0 01.5-.5H8V9h-.5a.5.5 0 01-.5-.5v-1a.5.5 0 01.5-.5h2a.5.5 0 01.5.5V12h.5a.5.5 0 01.5.5z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

/* node_modules/@rubus/svelte-spectrum-icons-ui/src/SuccessMedium.svelte generated by Svelte v3.29.4 */

const SuccessMedium = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["scale","className","width","height","ariaLabel"]);
	let { scale = "M" } = $$props;
	let { className = "" } = $$props;
	let { width = "" } = $$props;
	let { height = "" } = $$props;
	let { ariaLabel = "SuccessMedium" } = $$props;
	let path;
	let sw;
	let sh;
	let flag = 14;

	onMount(() => {
	});

	afterUpdate(() => {

		if (!scale || scale == "M") {
			let rootClassName = document && document.documentElement.className;

			if (rootClassName && rootClassName.indexOf("spectrum--large") != -1) {
				scale = "L";
			} else {
				scale = "M";
			}
		}
	});

	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.className === void 0 && $$bindings.className && className !== void 0) $$bindings.className(className);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	if ($$props.height === void 0 && $$bindings.height && height !== void 0) $$bindings.height(height);
	if ($$props.ariaLabel === void 0 && $$bindings.ariaLabel && ariaLabel !== void 0) $$bindings.ariaLabel(ariaLabel);

	return `<svg${spread([
		{ "aria-label": escape(ariaLabel) },
		$$restProps,
		{ width: escape(width || sw || flag) },
		{ height: escape(height || sh || flag) },
		{ fill: "currentColor" },
		{
			class: "spectrum-Icon " + escape(className)
		}
	])}>${scale === "L"
	? `<path d="${"M11 2a9 9 0 109 9 9 9 0 00-9-9zm5.638 5.609L10.1 15.652a.5.5 0 01-.742.038L5.086 11.5a.5.5 0\n    010-.707l.707-.707a.5.5 0 01.707 0L9.6 13.1l5.486-6.751a.5.5 0 01.7-.073l.776.631a.5.5 0 01.076.702z"}"${add_attribute("this", path, 1)}></path>`
	: `${scale === "M"
		? `<path d="${"M9 1a8 8 0 108 8 8 8 0 00-8-8zm5.333 4.54l-6.324 8.13a.6.6 0 01-.437.23h-.037a.6.6 0 01-.425-.176l-3.893-3.9a.6.6\n    0 010-.849l.663-.663a.6.6 0 01.848 0L7.4 10.991l5.256-6.754a.6.6 0 01.843-.1l.728.566a.6.6 0 01.106.837z"}"${add_attribute("this", path, 1)}></path>`
		: ``}`}</svg>`;
});

function getRect(element) {
  var rect = element.getBoundingClientRect();
  var top = window.innerHeight || document.documentElement.clientTop;
  var left = window.innerWidth || document.documentElement.clientLeft;

  return {
    top: rect.top - top,
    bottom: Math.abs(rect.bottom - top),
    left: rect.left - left,
    right: Math.abs(rect.right - left),
    x: rect.x,
    y: rect.y,
    width: rect.width || element.offsetWidth,
    height: rect.height || element.offsetHeight,
  };
}

/* node_modules/@rubus/rubus/src/packages/Popover/Popover.svelte generated by Svelte v3.29.4 */

const css = {
	code: ".rubus-Popover-registering.svelte-155j3uu.svelte-155j3uu{height:var(--spectrum-global-dimension-size-75)}.spectrum-Popover.svelte-155j3uu.svelte-155j3uu{background-color:var(--spectrum-popover-background-color, var(--spectrum-global-color-gray-50));border-color:var(--spectrum-popover-border-color, var(--spectrum-alias-border-color-dark));box-shadow:0 1px 4px var(--spectrum-popover-shadow-color, var(--spectrum-alias-dropshadow-color))}.spectrum-Popover.svelte-155j3uu.svelte-155j3uu{z-index:100}.spectrum-Popover.svelte-155j3uu.svelte-155j3uu{visibility:hidden;opacity:0;transition:transform var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\n      opacity var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\n      visibility 0ms linear var(--spectrum-global-animation-duration-100, 130ms);pointer-events:none}.spectrum-Popover.is-open.svelte-155j3uu.svelte-155j3uu{visibility:visible;opacity:1;transition-delay:0ms;pointer-events:auto}.spectrum-Popover.svelte-155j3uu.svelte-155j3uu{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column;box-sizing:border-box;min-width:var(--spectrum-global-dimension-size-400);min-height:var(--spectrum-global-dimension-size-400);position:absolute;border-style:solid;border-width:var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin));border-radius:var(--spectrum-popover-border-radius, var(--spectrum-alias-border-radius-regular));outline:none}.spectrum-Popover-tip.svelte-155j3uu.svelte-155j3uu{position:absolute;overflow:hidden;width:calc(var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) + 1px);height:calc(\n      var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) / 2 +\n        var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin))\n    )}.spectrum-Popover-tip.svelte-155j3uu.svelte-155j3uu{position:absolute;overflow:hidden;width:calc(var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) + 1px);height:calc(\n      var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) / 2 +\n        var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin))\n    )}.spectrum-Popover-tip.svelte-155j3uu.svelte-155j3uu::after{content:\"\";width:var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250));height:var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250));border-width:var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin));border-style:solid;position:absolute;transform:rotate(45deg);top:-18px}.spectrum-Popover--dialog.svelte-155j3uu.svelte-155j3uu{min-width:270px;padding:30px 29px}.spectrum-Popover.svelte-155j3uu .spectrum-Dialog-header.svelte-155j3uu{background-color:transparent}.spectrum-Popover.svelte-155j3uu .spectrum-Popover-tip.svelte-155j3uu::after{background-color:var(--spectrum-popover-background-color, var(--spectrum-global-color-gray-50));border-color:var(--spectrum-popover-border-color, var(--spectrum-alias-border-color-dark));box-shadow:-1px -1px 4px var(--spectrum-popover-shadow-color, var(--spectrum-alias-dropshadow-color))}.rubus-Popover--bottomRight.svelte-155j3uu.svelte-155j3uu{transform:translate(0, calc(-0.8 * var(--rubus-action-menu-button-height)))}.rubus-Popover-quiet--bottomRight.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\n      calc(-0.8 * var(--rubus-action-menu-button-height))\n    )}.rubus-Popover--bottomRight.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(0, 0)}.rubus-Popover-quiet--bottomRight.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(calc(-1 * var(--spectrum-global-dimension-size-125)), 0)}.rubus-Popover--bottomLeft.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\n      calc(-0.8 * var(--rubus-action-menu-button-height))\n    )}.rubus-Popover--bottomLeft.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)), 0)}.rubus-Popover-quiet--bottomLeft.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\n      ),\n      calc(-0.8 * var(--rubus-action-menu-button-height))\n    )}.rubus-Popover-quiet--bottomLeft.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\n      ),\n      0\n    )}.rubus-Popover--topLeft.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\n      calc(\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\n      )\n    )}.rubus-Popover--topLeft.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\n      calc(\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-global-dimension-size-75) * 2)\n      )\n    )}.rubus-Popover-quiet--topLeft.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\n      ),\n      calc(\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\n      )\n    )}.rubus-Popover-quiet--topLeft.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\n      ),\n      calc(\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-global-dimension-size-75) * 2)\n      )\n    )}.rubus-Popover--topRight.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      0,\n      calc(\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\n      )\n    )}.rubus-Popover--topRight.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      0,\n      calc(\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-global-dimension-size-75) * 2)\n      )\n    )}.rubus-Popover-quiet--topRight.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\n      calc(\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\n      )\n    )}.rubus-Popover-quiet--topRight.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\n      calc(\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\n              var(--spectrum-global-dimension-size-75) * 2)\n      )\n    )}.rubus-Popover--leftTop.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--leftTop.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--leftTop.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--leftTop.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--rightTop.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover--rightTop.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--rightTop.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover-quiet--rightTop.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--rightBottom.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover--rightBottom.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--rightBottom.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover-quiet--rightBottom.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--leftBottom.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--leftBottom.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--leftBottom.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover-quiet--leftBottom.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\n      calc(\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\n      )\n    )}.rubus-Popover--centerBottom.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\n      calc(-1 * var(--spectrum-global-dimension-size-75))\n    )}.rubus-Popover--centerBottom.is-open.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\n      var(--spectrum-global-dimension-size-75)\n    )}.spectrum--medium.svelte-155j3uu .rubus-Popover--centerBottom .spectrum-Popover-tip.svelte-155j3uu{top:calc(-0.961 * var(--spectrum-global-dimension-size-130))}.spectrum--large.svelte-155j3uu .rubus-Popover--centerBottom .spectrum-Popover-tip.svelte-155j3uu{top:calc(-1 * var(--spectrum-global-dimension-size-125))}.rubus-Popover--centerBottom.svelte-155j3uu .spectrum-Popover-tip.svelte-155j3uu{left:calc((var(--rubus-action-menu-popover-width) - var(--rubus-action-menu-popover-tip-width)) / 2);transform:rotate(180deg)}.rubus-Popover--centerTop.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\n      calc(\n        -0.8 * (var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\n              var(--rubus-action-menu-popover-tip-height) + (var(--spectrum-global-dimension-size-75)))\n      )\n    )}.spectrum--medium.svelte-155j3uu .rubus-Popover--centerTop .spectrum-Popover-tip.svelte-155j3uu{bottom:calc(-0.961 * var(--spectrum-global-dimension-size-130))}.spectrum--large.svelte-155j3uu .rubus-Popover--centerTop .spectrum-Popover-tip.svelte-155j3uu{bottom:calc(-1 * var(--spectrum-global-dimension-size-125))}.rubus-Popover--centerTop.svelte-155j3uu .spectrum-Popover-tip.svelte-155j3uu{left:calc((var(--rubus-action-menu-popover-width) - var(--rubus-action-menu-popover-tip-width)) / 2);transform:rotate(0)}.rubus-Popover--centerLeft.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75) * 2)),\n      calc(\n        -1 * ((\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\n                  var(--rubus-action-menu-popover-tip-height)\n              ) / 2)\n      )\n    )}.spectrum--medium.svelte-155j3uu .rubus-Popover--centerLeft .spectrum-Popover-tip.svelte-155j3uu{top:calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);right:calc(-0.99 * var(--spectrum-global-dimension-size-200));transform:rotate(-90deg)}.spectrum--large.svelte-155j3uu .rubus-Popover--centerLeft .spectrum-Popover-tip.svelte-155j3uu{top:calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);right:calc(-0.972 * var(--spectrum-global-dimension-size-200));transform:rotate(-90deg)}.rubus-Popover--centerRight.svelte-155j3uu.svelte-155j3uu{transform:translate(\n      calc(\n        0.8 * var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75) +\n          var(--rubus-action-menu-popover-tip-width) / 3\n      ),\n      calc(\n        -1 * ((\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\n                  var(--rubus-action-menu-popover-tip-height)\n              ) / 2)\n      )\n    )}.spectrum--medium.svelte-155j3uu .rubus-Popover--centerRight .spectrum-Popover-tip.svelte-155j3uu{top:calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);left:calc(-0.99 * var(--spectrum-global-dimension-size-200));transform:rotate(90deg)}.spectrum--large.svelte-155j3uu .rubus-Popover--centerRight .spectrum-Popover-tip.svelte-155j3uu{top:calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);left:calc(-0.972 * var(--spectrum-global-dimension-size-200));transform:rotate(90deg)}",
	map: "{\"version\":3,\"file\":\"Popover.svelte\",\"sources\":[\"Popover.svelte\"],\"sourcesContent\":[\"<script>\\n  import { afterUpdate, onMount } from \\\"svelte\\\";\\n  import { getRect } from \\\"../utils/element.js\\\";\\n\\n  /**\\n   * Set whether popover is open\\n   * @type {boolean}[isOpen=false]\\n   */\\n  export let isOpen = false;\\n\\n  /**\\n   * Specify the  variants of popver\\n   * @type {\\\"menu\\\"|\\\"dialog\\\"}[variants = \\\"menu\\\"]\\n   */\\n  export let variants = \\\"menu\\\";\\n\\n  /**\\n   * Specify the  position mode of popver\\n   * variants => \\\"menu\\\" @type { \\\"auto\\\"|\\\"topLeft\\\"|\\\"topRight\\\"|\\\"bottomLeft\\\"|\\\"bottomRight\\\"\\\"leftTop\\\"|\\\"rightTop\\\"|\\\"leftBottom\\\"|\\\"rightBottom\\\"} [ popverPosition = \\\"auto\\\"]\\n   * variants => \\\"dialog\\\" @type { \\\"centerLeft\\\"|\\\"centerRight\\\"|\\\"centerTop\\\"|\\\"centerBottom\\\" }\\n   */\\n  export let popverPosition = \\\"auto\\\";\\n\\n  /**\\n   * Specify the  quite mode of popver\\n   * @type {boolean}[isOpen=false]\\n   */\\n  export let isQuiet = false;\\n\\n  /**\\n   * Specify the  title of popver\\n   * @type {string}[title = \\\"Popover Title\\\"]\\n   */\\n  export let title = \\\"Popover Title\\\";\\n\\n  let popverPositionAuto = \\\"bottomRight\\\";\\n\\n  let popover;\\n  let popoverTip;\\n  let menuButton;\\n  let menuButtonWidth;\\n  let menuButtonHeight;\\n  let popoverWidth;\\n  let popoverHeight;\\n  let popoverTipWidth;\\n  let popoverTipHeight;\\n\\n  onMount(() => {\\n    setCssVar();\\n  });\\n  afterUpdate(() => {\\n    autoPlace();\\n  });\\n\\n  function setCssVar() {\\n    if (!popover.parentElement.querySelector(\\\"#rubus-ActionSource\\\")) {\\n      return;\\n    }\\n    menuButton = getRect(popover.parentElement.querySelector(\\\"#rubus-ActionSource\\\"));\\n    menuButtonWidth = menuButton && menuButton.width;\\n    menuButtonHeight = menuButton && menuButton.height;\\n    popoverWidth = popover && popover.offsetWidth;\\n    popoverHeight = popover && popover.offsetHeight;\\n    popoverTipWidth = popoverTip && popoverTip.offsetWidth;\\n    popoverTipHeight = popoverTip && popoverTip.offsetHeight;\\n\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-button-width\\\", menuButtonWidth + `px`);\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-button-height\\\", menuButtonHeight + `px`);\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-popover-width\\\", popoverWidth + `px`);\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-popover-height\\\", popoverHeight + `px`);\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-popover-tip-width\\\", popoverTipWidth + `px`);\\n    popover.parentElement.style.setProperty(\\\"--rubus-action-menu-popover-tip-height\\\", popoverTipHeight + `px`);\\n  }\\n\\n  function autoPlace() {\\n    if (variants == \\\"menu\\\") {\\n      switch (popverPosition == \\\"auto\\\") {\\n        case menuButton.x > popoverWidth &&\\n          menuButton.y > popoverHeight &&\\n          menuButton.right < popoverWidth &&\\n          menuButton.bottom < popoverHeight:\\n          popverPositionAuto = \\\"topLeft\\\";\\n          break;\\n        case menuButton.x < popoverWidth &&\\n          menuButton.y > popoverHeight &&\\n          menuButton.right > popoverWidth &&\\n          menuButton.bottom < popoverHeight:\\n          popverPositionAuto = \\\"topRight\\\";\\n          break;\\n        case menuButton.right < popoverWidth && menuButton.x > popoverWidth:\\n          popverPositionAuto = \\\"bottomLeft\\\";\\n          break;\\n        default:\\n          popverPositionAuto = \\\"bottomRight\\\";\\n      }\\n    }\\n    if (variants == \\\"dialog\\\") {\\n      switch (popverPosition == \\\"auto\\\") {\\n        case menuButton.x > popoverWidth && menuButton.right < popoverWidth:\\n          popverPositionAuto = \\\"centerLeft\\\";\\n          break;\\n        case menuButton.x < popoverWidth && menuButton.right > popoverWidth:\\n          popverPositionAuto = \\\"centerRight\\\";\\n          break;\\n        case menuButton.x > popoverWidth &&\\n          menuButton.y > popoverHeight &&\\n          menuButton.right > popoverWidth &&\\n          menuButton.bottom < popoverHeight:\\n          popverPositionAuto = \\\"centerTop\\\";\\n          break;\\n        default:\\n          popverPositionAuto = \\\"centerBottom\\\";\\n      }\\n    }\\n  }\\n</script>\\n\\n<style global>\\n  .rubus-Popover-registering {\\n    height: var(--spectrum-global-dimension-size-75);\\n  }\\n  .spectrum-Popover {\\n    background-color: var(--spectrum-popover-background-color, var(--spectrum-global-color-gray-50));\\n    border-color: var(--spectrum-popover-border-color, var(--spectrum-alias-border-color-dark));\\n    box-shadow: 0 1px 4px var(--spectrum-popover-shadow-color, var(--spectrum-alias-dropshadow-color));\\n  }\\n  .spectrum-Popover {\\n    z-index: 100;\\n  }\\n  .spectrum-Popover {\\n    visibility: hidden;\\n\\n    opacity: 0;\\n\\n    transition: transform var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\\n      opacity var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\\n      visibility 0ms linear var(--spectrum-global-animation-duration-100, 130ms);\\n\\n    pointer-events: none;\\n  }\\n\\n  .spectrum-Popover.is-open {\\n    visibility: visible;\\n\\n    opacity: 1;\\n\\n    transition-delay: 0ms;\\n\\n    pointer-events: auto;\\n  }\\n  .spectrum-Popover {\\n    display: -ms-inline-flexbox;\\n    display: inline-flex;\\n    -ms-flex-direction: column;\\n    flex-direction: column;\\n    box-sizing: border-box;\\n\\n    min-width: var(--spectrum-global-dimension-size-400);\\n    min-height: var(--spectrum-global-dimension-size-400);\\n\\n    position: absolute;\\n\\n    border-style: solid;\\n    border-width: var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin));\\n    border-radius: var(--spectrum-popover-border-radius, var(--spectrum-alias-border-radius-regular));\\n\\n    outline: none;\\n  }\\n\\n  .spectrum-Popover-tip {\\n    position: absolute;\\n    overflow: hidden;\\n    width: calc(var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) + 1px);\\n    height: calc(\\n      var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) / 2 +\\n        var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin))\\n    );\\n  }\\n  .spectrum-Popover-tip {\\n    position: absolute;\\n    overflow: hidden;\\n    width: calc(var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) + 1px);\\n    height: calc(\\n      var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250)) / 2 +\\n        var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin))\\n    );\\n  }\\n  .spectrum-Popover-tip::after {\\n    content: \\\"\\\";\\n    width: var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250));\\n    height: var(--spectrum-popover-tip-width, var(--spectrum-global-dimension-size-250));\\n    border-width: var(--spectrum-popover-border-size, var(--spectrum-alias-border-size-thin));\\n    border-style: solid;\\n    position: absolute;\\n    transform: rotate(45deg);\\n    top: -18px;\\n  }\\n\\n  .spectrum-Popover--dialog {\\n    min-width: 270px;\\n    padding: 30px 29px;\\n  }\\n  .spectrum-Popover .spectrum-Dialog-header,\\n  .spectrum-Popover .spectrum-Dialog-footer,\\n  .spectrum-Popover .spectrum-Dialog-wrapper {\\n    background-color: transparent;\\n  }\\n\\n  .spectrum-Popover .spectrum-Popover-tip::after {\\n    background-color: var(--spectrum-popover-background-color, var(--spectrum-global-color-gray-50));\\n    border-color: var(--spectrum-popover-border-color, var(--spectrum-alias-border-color-dark));\\n    box-shadow: -1px -1px 4px var(--spectrum-popover-shadow-color, var(--spectrum-alias-dropshadow-color));\\n  }\\n\\n  .rubus-Popover--bottomRight {\\n    transform: translate(0, calc(-0.8 * var(--rubus-action-menu-button-height)));\\n  }\\n  .rubus-Popover-quiet--bottomRight {\\n    transform: translate(\\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\\n      calc(-0.8 * var(--rubus-action-menu-button-height))\\n    );\\n  }\\n  .rubus-Popover--bottomRight.is-open {\\n    transform: translate(0, 0);\\n  }\\n  .rubus-Popover-quiet--bottomRight.is-open {\\n    transform: translate(calc(-1 * var(--spectrum-global-dimension-size-125)), 0);\\n  }\\n  .rubus-Popover--bottomLeft {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\\n      calc(-0.8 * var(--rubus-action-menu-button-height))\\n    );\\n  }\\n  .rubus-Popover--bottomLeft.is-open {\\n    transform: translate(calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)), 0);\\n  }\\n  .rubus-Popover-quiet--bottomLeft {\\n    transform: translate(\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\\n      ),\\n      calc(-0.8 * var(--rubus-action-menu-button-height))\\n    );\\n  }\\n  .rubus-Popover-quiet--bottomLeft.is-open {\\n    transform: translate(\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\\n      ),\\n      0\\n    );\\n  }\\n\\n  .rubus-Popover--topLeft {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\\n      calc(\\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n  .rubus-Popover--topLeft.is-open {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width)),\\n      calc(\\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-global-dimension-size-75) * 2)\\n      )\\n    );\\n  }\\n  .rubus-Popover-quiet--topLeft {\\n    transform: translate(\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\\n      ),\\n      calc(\\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n\\n  .rubus-Popover-quiet--topLeft.is-open {\\n    transform: translate(\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-width) + var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-125)\\n      ),\\n      calc(\\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-global-dimension-size-75) * 2)\\n      )\\n    );\\n  }\\n  .rubus-Popover--topRight {\\n    transform: translate(\\n      0,\\n      calc(\\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n\\n  .rubus-Popover--topRight.is-open {\\n    transform: translate(\\n      0,\\n      calc(\\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-global-dimension-size-75) * 2)\\n      )\\n    );\\n  }\\n  .rubus-Popover-quiet--topRight {\\n    transform: translate(\\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\\n      calc(\\n        -0.8 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-dropdown-flyout-menu-offset-y, var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n  .rubus-Popover-quiet--topRight.is-open {\\n    transform: translate(\\n      calc(-1 * var(--spectrum-global-dimension-size-125)),\\n      calc(\\n        -1 * (var(--rubus-action-menu-button-height) + var(--rubus-action-menu-popover-height) +\\n              var(--spectrum-global-dimension-size-75) * 2)\\n      )\\n    );\\n  }\\n  .rubus-Popover--leftTop {\\n    transform: translate(\\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--leftTop {\\n    transform: translate(\\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover--leftTop.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--leftTop.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover--rightTop {\\n    transform: translate(\\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover--rightTop.is-open {\\n    transform: translate(\\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--rightTop {\\n    transform: translate(\\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover-quiet--rightTop.is-open {\\n    transform: translate(\\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-popover-height) - var(--spectrum-global-dimension-size-75) + var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover--rightBottom {\\n    transform: translate(\\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover--rightBottom.is-open {\\n    transform: translate(\\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--rightBottom {\\n    transform: translate(\\n      calc(0.8 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover-quiet--rightBottom.is-open {\\n    transform: translate(\\n      calc(1 * (var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover--leftBottom {\\n    transform: translate(\\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--leftBottom {\\n    transform: translate(\\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n  .rubus-Popover--leftBottom.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(-1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover-quiet--leftBottom.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75))),\\n      calc(\\n        -1 * var(--rubus-action-menu-button-height) - var(--spectrum-global-dimension-size-75) - var(--spectrum-global-dimension-size-50)\\n      )\\n    );\\n  }\\n\\n  .rubus-Popover--centerBottom {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      calc(-1 * var(--spectrum-global-dimension-size-75))\\n    );\\n  }\\n  .rubus-Popover--centerBottom.is-open {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      var(--spectrum-global-dimension-size-75)\\n    );\\n  }\\n  .spectrum--large .rubus-Popover--centerBottom.is-open {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      var(--spectrum-global-dimension-size-125)\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerBottom .spectrum-Popover-tip {\\n    top: calc(-0.961 * var(--spectrum-global-dimension-size-130));\\n  }\\n  .spectrum--large .rubus-Popover--centerBottom .spectrum-Popover-tip {\\n    top: calc(-1 * var(--spectrum-global-dimension-size-125));\\n  }\\n  .rubus-Popover--centerBottom .spectrum-Popover-tip {\\n    left: calc((var(--rubus-action-menu-popover-width) - var(--rubus-action-menu-popover-tip-width)) / 2);\\n\\n    transform: rotate(180deg);\\n  }\\n  .rubus-Popover--centerTop {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      calc(\\n        -0.8 * (var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n              var(--rubus-action-menu-popover-tip-height) + (var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerTop.is-open {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      calc(\\n        -1 * (var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n              var(--rubus-action-menu-popover-tip-height) + (var(--spectrum-global-dimension-size-75)))\\n      )\\n    );\\n  }\\n  .spectrum--large .rubus-Popover--centerTop.is-open {\\n    transform: translate(\\n      calc(-1 * var(--rubus-action-menu-popover-width) / 2 + var(--rubus-action-menu-button-width) / 2),\\n      calc(\\n        -1 * (var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n              var(--rubus-action-menu-popover-tip-height) + var(--spectrum-global-dimension-size-175))\\n      )\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerTop .spectrum-Popover-tip {\\n    bottom: calc(-0.961 * var(--spectrum-global-dimension-size-130));\\n  }\\n  .spectrum--large .rubus-Popover--centerTop .spectrum-Popover-tip {\\n    bottom: calc(-1 * var(--spectrum-global-dimension-size-125));\\n  }\\n  .rubus-Popover--centerTop .spectrum-Popover-tip {\\n    left: calc((var(--rubus-action-menu-popover-width) - var(--rubus-action-menu-popover-tip-width)) / 2);\\n\\n    transform: rotate(0);\\n  }\\n  .rubus-Popover--centerLeft {\\n    transform: translate(\\n      calc(-0.8 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75) * 2)),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 2)\\n      )\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerLeft.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-75) * 2)),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 2)\\n      )\\n    );\\n  }\\n  .spectrum--large .rubus-Popover--centerLeft.is-open {\\n    transform: translate(\\n      calc(-1 * (var(--rubus-action-menu-popover-width) + var(--spectrum-global-dimension-size-115) * 2)),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 1.9)\\n      )\\n    );\\n  }\\n\\n  .spectrum--medium .rubus-Popover--centerLeft .spectrum-Popover-tip {\\n    top: calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);\\n    right: calc(-0.99 * var(--spectrum-global-dimension-size-200));\\n    transform: rotate(-90deg);\\n  }\\n  .spectrum--large .rubus-Popover--centerLeft .spectrum-Popover-tip {\\n    top: calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);\\n    right: calc(-0.972 * var(--spectrum-global-dimension-size-200));\\n    transform: rotate(-90deg);\\n  }\\n  .rubus-Popover--centerRight {\\n    transform: translate(\\n      calc(\\n        0.8 * var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75) +\\n          var(--rubus-action-menu-popover-tip-width) / 3\\n      ),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 2)\\n      )\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerRight.is-open {\\n    transform: translate(\\n      calc(\\n        var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-75) +\\n          var(--rubus-action-menu-popover-tip-width) / 3\\n      ),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 2)\\n      )\\n    );\\n  }\\n  .spectrum--large .rubus-Popover--centerRight.is-open {\\n    transform: translate(\\n      calc(var(--rubus-action-menu-button-width) + var(--spectrum-global-dimension-size-115) * 2),\\n      calc(\\n        -1 * ((\\n                var(--rubus-action-menu-popover-height) + var(--rubus-action-menu-button-height) +\\n                  var(--rubus-action-menu-popover-tip-height)\\n              ) / 1.9)\\n      )\\n    );\\n  }\\n  .spectrum--medium .rubus-Popover--centerRight .spectrum-Popover-tip {\\n    top: calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);\\n    left: calc(-0.99 * var(--spectrum-global-dimension-size-200));\\n    transform: rotate(90deg);\\n  }\\n  .spectrum--large .rubus-Popover--centerRight .spectrum-Popover-tip {\\n    top: calc((var(--rubus-action-menu-popover-height) - var(--rubus-action-menu-popover-tip-height)) / 2);\\n    left: calc(-0.972 * var(--spectrum-global-dimension-size-200));\\n    transform: rotate(90deg);\\n  }\\n</style>\\n\\n<div class=\\\"rubus-Popover-registering\\\" />\\n\\n<div\\n  class=\\\"spectrum-Popover rubus-Popover--{popverPosition == 'auto' ? popverPositionAuto : popverPosition}\\n    {isQuiet && variants === 'menu' ? `rubus-Popover-quiet--${popverPosition == 'auto' ? popverPositionAuto : popverPosition}` : ``}\\n    {$$restProps.class}\\\"\\n  class:is-open={isOpen}\\n  class:spectrum-Popover--dialog={variants === 'dialog'}\\n  bind:this={popover}>\\n  {#if variants === 'menu'}\\n    <slot />\\n  {:else if variants === 'dialog'}\\n    <div class=\\\"spectrum-Dialog-header\\\">\\n      <div class=\\\"spectrum-Dialog-title\\\">{title}</div>\\n    </div>\\n    <div class=\\\"spectrum-Dialog-content\\\">\\n      <slot />\\n    </div>\\n    <div class=\\\"spectrum-Popover-tip\\\" bind:this={popoverTip} />\\n  {/if}\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAsHE,0BAA0B,8BAAC,CAAC,AAC1B,MAAM,CAAE,IAAI,mCAAmC,CAAC,AAClD,CAAC,AACD,iBAAiB,8BAAC,CAAC,AACjB,gBAAgB,CAAE,IAAI,mCAAmC,CAAC,qCAAqC,CAAC,CAChG,YAAY,CAAE,IAAI,+BAA+B,CAAC,wCAAwC,CAAC,CAC3F,UAAU,CAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,+BAA+B,CAAC,uCAAuC,CAAC,AACpG,CAAC,AACD,iBAAiB,8BAAC,CAAC,AACjB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,iBAAiB,8BAAC,CAAC,AACjB,UAAU,CAAE,MAAM,CAElB,OAAO,CAAE,CAAC,CAEV,UAAU,CAAE,SAAS,CAAC,IAAI,wCAAwC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC;MACrF,OAAO,CAAC,IAAI,wCAAwC,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC;MACzE,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,wCAAwC,CAAC,MAAM,CAAC,CAE5E,cAAc,CAAE,IAAI,AACtB,CAAC,AAED,iBAAiB,QAAQ,8BAAC,CAAC,AACzB,UAAU,CAAE,OAAO,CAEnB,OAAO,CAAE,CAAC,CAEV,gBAAgB,CAAE,GAAG,CAErB,cAAc,CAAE,IAAI,AACtB,CAAC,AACD,iBAAiB,8BAAC,CAAC,AACjB,OAAO,CAAE,kBAAkB,CAC3B,OAAO,CAAE,WAAW,CACpB,kBAAkB,CAAE,MAAM,CAC1B,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,UAAU,CAEtB,SAAS,CAAE,IAAI,oCAAoC,CAAC,CACpD,UAAU,CAAE,IAAI,oCAAoC,CAAC,CAErD,QAAQ,CAAE,QAAQ,CAElB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,IAAI,8BAA8B,CAAC,uCAAuC,CAAC,CACzF,aAAa,CAAE,IAAI,gCAAgC,CAAC,4CAA4C,CAAC,CAEjG,OAAO,CAAE,IAAI,AACf,CAAC,AAED,qBAAqB,8BAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,CAChB,KAAK,CAAE,KAAK,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC/F,MAAM,CAAE;MACN,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,IAAI,8BAA8B,CAAC,uCAAuC,CAAC;KAC9E,AACH,CAAC,AACD,qBAAqB,8BAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,MAAM,CAChB,KAAK,CAAE,KAAK,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC/F,MAAM,CAAE;MACN,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChF,IAAI,8BAA8B,CAAC,uCAAuC,CAAC;KAC9E,AACH,CAAC,AACD,mDAAqB,OAAO,AAAC,CAAC,AAC5B,OAAO,CAAE,EAAE,CACX,KAAK,CAAE,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CACnF,MAAM,CAAE,IAAI,4BAA4B,CAAC,0CAA0C,CAAC,CACpF,YAAY,CAAE,IAAI,8BAA8B,CAAC,uCAAuC,CAAC,CACzF,YAAY,CAAE,KAAK,CACnB,QAAQ,CAAE,QAAQ,CAClB,SAAS,CAAE,OAAO,KAAK,CAAC,CACxB,GAAG,CAAE,KAAK,AACZ,CAAC,AAED,yBAAyB,8BAAC,CAAC,AACzB,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AACD,gCAAiB,CAAC,uBAAuB,eAEE,CAAC,AAC1C,gBAAgB,CAAE,WAAW,AAC/B,CAAC,AAED,gCAAiB,CAAC,oCAAqB,OAAO,AAAC,CAAC,AAC9C,gBAAgB,CAAE,IAAI,mCAAmC,CAAC,qCAAqC,CAAC,CAChG,YAAY,CAAE,IAAI,+BAA+B,CAAC,wCAAwC,CAAC,CAC3F,UAAU,CAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,+BAA+B,CAAC,uCAAuC,CAAC,AACxG,CAAC,AAED,2BAA2B,8BAAC,CAAC,AAC3B,SAAS,CAAE,UAAU,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,AAC9E,CAAC,AACD,iCAAiC,8BAAC,CAAC,AACjC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAAC;MACrD,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC;KACpD,AACH,CAAC,AACD,2BAA2B,QAAQ,8BAAC,CAAC,AACnC,SAAS,CAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,AAC5B,CAAC,AACD,iCAAiC,QAAQ,8BAAC,CAAC,AACzC,SAAS,CAAE,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AAC/E,CAAC,AACD,0BAA0B,8BAAC,CAAC,AAC1B,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC;MAC1F,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC;KACpD,AACH,CAAC,AACD,0BAA0B,QAAQ,8BAAC,CAAC,AAClC,SAAS,CAAE,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,AACpH,CAAC,AACD,gCAAgC,8BAAC,CAAC,AAChC,SAAS,CAAE;MACT;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC;OAChI,CAAC;MACF,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC;KACpD,AACH,CAAC,AACD,gCAAgC,QAAQ,8BAAC,CAAC,AACxC,SAAS,CAAE;MACT;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC;OAChI,CAAC;MACF,CAAC;KACF,AACH,CAAC,AAED,uBAAuB,8BAAC,CAAC,AACvB,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC;MAC1F;QACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cACpF,IAAI,wCAAwC,CAAC,yCAAyC,CAAC,CAAC;OAC/F;KACF,AACH,CAAC,AACD,uBAAuB,QAAQ,8BAAC,CAAC,AAC/B,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC;MAC1F;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cAClF,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OACpD;KACF,AACH,CAAC,AACD,6BAA6B,8BAAC,CAAC,AAC7B,SAAS,CAAE;MACT;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC;OAChI,CAAC;MACF;QACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cACpF,IAAI,wCAAwC,CAAC,yCAAyC,CAAC,CAAC;OAC/F;KACF,AACH,CAAC,AAED,6BAA6B,QAAQ,8BAAC,CAAC,AACrC,SAAS,CAAE;MACT;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC;OAChI,CAAC;MACF;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cAClF,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OACpD;KACF,AACH,CAAC,AACD,wBAAwB,8BAAC,CAAC,AACxB,SAAS,CAAE;MACT,CAAC,CAAC;MACF;QACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cACpF,IAAI,wCAAwC,CAAC,yCAAyC,CAAC,CAAC;OAC/F;KACF,AACH,CAAC,AAED,wBAAwB,QAAQ,8BAAC,CAAC,AAChC,SAAS,CAAE;MACT,CAAC,CAAC;MACF;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cAClF,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OACpD;KACF,AACH,CAAC,AACD,8BAA8B,8BAAC,CAAC,AAC9B,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAAC;MACrD;QACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cACpF,IAAI,wCAAwC,CAAC,yCAAyC,CAAC,CAAC;OAC/F;KACF,AACH,CAAC,AACD,8BAA8B,QAAQ,8BAAC,CAAC,AACtC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAAC;MACrD;QACE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC;cAClF,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;OACpD;KACF,AACH,CAAC,AACD,uBAAuB,8BAAC,CAAC,AACvB,SAAS,CAAE;MACT,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MACjG,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC9F,AACH,CAAC,AACD,6BAA6B,8BAAC,CAAC,AAC7B,SAAS,CAAE;MACT,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MACjG;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OACnI;KACF,AACH,CAAC,AACD,uBAAuB,QAAQ,8BAAC,CAAC,AAC/B,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC9F,AACH,CAAC,AACD,6BAA6B,QAAQ,8BAAC,CAAC,AACrC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OACnI;KACF,AACH,CAAC,AACD,wBAAwB,8BAAC,CAAC,AACxB,SAAS,CAAE;MACT,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC9F,AACH,CAAC,AACD,wBAAwB,QAAQ,8BAAC,CAAC,AAChC,SAAS,CAAE;MACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC7F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC9F,AACH,CAAC,AACD,8BAA8B,8BAAC,CAAC,AAC9B,SAAS,CAAE;MACT,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OACnI;KACF,AACH,CAAC,AACD,8BAA8B,QAAQ,8BAAC,CAAC,AACtC,SAAS,CAAE;MACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC7F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OACnI;KACF,AACH,CAAC,AACD,2BAA2B,8BAAC,CAAC,AAC3B,SAAS,CAAE;MACT,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC7F,AACH,CAAC,AACD,2BAA2B,QAAQ,8BAAC,CAAC,AACnC,SAAS,CAAE;MACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC7F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC7F,AACH,CAAC,AACD,iCAAiC,8BAAC,CAAC,AACjC,SAAS,CAAE;MACT,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OAClI;KACF,AACH,CAAC,AACD,iCAAiC,QAAQ,8BAAC,CAAC,AACzC,SAAS,CAAE;MACT,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC7F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OAClI;KACF,AACH,CAAC,AACD,0BAA0B,8BAAC,CAAC,AAC1B,SAAS,CAAE;MACT,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MACjG,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC7F,AACH,CAAC,AACD,gCAAgC,8BAAC,CAAC,AAChC,SAAS,CAAE;MACT,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MACjG;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OAClI;KACF,AACH,CAAC,AACD,0BAA0B,QAAQ,8BAAC,CAAC,AAClC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KAC7F,AACH,CAAC,AACD,gCAAgC,QAAQ,8BAAC,CAAC,AACxC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC;MAC/F;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC;OAClI;KACF,AACH,CAAC,AAED,4BAA4B,8BAAC,CAAC,AAC5B,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClG,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC;KACpD,AACH,CAAC,AACD,4BAA4B,QAAQ,8BAAC,CAAC,AACpC,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClG,IAAI,mCAAmC,CAAC;KACzC,AACH,CAAC,AAOD,gCAAiB,CAAC,4BAA4B,CAAC,qBAAqB,eAAC,CAAC,AACpE,GAAG,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,AAC/D,CAAC,AACD,+BAAgB,CAAC,4BAA4B,CAAC,qBAAqB,eAAC,CAAC,AACnE,GAAG,CAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,AAC3D,CAAC,AACD,2CAA4B,CAAC,qBAAqB,eAAC,CAAC,AAClD,IAAI,CAAE,KAAK,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,qCAAqC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAErG,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,yBAAyB,8BAAC,CAAC,AACzB,SAAS,CAAE;MACT,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAClG;QACE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC;cACpF,IAAI,sCAAsC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC;OAChG;KACF,AACH,CAAC,AAmBD,gCAAiB,CAAC,yBAAyB,CAAC,qBAAqB,eAAC,CAAC,AACjE,MAAM,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,AAClE,CAAC,AACD,+BAAgB,CAAC,yBAAyB,CAAC,qBAAqB,eAAC,CAAC,AAChE,MAAM,CAAE,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,AAC9D,CAAC,AACD,wCAAyB,CAAC,qBAAqB,eAAC,CAAC,AAC/C,IAAI,CAAE,KAAK,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,qCAAqC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAErG,SAAS,CAAE,OAAO,CAAC,CAAC,AACtB,CAAC,AACD,0BAA0B,8BAAC,CAAC,AAC1B,SAAS,CAAE;MACT,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrG;QACE,EAAE,CAAC,CAAC,CAAC,CAAC;gBACE,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC;kBAChF,IAAI,sCAAsC,CAAC;eAC9C,CAAC,CAAC,CAAC,CAAC,CAAC;OACb;KACF,AACH,CAAC,AAwBD,gCAAiB,CAAC,0BAA0B,CAAC,qBAAqB,eAAC,CAAC,AAClE,GAAG,CAAE,KAAK,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,sCAAsC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtG,KAAK,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAC9D,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,+BAAgB,CAAC,0BAA0B,CAAC,qBAAqB,eAAC,CAAC,AACjE,GAAG,CAAE,KAAK,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,sCAAsC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtG,KAAK,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAC/D,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACD,2BAA2B,8BAAC,CAAC,AAC3B,SAAS,CAAE;MACT;QACE,GAAG,CAAC,CAAC,CAAC,IAAI,gCAAgC,CAAC,CAAC,CAAC,CAAC,IAAI,mCAAmC,CAAC,CAAC,CAAC;UACtF,IAAI,qCAAqC,CAAC,CAAC,CAAC,CAAC,CAAC;OACjD,CAAC;MACF;QACE,EAAE,CAAC,CAAC,CAAC,CAAC;gBACE,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,iCAAiC,CAAC,CAAC,CAAC;kBAChF,IAAI,sCAAsC,CAAC;eAC9C,CAAC,CAAC,CAAC,CAAC,CAAC;OACb;KACF,AACH,CAAC,AA0BD,gCAAiB,CAAC,2BAA2B,CAAC,qBAAqB,eAAC,CAAC,AACnE,GAAG,CAAE,KAAK,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,sCAAsC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtG,IAAI,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAC7D,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC,AACD,+BAAgB,CAAC,2BAA2B,CAAC,qBAAqB,eAAC,CAAC,AAClE,GAAG,CAAE,KAAK,CAAC,IAAI,kCAAkC,CAAC,CAAC,CAAC,CAAC,IAAI,sCAAsC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtG,IAAI,CAAE,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,oCAAoC,CAAC,CAAC,CAC9D,SAAS,CAAE,OAAO,KAAK,CAAC,AAC1B,CAAC\"}"
};

const Popover = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, ["isOpen","variants","popverPosition","isQuiet","title"]);
	let { isOpen = false } = $$props;
	let { variants = "menu" } = $$props;
	let { popverPosition = "auto" } = $$props;
	let { isQuiet = false } = $$props;
	let { title = "Popover Title" } = $$props;
	let popverPositionAuto = "bottomRight";
	let popover;
	let popoverTip;
	let menuButton;
	let menuButtonWidth;
	let menuButtonHeight;
	let popoverWidth;
	let popoverHeight;
	let popoverTipWidth;
	let popoverTipHeight;

	onMount(() => {
		setCssVar();
	});

	afterUpdate(() => {
		autoPlace();
	});

	function setCssVar() {
		if (!popover.parentElement.querySelector("#rubus-ActionSource")) {
			return;
		}

		menuButton = getRect(popover.parentElement.querySelector("#rubus-ActionSource"));
		menuButtonWidth = menuButton && menuButton.width;
		menuButtonHeight = menuButton && menuButton.height;
		popoverWidth = popover ;
		popoverHeight = popover ;
		popoverTipWidth = popoverTip ;
		popoverTipHeight = popoverTip ;
		popover.parentElement.style.setProperty("--rubus-action-menu-button-width", menuButtonWidth + `px`);
		popover.parentElement.style.setProperty("--rubus-action-menu-button-height", menuButtonHeight + `px`);
		popover.parentElement.style.setProperty("--rubus-action-menu-popover-width", popoverWidth + `px`);
		popover.parentElement.style.setProperty("--rubus-action-menu-popover-height", popoverHeight + `px`);
		popover.parentElement.style.setProperty("--rubus-action-menu-popover-tip-width", popoverTipWidth + `px`);
		popover.parentElement.style.setProperty("--rubus-action-menu-popover-tip-height", popoverTipHeight + `px`);
	}

	function autoPlace() {
		if (variants == "menu") {
			switch (popverPosition == "auto") {
				case menuButton.x > popoverWidth && menuButton.y > popoverHeight && menuButton.right < popoverWidth && menuButton.bottom < popoverHeight:
					popverPositionAuto = "topLeft";
					break;
				case menuButton.x < popoverWidth && menuButton.y > popoverHeight && menuButton.right > popoverWidth && menuButton.bottom < popoverHeight:
					popverPositionAuto = "topRight";
					break;
				case menuButton.right < popoverWidth && menuButton.x > popoverWidth:
					popverPositionAuto = "bottomLeft";
					break;
				default:
					popverPositionAuto = "bottomRight";
			}
		}

		if (variants == "dialog") {
			switch (popverPosition == "auto") {
				case menuButton.x > popoverWidth && menuButton.right < popoverWidth:
					popverPositionAuto = "centerLeft";
					break;
				case menuButton.x < popoverWidth && menuButton.right > popoverWidth:
					popverPositionAuto = "centerRight";
					break;
				case menuButton.x > popoverWidth && menuButton.y > popoverHeight && menuButton.right > popoverWidth && menuButton.bottom < popoverHeight:
					popverPositionAuto = "centerTop";
					break;
				default:
					popverPositionAuto = "centerBottom";
			}
		}
	}

	if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0) $$bindings.isOpen(isOpen);
	if ($$props.variants === void 0 && $$bindings.variants && variants !== void 0) $$bindings.variants(variants);
	if ($$props.popverPosition === void 0 && $$bindings.popverPosition && popverPosition !== void 0) $$bindings.popverPosition(popverPosition);
	if ($$props.isQuiet === void 0 && $$bindings.isQuiet && isQuiet !== void 0) $$bindings.isQuiet(isQuiet);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	$$result.css.add(css);

	return `<div class="${"rubus-Popover-registering svelte-155j3uu"}"></div>

<div class="${[
		"spectrum-Popover rubus-Popover--" + escape(popverPosition == "auto"
		? popverPositionAuto
		: popverPosition) + "\n    " + escape(isQuiet && variants === "menu"
		? `rubus-Popover-quiet--${popverPosition == "auto"
			? popverPositionAuto
			: popverPosition}`
		: ``) + "\n    " + escape($$restProps.class) + " svelte-155j3uu",
		(isOpen ? "is-open" : "") + " " + (variants === "dialog" ? "spectrum-Popover--dialog" : "")
	].join(" ").trim()}"${add_attribute("this", popover, 1)}>${variants === "menu"
	? `${slots.default ? slots.default({}) : ``}`
	: `${variants === "dialog"
		? `<div class="${"spectrum-Dialog-header svelte-155j3uu"}"><div class="${"spectrum-Dialog-title"}">${escape(title)}</div></div>
    <div class="${"spectrum-Dialog-content"}">${slots.default ? slots.default({}) : ``}</div>
    <div class="${"spectrum-Popover-tip svelte-155j3uu"}"${add_attribute("this", popoverTip, 1)}></div>`
		: ``}`}</div>`;
});

/* node_modules/@rubus/rubus/src/packages/Menu/Menu.svelte generated by Svelte v3.29.4 */

const css$1 = {
	code: ".spectrum-Menu.svelte-1qphbsz{overflow-x:hidden}.spectrum-Menu-nested.svelte-1qphbsz{position:absolute}",
	map: "{\"version\":3,\"file\":\"Menu.svelte\",\"sources\":[\"Menu.svelte\"],\"sourcesContent\":[\"<script>\\n  import { afterUpdate, onMount } from \\\"svelte\\\";\\n  import { getRect, getInTheBoxPosition } from \\\"../utils/element.js\\\";\\n\\n  /**\\n   * Specify the role of menu\\n   * @type {string} [role = \\\"menu\\\"]\\n   */\\n  export let role = \\\"menu\\\";\\n\\n  /**\\n   * Specify the max-width of menu\\n   * @type {number} [maxWidth = 0]\\n   */\\n  export let maxWidth = 0;\\n\\n  /**\\n   * Specify the min-width of menu\\n   * @type {number} [minWidth = 0]\\n   */\\n  export let minWidth = 0;\\n\\n  /**\\n   * Specify the aria-labelledby of menu\\n   * @type {string} [ariaLabelledby = \\\"\\\"]\\n   */\\n  export let ariaLabelledby = \\\"\\\";\\n\\n  /**\\n   * Specify the nested mode of menu\\n   * @type {boolean} [nested = false]\\n   */\\n  export let nested = false;\\n\\n  let menuEl;\\n  let menuWidth;\\n  afterUpdate(() => {\\n    if (menuEl) {\\n      nested && resetPosition();\\n      menuWidth = setWidth().width;\\n    }\\n  });\\n  onMount(() => {\\n    nested && window.addEventListener(\\\"click\\\", listenForChildClicks);\\n  });\\n\\n  function listenForChildClicks(e) {\\n    let prevNode = menuEl.previousElementSibling;\\n    if (prevNode && prevNode.contains(e.target)) {\\n      menuEl.previousElementSibling && resetPosition();\\n    }\\n  }\\n\\n  let getInTheBoxPositionTop = 0;\\n  let getInTheBoxPositionLeft = 0;\\n  function resetPosition() {\\n    let prevNode = menuEl.previousElementSibling;\\n    if (prevNode) {\\n      let openItem = prevNode.querySelector(\\\".spectrum-Menu-item.is-open\\\");\\n      getInTheBoxPositionLeft = getRect(prevNode).width;\\n      [, getInTheBoxPositionTop] = getInTheBoxPosition(prevNode, openItem);\\n    }\\n  }\\n  function setWidth() {\\n    let thisMenu = menuEl.parentElement.parentElement.querySelector(\\\"#rubus-ActionSource\\\");\\n    if (thisMenu) {\\n      return getRect(thisMenu);\\n    } else {\\n      return { width: 0 };\\n    }\\n  }\\n\\n  $: styleCssText = [\\n    maxWidth ? `max-width:${maxWidth}px;` : `max-width:${menuWidth}px;`,\\n    minWidth ? `min-width:${minWidth}px;` : `min-width:${menuWidth}px;`,\\n    nested && `top:${getInTheBoxPositionTop}px;`,\\n    nested && `left:${getInTheBoxPositionLeft}px;`,\\n  ]\\n    .filter(Boolean)\\n    .join(\\\" \\\");\\n</script>\\n\\n<style global>\\n  .spectrum-Menu-itemLabel {\\n    white-space: nowrap;\\n    width: auto;\\n    display: inline-block;\\n    *display: inline;\\n  }\\n  .spectrum-Menu {\\n    overflow-x: hidden;\\n  }\\n  .spectrum-Menu-nested {\\n    position: absolute;\\n  }\\n</style>\\n\\n<ul\\n  class=\\\"spectrum-Menu\\\"\\n  class:spectrum-Menu-nested={nested}\\n  {role}\\n  style={styleCssText}\\n  bind:this={menuEl}\\n  aria-labelledby={ariaLabelledby}>\\n  <slot />\\n</ul>\\n\"],\"names\":[],\"mappings\":\"AAyFE,cAAc,eAAC,CAAC,AACd,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,qBAAqB,eAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC\"}"
};

const Menu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { role = "menu" } = $$props;
	let { maxWidth = 0 } = $$props;
	let { minWidth = 0 } = $$props;
	let { ariaLabelledby = "" } = $$props;
	let { nested = false } = $$props;
	let menuEl;
	let menuWidth;

	afterUpdate(() => {
	});

	onMount(() => {
		nested && window.addEventListener("click", listenForChildClicks);
	});

	function listenForChildClicks(e) {
		let prevNode = menuEl.previousElementSibling;
	}

	let getInTheBoxPositionTop = 0;
	let getInTheBoxPositionLeft = 0;

	if ($$props.role === void 0 && $$bindings.role && role !== void 0) $$bindings.role(role);
	if ($$props.maxWidth === void 0 && $$bindings.maxWidth && maxWidth !== void 0) $$bindings.maxWidth(maxWidth);
	if ($$props.minWidth === void 0 && $$bindings.minWidth && minWidth !== void 0) $$bindings.minWidth(minWidth);
	if ($$props.ariaLabelledby === void 0 && $$bindings.ariaLabelledby && ariaLabelledby !== void 0) $$bindings.ariaLabelledby(ariaLabelledby);
	if ($$props.nested === void 0 && $$bindings.nested && nested !== void 0) $$bindings.nested(nested);
	$$result.css.add(css$1);
	let styleCssText;

	styleCssText = [
		maxWidth
		? `max-width:${maxWidth}px;`
		: `max-width:${menuWidth}px;`,
		minWidth
		? `min-width:${minWidth}px;`
		: `min-width:${menuWidth}px;`,
		nested && `top:${getInTheBoxPositionTop}px;`,
		nested && `left:${getInTheBoxPositionLeft}px;`
	].filter(Boolean).join(" ");

	return `<ul class="${["spectrum-Menu svelte-1qphbsz", nested ? "spectrum-Menu-nested" : ""].join(" ").trim()}"${add_attribute("role", role, 0)}${add_attribute("style", styleCssText, 0)}${add_attribute("aria-labelledby", ariaLabelledby, 0)}${add_attribute("this", menuEl, 1)}>${slots.default ? slots.default({}) : ``}</ul>`;
});

/* node_modules/@rubus/rubus/src/packages/Menu/MenuItem.svelte generated by Svelte v3.29.4 */

const css$2 = {
	code: ".spectrum-Menu-item.svelte-wp5wyr{width:100%}.spectrum-Menu-item.is-disabled.svelte-wp5wyr{pointer-events:none}",
	map: "{\"version\":3,\"file\":\"MenuItem.svelte\",\"sources\":[\"MenuItem.svelte\"],\"sourcesContent\":[\"<script>\\n  import { current_component } from \\\"svelte/internal\\\";\\n  import { getEventsAction } from \\\"../utils/get-events-action.js\\\";\\n  import { IconCheckmarkMedium, IconChevronRightMedium } from \\\"@rubus/svelte-spectrum-icons-ui\\\";\\n\\n  /**\\n   * Specify the label of  menu item\\n   * @type {string} [label = \\\"\\\"]\\n   */\\n  export let label = \\\"\\\";\\n\\n  /**\\n   * Specify the selected status of  menu item\\n   * @type {boolean} [isSelected = false]\\n   */\\n  export let isSelected = false;\\n\\n  /**\\n   * Set to `true` to disable the menu item\\n   * @type {boolean}[disabled=false]\\n   */\\n  export let disabled = false;\\n\\n  /**\\n   * Specify the divider status of  menu item\\n   * @type {boolean} [isDivider = false]\\n   */\\n  export let isDivider = false;\\n\\n  /**\\n   * Specify the finally result index of  menu item\\n   * @type {number} [resultIndex = 0]\\n   */\\n  export let resultIndex = 0;\\n\\n  /**\\n   * Specify the this item index of  menu item\\n   * @type {number} [thisIndex = 0]\\n   */\\n  export let thisIndex = 0;\\n\\n  /**\\n   * Specify the tabindex of  menu item\\n   * @type {number} [tabindex = 0]\\n   */\\n  export let tabindex = 0;\\n\\n  /**\\n   * Specify the role of  menu item\\n   * @type {string} [role = \\\"menuitem\\\"]\\n   */\\n  export let role = \\\"menuitem\\\";\\n\\n  /**\\n   * Whether to display Checkmark icon\\n   * @type {number} [showCheckmark = true]\\n   */\\n  export let showCheckmark = true;\\n\\n  /**\\n   * Specify the nested mode of  menu item\\n   * @type {boolean} [nested = false]\\n   */\\n  export let nested = false;\\n\\n  const eventsListen = getEventsAction(current_component);\\n  function dropdownPick() {\\n    resultIndex = thisIndex;\\n  }\\n</script>\\n\\n<style global>\\n  .spectrum-Menu-item {\\n    width: 100%;\\n  }\\n  .spectrum-Menu-itemIcon {\\n    text-align: center;\\n\\n    right: 0;\\n  }\\n  .spectrum-Menu-item.is-disabled {\\n    pointer-events: none;\\n  }\\n</style>\\n\\n{#if isDivider}\\n  <li class=\\\"spectrum-Menu-divider\\\" role=\\\"separator\\\" />\\n{:else}\\n  <li\\n    class=\\\"spectrum-Menu-item\\\"\\n    class:is-selected={!nested && (isSelected || resultIndex === thisIndex)}\\n    class:is-disabled={disabled}\\n    class:is-open={nested && (isSelected || resultIndex === thisIndex)}\\n    {role}\\n    {tabindex}\\n    on:click={!disabled && dropdownPick}\\n    use:eventsListen>\\n    <slot><span class=\\\"spectrum-Menu-itemLabel\\\">{label}</span></slot>\\n    {#if nested && (isSelected || resultIndex === thisIndex)}\\n      <IconChevronRightMedium\\n        className=\\\"spectrum-UIIcon-ChevronRightMedium spectrum-Menu-chevron spectrum-Menu-itemIcon\\\"\\n        focusable=\\\"false\\\"\\n        width=\\\"6\\\"\\n        height=\\\"10\\\"\\n        aria-hidden={isSelected}\\n        aria-label=\\\"Next\\\" />\\n    {:else if showCheckmark}\\n      <IconCheckmarkMedium\\n        className=\\\"spectrum-Menu-checkmark spectrum-Menu-itemIcon\\\"\\n        focusable=\\\"false\\\"\\n        width=\\\"12\\\"\\n        height=\\\"12\\\"\\n        aria-hidden={isSelected} />\\n    {/if}\\n  </li>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AAwEE,mBAAmB,cAAC,CAAC,AACnB,KAAK,CAAE,IAAI,AACb,CAAC,AAMD,mBAAmB,YAAY,cAAC,CAAC,AAC/B,cAAc,CAAE,IAAI,AACtB,CAAC\"}"
};

const MenuItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { label = "" } = $$props;
	let { isSelected = false } = $$props;
	let { disabled = false } = $$props;
	let { isDivider = false } = $$props;
	let { resultIndex = 0 } = $$props;
	let { thisIndex = 0 } = $$props;
	let { tabindex = 0 } = $$props;
	let { role = "menuitem" } = $$props;
	let { showCheckmark = true } = $$props;
	let { nested = false } = $$props;

	if ($$props.label === void 0 && $$bindings.label && label !== void 0) $$bindings.label(label);
	if ($$props.isSelected === void 0 && $$bindings.isSelected && isSelected !== void 0) $$bindings.isSelected(isSelected);
	if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
	if ($$props.isDivider === void 0 && $$bindings.isDivider && isDivider !== void 0) $$bindings.isDivider(isDivider);
	if ($$props.resultIndex === void 0 && $$bindings.resultIndex && resultIndex !== void 0) $$bindings.resultIndex(resultIndex);
	if ($$props.thisIndex === void 0 && $$bindings.thisIndex && thisIndex !== void 0) $$bindings.thisIndex(thisIndex);
	if ($$props.tabindex === void 0 && $$bindings.tabindex && tabindex !== void 0) $$bindings.tabindex(tabindex);
	if ($$props.role === void 0 && $$bindings.role && role !== void 0) $$bindings.role(role);
	if ($$props.showCheckmark === void 0 && $$bindings.showCheckmark && showCheckmark !== void 0) $$bindings.showCheckmark(showCheckmark);
	if ($$props.nested === void 0 && $$bindings.nested && nested !== void 0) $$bindings.nested(nested);
	$$result.css.add(css$2);

	return `${isDivider
	? `<li class="${"spectrum-Menu-divider"}" role="${"separator"}"></li>`
	: `<li class="${[
			"spectrum-Menu-item svelte-wp5wyr",
			(!nested && (isSelected || resultIndex === thisIndex)
			? "is-selected"
			: "") + " " + (disabled ? "is-disabled" : "") + " " + (nested && (isSelected || resultIndex === thisIndex)
			? "is-open"
			: "")
		].join(" ").trim()}"${add_attribute("role", role, 0)}${add_attribute("tabindex", tabindex, 0)}>${slots.default
		? slots.default({})
		: `<span class="${"spectrum-Menu-itemLabel"}">${escape(label)}</span>`}
    ${nested && (isSelected || resultIndex === thisIndex)
		? `${validate_component(ChevronRightMedium, "IconChevronRightMedium").$$render(
				$$result,
				{
					className: "spectrum-UIIcon-ChevronRightMedium spectrum-Menu-chevron spectrum-Menu-itemIcon",
					focusable: "false",
					width: "6",
					height: "10",
					"aria-hidden": isSelected,
					"aria-label": "Next"
				},
				{},
				{}
			)}`
		: `${showCheckmark
			? `${validate_component(CheckmarkMedium, "IconCheckmarkMedium").$$render(
					$$result,
					{
						className: "spectrum-Menu-checkmark spectrum-Menu-itemIcon",
						focusable: "false",
						width: "12",
						height: "12",
						"aria-hidden": isSelected
					},
					{},
					{}
				)}`
			: ``}`}</li>`}`;
});

/* node_modules/@rubus/rubus/src/packages/Dropdown/Dropdown.svelte generated by Svelte v3.29.4 */

const css$3 = {
	code: ".spectrum-FieldButton.svelte-1uh8ujk{display:flex}",
	map: "{\"version\":3,\"file\":\"Dropdown.svelte\",\"sources\":[\"Dropdown.svelte\"],\"sourcesContent\":[\"<script>\\n  import { onMount } from \\\"svelte\\\";\\n  import { IconChevronDownMedium, IconAlertMedium } from \\\"@rubus/svelte-spectrum-icons-ui\\\";\\n  import { Popover } from \\\"../Popover\\\";\\n  import { Menu } from \\\"../Menu\\\";\\n\\n  /**\\n   * Specify the placeholder of dropdown\\n   * @type {string} [placeholder = \\\"\\\"]\\n   */\\n  export let placeholder = \\\"\\\";\\n\\n  /**\\n   * Set to `true` to disable the dropdown\\n   * @type {boolean}[disabled=false]\\n   */\\n  export let disabled = false;\\n\\n  /**\\n   * Set whether dropdown is open\\n   * @type {boolean}[isOpen=false]\\n   */\\n  export let isOpen = false;\\n\\n  /**\\n   * Set its external result index\\n   * @type { number } [resultIndex = 0\\n   */\\n  export let resultIndex = 0;\\n\\n  /**\\n   * Set its current index\\n   * @type { number } [thisIndex = 0\\n   */\\n  export let thisIndex = 0;\\n\\n  /**\\n   * Specify the invalid mode of dropdown\\n   * @type { boolean } [isInvalid= false]\\n   */\\n  export let isInvalid = false;\\n\\n  /**\\n   * Specify the quiet mode of dropdown\\n   * @type { boolean } [isQuiet= false]\\n   */\\n  export let isQuiet = false;\\n\\n  /**\\n   * Specify the css `min-width` of dropdown and child menu\\n   * @type { number } [minWidth = \\\"200\\\"]\\n   */\\n  export let minWidth = 200;\\n\\n  /**\\n   * Whether to automatically fold\\n   * @type {boolean}[autoFold=false]\\n   */\\n\\n  export let autoFold = true;\\n\\n  let isActive = false;\\n  function dropdownStatusCutover() {\\n    isActive = true;\\n    resultIndex = thisIndex;\\n    isOpen = !isOpen;\\n  }\\n  onMount(() => {\\n    dropmenuEl && dropmenuEl.addEventListener(\\\"click\\\", listenForChildClicks);\\n    dropmenuEl && dropmenuEl.addEventListener(\\\"keyup\\\", listenForChildClicks);\\n    window && window.addEventListener(\\\"click\\\", listenForOtherClicks);\\n    window && window.addEventListener(\\\"keyup\\\", listenForOtherClicks);\\n  });\\n\\n  let dropmenuEl;\\n  let triggerNode = \\\"\\\";\\n  function listenForChildClicks(e) {\\n    if (dropmenuEl && dropmenuEl.contains(e.target)) {\\n      if (e.target.classList.length) {\\n        if (testHasClassName(e.target.classList, `spectrum-Menu-item`)) {\\n          triggerNode = getNodeHTML(e.target.childNodes);\\n        } else if (testHasClassName(e.target.classList, `spectrum-Menu-itemLabel`)) {\\n          triggerNode = getNodeHTML(e.target.parentNode.childNodes);\\n        } else if (testHasClassName(e.target.parentNode.classList, `spectrum-Menu-item`)) {\\n          triggerNode = getNodeHTML(e.target.parentNode.childNodes);\\n        }\\n      }\\n    }\\n  }\\n  function listenForOtherClicks(e) {\\n    if (!autoFold) {\\n      return;\\n    }\\n    if (dropmenuEl && !dropmenuEl.contains(e.target)) {\\n      isOpen = false;\\n    }\\n  }\\n\\n  function testHasClassName(el, verifyString) {\\n    if (!el) {\\n      return false;\\n    }\\n    for (let index = 0; index < el.length; index++) {\\n      return el[index] === verifyString;\\n    }\\n  }\\n  function getNodeHTML(el) {\\n    if (!el.length) {\\n      return \\\"\\\";\\n    }\\n    let nodeHTML = \\\"\\\";\\n    for (let index = 0; index < el.length; index++) {\\n      if (!testHasClassName(el[index].classList, `spectrum-Menu-checkmark`)) {\\n        el[index].outerHTML ? (nodeHTML = nodeHTML + el[index].outerHTML) : nodeHTML;\\n      }\\n    }\\n    return nodeHTML.replace(/spectrum-Menu-itemLabel/g, \\\"spectrum-Dropdown-label\\\");\\n  }\\n</script>\\n\\n<style global>\\n  .spectrum-FieldButton {\\n    display: flex;\\n  }\\n  .spectrum-Dropdown-trigger > .spectrum-Dropdown-icon {\\n    transition: transform var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\\n      opacity var(--spectrum-global-animation-duration-100, 130ms) ease-in-out,\\n      visibility 0ms linear var(--spectrum-global-animation-duration-100, 130ms);\\n  }\\n  .spectrum-Dropdown-trigger.is-selected > .spectrum-Dropdown-icon {\\n    transform: rotate(180deg);\\n  }\\n</style>\\n\\n<div\\n  class=\\\"spectrum-Dropdown\\\"\\n  class:is-open={isOpen}\\n  class:is-invalid={isInvalid}\\n  class:is-disabled={disabled}\\n  class:spectrum-Dropdown--quiet={isQuiet}\\n  on:click={!disabled && dropdownStatusCutover}\\n  bind:this={dropmenuEl}>\\n  <button\\n    class=\\\"spectrum-FieldButton spectrum-Dropdown-trigger\\\"\\n    class:is-selected={isOpen}\\n    class:is-invalid={isInvalid}\\n    class:is-disabled={disabled}\\n    class:spectrum-FieldButton--quiet={isQuiet}\\n    aria-haspopup=\\\"listbox\\\"\\n    id=\\\"rubus-ActionSource\\\"\\n    style=\\\"min-width:{minWidth}px\\\">\\n    {#if !triggerNode}\\n      <span class=\\\"spectrum-Dropdown-label\\\" class:is-placeholder={!isActive && placeholder}>\\n        <slot name=\\\"dropdown-label\\\">{placeholder}</slot>\\n      </span>\\n    {:else}\\n      {@html triggerNode}\\n    {/if}\\n    {#if isInvalid}\\n      <IconAlertMedium focusable=\\\"false\\\" aria-hidden=\\\"true\\\" aria-label=\\\"Folder\\\" />\\n    {/if}\\n    <IconChevronDownMedium className=\\\"spectrum-Dropdown-icon\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\" />\\n  </button>\\n\\n  <Popover class=\\\"spectrum-Dropdown-popover\\\" {isOpen}>\\n    <Menu role=\\\"listbox\\\" {minWidth}>\\n      <slot />\\n    </Menu>\\n  </Popover>\\n  <div />\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAyHE,qBAAqB,eAAC,CAAC,AACrB,OAAO,CAAE,IAAI,AACf,CAAC\"}"
};

const Dropdown = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { placeholder = "" } = $$props;
	let { disabled = false } = $$props;
	let { isOpen = false } = $$props;
	let { resultIndex = 0 } = $$props;
	let { thisIndex = 0 } = $$props;
	let { isInvalid = false } = $$props;
	let { isQuiet = false } = $$props;
	let { minWidth = 200 } = $$props;
	let { autoFold = true } = $$props;

	onMount(() => {
		window && window.addEventListener("click", listenForOtherClicks);
		window && window.addEventListener("keyup", listenForOtherClicks);
	});

	let dropmenuEl;

	function listenForOtherClicks(e) {
		if (!autoFold) {
			return;
		}
	}

	if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0) $$bindings.placeholder(placeholder);
	if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
	if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0) $$bindings.isOpen(isOpen);
	if ($$props.resultIndex === void 0 && $$bindings.resultIndex && resultIndex !== void 0) $$bindings.resultIndex(resultIndex);
	if ($$props.thisIndex === void 0 && $$bindings.thisIndex && thisIndex !== void 0) $$bindings.thisIndex(thisIndex);
	if ($$props.isInvalid === void 0 && $$bindings.isInvalid && isInvalid !== void 0) $$bindings.isInvalid(isInvalid);
	if ($$props.isQuiet === void 0 && $$bindings.isQuiet && isQuiet !== void 0) $$bindings.isQuiet(isQuiet);
	if ($$props.minWidth === void 0 && $$bindings.minWidth && minWidth !== void 0) $$bindings.minWidth(minWidth);
	if ($$props.autoFold === void 0 && $$bindings.autoFold && autoFold !== void 0) $$bindings.autoFold(autoFold);
	$$result.css.add(css$3);

	return `<div class="${[
		"spectrum-Dropdown",
		(isOpen ? "is-open" : "") + " " + (isInvalid ? "is-invalid" : "") + " " + (disabled ? "is-disabled" : "") + " " + (isQuiet ? "spectrum-Dropdown--quiet" : "")
	].join(" ").trim()}"${add_attribute("this", dropmenuEl, 1)}><button class="${[
		"spectrum-FieldButton spectrum-Dropdown-trigger svelte-1uh8ujk",
		(isOpen ? "is-selected" : "") + " " + (isInvalid ? "is-invalid" : "") + " " + (disabled ? "is-disabled" : "") + " " + (isQuiet ? "spectrum-FieldButton--quiet" : "")
	].join(" ").trim()}" aria-haspopup="${"listbox"}" id="${"rubus-ActionSource"}" style="${"min-width:" + escape(minWidth) + "px"}">${ `<span class="${["spectrum-Dropdown-label",  placeholder ? "is-placeholder" : ""].join(" ").trim()}">${slots["dropdown-label"]
		? slots["dropdown-label"]({})
		: `${escape(placeholder)}`}</span>`
	}
    ${isInvalid
	? `${validate_component(AlertMedium, "IconAlertMedium").$$render(
			$$result,
			{
				focusable: "false",
				"aria-hidden": "true",
				"aria-label": "Folder"
			},
			{},
			{}
		)}`
	: ``}
    ${validate_component(ChevronDownMedium, "IconChevronDownMedium").$$render(
		$$result,
		{
			className: "spectrum-Dropdown-icon",
			focusable: "false",
			"aria-hidden": "true"
		},
		{},
		{}
	)}</button>

  ${validate_component(Popover, "Popover").$$render(
		$$result,
		{
			class: "spectrum-Dropdown-popover",
			isOpen
		},
		{},
		{
			default: () => `${validate_component(Menu, "Menu").$$render($$result, { role: "listbox", minWidth }, {}, {
				default: () => `${slots.default ? slots.default({}) : ``}`
			})}`
		}
	)}
  <div></div></div>`;
});

/* src/components/nav/Nav.svelte generated by Svelte v3.29.4 */

const css$4 = {
	code: "nav.svelte-1blytlz{position:fixed;top:0;left:0;width:100vw;background-color:var(--spectrum-global-color-gray-50);display:flex;justify-content:center;z-index:200}ul.svelte-1blytlz{margin:0;padding:0}li.svelte-1blytlz{list-style-type:none}a.svelte-1blytlz,a.svelte-1blytlz:hover,a.svelte-1blytlz:focus,a.svelte-1blytlz:active{text-decoration:none;color:inherit}.nav-wrap.svelte-1blytlz{width:98%;height:60px;display:flex;justify-content:space-between}.nav-item.svelte-1blytlz{height:60px}.nav-logo.svelte-1blytlz{display:flex;align-items:center}img.svelte-1blytlz{height:40px}.router-wrap.svelte-1blytlz{height:60px;display:flex;justify-content:space-between;align-items:center}.route-item.svelte-1blytlz{text-align:center;width:120px;line-height:60px;height:100%;position:relative}.current-route.svelte-1blytlz{color:var(--spectrum-semantic-cta-color-background-default)}span.svelte-1blytlz{position:absolute;bottom:0;background:var(--spectrum-semantic-cta-color-background-default);left:45px;width:30px;height:4.5px;border-top-left-radius:4.5px;border-top-right-radius:4.5px}.nav-menu-area.svelte-1blytlz{display:flex;justify-content:space-between}.theme-list.svelte-1blytlz{display:flex;align-items:center;height:60px}.language-list.svelte-1blytlz{display:flex;width:140px;height:60px;justify-content:center;align-items:center;flex-direction:row}",
	map: "{\"version\":3,\"file\":\"Nav.svelte\",\"sources\":[\"Nav.svelte\"],\"sourcesContent\":[\"<script>\\n  import * as router from \\\"./nav.json\\\";\\n\\n  import { Dropdown } from \\\"@rubus/rubus/src/packages/Dropdown\\\";\\n  import { MenuItem } from \\\"@rubus/rubus/src/packages/Menu\\\";\\n  import { beforeUpdate, getContext } from \\\"svelte\\\";\\n\\n  export let segment = \\\"\\\";\\n\\n  let rubusDocConfig = getContext(\\\"rubusDocConfig\\\");\\n  let themeList = [\\\"light\\\", \\\"lightest\\\", \\\"dark\\\", \\\"darkest\\\"];\\n  let languageList = [\\n    { name: \\\"中文\\\", code: \\\"zh\\\" },\\n    { name: \\\"English\\\", code: \\\"en\\\" },\\n  ];\\n\\n  let resultLanguageIndex = 0;\\n  let resultThemeIndex = 0;\\n\\n  function switchTheme(t) {\\n    $rubusDocConfig.theme = t;\\n    window.localStorage.setItem(\\\"rubus-local-config-theme\\\", t);\\n  }\\n\\n  function switchLanguage(l) {\\n    $rubusDocConfig.lang = l;\\n    window.localStorage.setItem(\\\"rubus-local-config-lang\\\", l);\\n  }\\n\\n  beforeUpdate(() => {\\n    for (let index = 0; index < themeList.length; index++) {\\n      if (themeList[index] === $rubusDocConfig.theme) {\\n        resultThemeIndex = index;\\n      }\\n    }\\n    for (let index = 0; index < languageList.length; index++) {\\n      if (languageList[index].code === $rubusDocConfig.lang) {\\n        resultLanguageIndex = index;\\n      }\\n    }\\n  });\\n</script>\\n\\n<style>\\n  nav {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    width: 100vw;\\n    background-color: var(--spectrum-global-color-gray-50);\\n    display: flex;\\n    justify-content: center;\\n    z-index: 200;\\n  }\\n  ul {\\n    margin: 0;\\n    padding: 0;\\n  }\\n  li {\\n    list-style-type: none;\\n  }\\n  a,\\n  a:hover,\\n  a:focus,\\n  a:active {\\n    text-decoration: none;\\n    color: inherit;\\n  }\\n  .nav-wrap {\\n    width: 98%;\\n    height: 60px;\\n\\n    display: flex;\\n    justify-content: space-between;\\n  }\\n  .nav-item {\\n    height: 60px;\\n  }\\n  .nav-logo {\\n    display: flex;\\n    align-items: center;\\n  }\\n\\n  img {\\n    height: 40px;\\n  }\\n\\n  .router-wrap {\\n    height: 60px;\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n  }\\n  .route-item {\\n    text-align: center;\\n\\n    width: 120px;\\n    line-height: 60px;\\n    height: 100%;\\n    position: relative;\\n  }\\n  .current-route {\\n    color: var(--spectrum-semantic-cta-color-background-default);\\n  }\\n\\n  span {\\n    position: absolute;\\n    bottom: 0;\\n    background: var(--spectrum-semantic-cta-color-background-default);\\n    left: 45px;\\n    width: 30px;\\n    height: 4.5px;\\n    border-top-left-radius: 4.5px;\\n    border-top-right-radius: 4.5px;\\n  }\\n  .nav-menu-area {\\n    display: flex;\\n    justify-content: space-between;\\n  }\\n  .theme-list {\\n    display: flex;\\n    align-items: center;\\n    height: 60px;\\n  }\\n  .language-list {\\n    display: flex;\\n    width: 140px;\\n    height: 60px;\\n    justify-content: center;\\n    align-items: center;\\n    flex-direction: row;\\n  }\\n</style>\\n\\n<nav>\\n  <ul class=\\\"nav-wrap\\\">\\n    <li class=\\\"nav-item nav-logo\\\">\\n      <a href=\\\"./\\\">\\n        <img\\n          src=\\\"logo-{$rubusDocConfig.theme == 'light' || $rubusDocConfig.theme == 'lightest' ? 'light' : 'dark'}.png\\\"\\n          alt=\\\"logo\\\" />\\n      </a>\\n    </li>\\n    <li class=\\\"nav-item\\\">\\n      <ul class=\\\"router-wrap\\\">\\n        {#each router[$rubusDocConfig.lang] as route, i}\\n          <li\\n            class=\\\"route-item\\\"\\n            class:current-route={route.url.replace('./', '') === segment || (route.url === './' && !segment && i == 0)}>\\n            <a href={route.url}>{route.name}\\n              {#if route.url.replace('./', '') === segment || (route.url === './' && !segment && i == 0)}\\n                <span />\\n              {/if}</a>\\n          </li>\\n        {/each}\\n      </ul>\\n    </li>\\n    <li class=\\\"nav-item nav-menu-area\\\">\\n      <div class=\\\"theme-list\\\">\\n        <Dropdown\\n          placeholder={$rubusDocConfig.theme.replace(/^\\\\S/, (s) => s.toUpperCase())}\\n          isQuiet\\n          minWidth=\\\"80\\\"\\n          resultIndex={resultThemeIndex}>\\n          {#each themeList as item, index}\\n            <MenuItem\\n              thisIndex={index}\\n              label={item.replace(/^\\\\S/, (s) => s.toUpperCase())}\\n              resultIndex={resultThemeIndex}\\n              on:click={() => {\\n                switchTheme(item);\\n              }} />\\n          {/each}\\n        </Dropdown>\\n      </div>\\n      <div class=\\\"language-list\\\">\\n        <Dropdown placeholder=\\\"Language\\\" isQuiet minWidth=\\\"80\\\" resultIndex={resultLanguageIndex}>\\n          {#each languageList as lang, i}\\n            <MenuItem\\n              thisIndex={i}\\n              label={lang.name}\\n              resultIndex={resultLanguageIndex}\\n              isSelected={i === resultLanguageIndex}\\n              on:click={() => {\\n                switchLanguage(lang.code);\\n              }} />\\n          {/each}\\n        </Dropdown>\\n      </div>\\n    </li>\\n  </ul>\\n</nav>\\n\"],\"names\":[],\"mappings\":\"AA4CE,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,+BAA+B,CAAC,CACtD,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,EAAE,eAAC,CAAC,AACF,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC,AACD,EAAE,eAAC,CAAC,AACF,eAAe,CAAE,IAAI,AACvB,CAAC,AACD,gBAAC,CACD,gBAAC,MAAM,CACP,gBAAC,MAAM,CACP,gBAAC,OAAO,AAAC,CAAC,AACR,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CAEZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAChC,CAAC,AACD,SAAS,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,AACd,CAAC,AACD,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,IAAI,AACd,CAAC,AAED,YAAY,eAAC,CAAC,AACZ,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,WAAW,eAAC,CAAC,AACX,UAAU,CAAE,MAAM,CAElB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,CACZ,QAAQ,CAAE,QAAQ,AACpB,CAAC,AACD,cAAc,eAAC,CAAC,AACd,KAAK,CAAE,IAAI,gDAAgD,CAAC,AAC9D,CAAC,AAED,IAAI,eAAC,CAAC,AACJ,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,IAAI,gDAAgD,CAAC,CACjE,IAAI,CAAE,IAAI,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,sBAAsB,CAAE,KAAK,CAC7B,uBAAuB,CAAE,KAAK,AAChC,CAAC,AACD,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,AAChC,CAAC,AACD,WAAW,eAAC,CAAC,AACX,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,IAAI,AACd,CAAC,AACD,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,cAAc,CAAE,GAAG,AACrB,CAAC\"}"
};

const Nav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $rubusDocConfig;
	let { segment = "" } = $$props;
	let rubusDocConfig = getContext("rubusDocConfig");
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);
	let themeList = ["light", "lightest", "dark", "darkest"];
	let languageList = [{ name: "中文", code: "zh" }, { name: "English", code: "en" }];
	let resultLanguageIndex = 0;
	let resultThemeIndex = 0;

	beforeUpdate(() => {
		for (let index = 0; index < themeList.length; index++) {
			if (themeList[index] === $rubusDocConfig.theme) {
				resultThemeIndex = index;
			}
		}

		for (let index = 0; index < languageList.length; index++) {
			if (languageList[index].code === $rubusDocConfig.lang) {
				resultLanguageIndex = index;
			}
		}
	});

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);
	$$result.css.add(css$4);
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);

	return `<nav class="${"svelte-1blytlz"}"><ul class="${"nav-wrap svelte-1blytlz"}"><li class="${"nav-item nav-logo svelte-1blytlz"}"><a href="${"./"}" class="${"svelte-1blytlz"}"><img src="${"logo-" + escape($rubusDocConfig.theme == "light" || $rubusDocConfig.theme == "lightest"
	? "light"
	: "dark") + ".png"}" alt="${"logo"}" class="${"svelte-1blytlz"}"></a></li>
    <li class="${"nav-item svelte-1blytlz"}"><ul class="${"router-wrap svelte-1blytlz"}">${each(router[$rubusDocConfig.lang], (route, i) => `<li class="${[
		"route-item svelte-1blytlz",
		route.url.replace("./", "") === segment || route.url === "./" && !segment && i == 0
		? "current-route"
		: ""
	].join(" ").trim()}"><a${add_attribute("href", route.url, 0)} class="${"svelte-1blytlz"}">${escape(route.name)}
              ${route.url.replace("./", "") === segment || route.url === "./" && !segment && i == 0
	? `<span class="${"svelte-1blytlz"}"></span>
              `
	: ``}</a>
          </li>`)}</ul></li>
    <li class="${"nav-item nav-menu-area svelte-1blytlz"}"><div class="${"theme-list svelte-1blytlz"}">${validate_component(Dropdown, "Dropdown").$$render(
		$$result,
		{
			placeholder: $rubusDocConfig.theme.replace(/^\S/, s => s.toUpperCase()),
			isQuiet: true,
			minWidth: "80",
			resultIndex: resultThemeIndex
		},
		{},
		{
			default: () => `${each(themeList, (item, index) => `${validate_component(MenuItem, "MenuItem").$$render(
				$$result,
				{
					thisIndex: index,
					label: item.replace(/^\S/, s => s.toUpperCase()),
					resultIndex: resultThemeIndex
				},
				{},
				{}
			)}`)}`
		}
	)}</div>
      <div class="${"language-list svelte-1blytlz"}">${validate_component(Dropdown, "Dropdown").$$render(
		$$result,
		{
			placeholder: "Language",
			isQuiet: true,
			minWidth: "80",
			resultIndex: resultLanguageIndex
		},
		{},
		{
			default: () => `${each(languageList, (lang, i) => `${validate_component(MenuItem, "MenuItem").$$render(
				$$result,
				{
					thisIndex: i,
					label: lang.name,
					resultIndex: resultLanguageIndex,
					isSelected: i === resultLanguageIndex
				},
				{},
				{}
			)}`)}`
		}
	)}</div></li></ul></nav>`;
});

/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) { ctx = null; }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();

/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();

/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();

// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle (callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}

// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());

/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});

/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});

// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&
        typeof target.getBBox === 'function'); };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}

/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());

var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());

var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());

// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});

var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();

/* eslint-disable no-undefined,no-param-reassign,no-shadow */

/**
 * Throttle execution of a function. Especially useful for rate limiting
 * execution of handlers on events like resize and scroll.
 *
 * @param  {number}    delay -          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.
 * @param  {boolean}   [noTrailing] -   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the
 *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time
 *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,
 *                                    the internal counter is reset).
 * @param  {Function}  callback -       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,
 *                                    to `callback` when the throttled-function is executed.
 * @param  {boolean}   [debounceMode] - If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),
 *                                    schedule `callback` to execute after `delay` ms.
 *
 * @returns {Function}  A new, throttled, function.
 */
function throttle$1 (delay, noTrailing, callback, debounceMode) {
  /*
   * After wrapper has stopped being called, this timeout ensures that
   * `callback` is executed at the proper times in `throttle` and `end`
   * debounce modes.
   */
  var timeoutID;
  var cancelled = false; // Keep track of the last time `callback` was executed.

  var lastExec = 0; // Function to clear existing timeout

  function clearExistingTimeout() {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
  } // Function to cancel next exec


  function cancel() {
    clearExistingTimeout();
    cancelled = true;
  } // `noTrailing` defaults to falsy.


  if (typeof noTrailing !== 'boolean') {
    debounceMode = callback;
    callback = noTrailing;
    noTrailing = undefined;
  }
  /*
   * The `wrapper` function encapsulates all of the throttling / debouncing
   * functionality and when executed will limit the rate at which `callback`
   * is executed.
   */


  function wrapper() {
    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
      arguments_[_key] = arguments[_key];
    }

    var self = this;
    var elapsed = Date.now() - lastExec;

    if (cancelled) {
      return;
    } // Execute `callback` and update the `lastExec` timestamp.


    function exec() {
      lastExec = Date.now();
      callback.apply(self, arguments_);
    }
    /*
     * If `debounceMode` is true (at begin) this is used to clear the flag
     * to allow future `callback` executions.
     */


    function clear() {
      timeoutID = undefined;
    }

    if (debounceMode && !timeoutID) {
      /*
       * Since `wrapper` is being called for the first time and
       * `debounceMode` is true (at begin), execute `callback`.
       */
      exec();
    }

    clearExistingTimeout();

    if (debounceMode === undefined && elapsed > delay) {
      /*
       * In throttle mode, if `delay` time has been exceeded, execute
       * `callback`.
       */
      exec();
    } else if (noTrailing !== true) {
      /*
       * In trailing throttle mode, since `delay` time has not been
       * exceeded, schedule `callback` to execute `delay` ms after most
       * recent execution.
       *
       * If `debounceMode` is true (at begin), schedule `clear` to execute
       * after `delay` ms.
       *
       * If `debounceMode` is false (at end), schedule `callback` to
       * execute after `delay` ms.
       */
      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);
    }
  }

  wrapper.cancel = cancel; // Return the wrapper function.

  return wrapper;
}

/* node_modules/@rubus/rubus/src/packages/Checkbox/Checkbox.svelte generated by Svelte v3.29.4 */

const css$5 = {
	code: ".readonly.svelte-pnox6z{pointer-events:none}",
	map: "{\"version\":3,\"file\":\"Checkbox.svelte\",\"sources\":[\"Checkbox.svelte\"],\"sourcesContent\":[\"<script>\\n  import { IconCheckmarkSmall, IconDashSmall } from \\\"@rubus/svelte-spectrum-icons-ui\\\";\\n  import ResizeObserver from \\\"resize-observer-polyfill\\\";\\n  import { throttle } from \\\"throttle-debounce\\\";\\n  import { afterUpdate, onDestroy } from \\\"svelte\\\";\\n  import { current_component } from \\\"svelte/internal\\\";\\n  import { getEventsAction } from \\\"../utils/get-events-action.js\\\";\\n\\n  /**\\n   * Specify whether the checkbox is checked\\n   * @type {boolean} [checked=false]\\n   */\\n  export let checked = false;\\n\\n  /**\\n   * Set to `true` to disable the checkbox\\n   * @type {boolean} [disabled=false]\\n   */\\n  export let disabled = false;\\n\\n  /**\\n   * Whether the input should display its \\\"valid\\\" or \\\"invalid\\\" visual styling.\\n   * @type {boolean} [isInvalid=false]\\n   */\\n  export let isInvalid = false;\\n\\n  /**\\n   * This prop sets the quiet style which provides visual weaken.\\n   * @type {boolean} [isQuiet=false]\\n   */\\n  export let isQuiet = false;\\n\\n  /**\\n   * Specify whether the checkbox is indeterminate\\n   * @type {boolean} [indeterminate=false]\\n   */\\n  export let indeterminate = false;\\n\\n  /**\\n   * Set to `true` for the checkbox to be read-only\\n   * @type {boolean} [readonly=false]\\n   */\\n  export let readonly = false;\\n\\n  /**\\n   * Set a name for the input element\\n   * @type {string} [name=\\\"\\\"]\\n   */\\n  export let name = \\\"\\\";\\n\\n  /**\\n   * Set an id for the input element\\n   * @type {string} [id = \\\"checkbox-\\\" + Math.random().toString(24)]\\n   */\\n  export let id = \\\"checkbox-\\\" + Math.random().toString(24);\\n\\n  /**\\n   * Set an id for the input element\\n   * @type {string} [value = \\\"\\\"]\\n   */\\n  export let value = \\\"\\\";\\n\\n  /**\\n   * Set an title for the input labal\\n   * @type {string} [title = \\\"\\\"]\\n   */\\n  export let title = \\\"\\\";\\n\\n  let checkbox;\\n  let iconSize = 10;\\n  let large = false;\\n  const eventsListen = getEventsAction(current_component);\\n  const observer = new ResizeObserver(getIconScale);\\n\\n  afterUpdate(() => {\\n    throttle(500, observer.observe(checkbox));\\n  });\\n\\n  onDestroy(() => {\\n    observer.unobserve(checkbox);\\n  });\\n\\n  function getIconScale() {\\n    iconSize = parseInt(\\n      getComputedStyle(document.documentElement).getPropertyValue(\\\"--spectrum-global-dimension-size-125\\\")\\n    );\\n    if (iconSize == 10) {\\n      large = false;\\n    } else {\\n      large = true;\\n    }\\n  }\\n</script>\\n\\n<style global>\\n  .readonly {\\n    pointer-events: none;\\n  }\\n</style>\\n\\n{#if readonly}\\n  <label\\n    {title}\\n    {...$$restProps}\\n    class=\\\"spectrum-Checkbox readonly {$$restProps.class}\\\"\\n    class:is-disabled={disabled}\\n    class:is-indeterminate={indeterminate}\\n    class:is-invalid={isInvalid}\\n    class:spectrum-Checkbox--quiet={isQuiet}>\\n    <input\\n      type=\\\"checkbox\\\"\\n      class=\\\"spectrum-Checkbox-input\\\"\\n      {id}\\n      {name}\\n      {disabled}\\n      {value}\\n      bind:this={checkbox}\\n      {checked}\\n      {indeterminate} />\\n    <span class=\\\"spectrum-Checkbox-box\\\">\\n      {#if checked}\\n        <IconCheckmarkSmall\\n          width={iconSize - 1}\\n          height={iconSize - 1}\\n          scale={large ? 'L' : 'M'}\\n          className=\\\"spectrum-Checkbox-checkmark\\\"\\n          focusable=\\\"false\\\"\\n          aria-hidden=\\\"true\\\" />\\n      {/if}\\n      {#if indeterminate}\\n        <IconDashSmall\\n          width={iconSize}\\n          height={iconSize}\\n          scale={large ? 'L' : 'M'}\\n          className=\\\"spectrum-Checkbox-partialCheckmark\\\"\\n          focusable=\\\"false\\\"\\n          aria-hidden=\\\"true\\\" />\\n      {/if}\\n    </span>\\n    <span class=\\\"spectrum-Checkbox-label\\\">\\n      <slot>Checkbox</slot>\\n    </span>\\n  </label>\\n{:else}\\n  <label\\n    {...$$restProps}\\n    class=\\\"spectrum-Checkbox {$$restProps.class}\\\"\\n    class:is-disabled={disabled}\\n    class:is-indeterminate={indeterminate}\\n    class:is-invalid={isInvalid}\\n    class:spectrum-Checkbox--quiet={isQuiet}\\n    use:eventsListen>\\n    <input\\n      type=\\\"checkbox\\\"\\n      class=\\\"spectrum-Checkbox-input\\\"\\n      {id}\\n      {name}\\n      {disabled}\\n      {value}\\n      bind:this={checkbox}\\n      bind:checked\\n      bind:indeterminate />\\n    <span class=\\\"spectrum-Checkbox-box\\\">\\n      {#if checked}\\n        <IconCheckmarkSmall\\n          width={iconSize - 1}\\n          height={iconSize - 1}\\n          scale={large ? 'L' : 'M'}\\n          className=\\\"spectrum-Checkbox-checkmark\\\"\\n          focusable=\\\"false\\\"\\n          aria-hidden=\\\"true\\\" />\\n      {/if}\\n      {#if indeterminate}\\n        <IconDashSmall\\n          width={iconSize}\\n          height={iconSize}\\n          scale={large ? 'L' : 'M'}\\n          className=\\\"spectrum-Checkbox-partialCheckmark\\\"\\n          focusable=\\\"false\\\"\\n          aria-hidden=\\\"true\\\" />\\n      {/if}\\n    </span>\\n    <span class=\\\"spectrum-Checkbox-label\\\">\\n      <slot />\\n    </span>\\n  </label>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AA+FE,SAAS,cAAC,CAAC,AACT,cAAc,CAAE,IAAI,AACtB,CAAC\"}"
};

const Checkbox = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $$restProps = compute_rest_props($$props, [
		"checked","disabled","isInvalid","isQuiet","indeterminate","readonly","name","id","value","title"
	]);

	let { checked = false } = $$props;
	let { disabled = false } = $$props;
	let { isInvalid = false } = $$props;
	let { isQuiet = false } = $$props;
	let { indeterminate = false } = $$props;
	let { readonly = false } = $$props;
	let { name = "" } = $$props;
	let { id = "checkbox-" + Math.random().toString(24) } = $$props;
	let { value = "" } = $$props;
	let { title = "" } = $$props;
	let checkbox;
	let iconSize = 10;
	let large = false;
	const observer = new index(getIconScale);

	afterUpdate(() => {
		throttle$1(500, observer.observe(checkbox));
	});

	onDestroy(() => {
		observer.unobserve(checkbox);
	});

	function getIconScale() {
		iconSize = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--spectrum-global-dimension-size-125"));

		if (iconSize == 10) {
			large = false;
		} else {
			large = true;
		}
	}

	if ($$props.checked === void 0 && $$bindings.checked && checked !== void 0) $$bindings.checked(checked);
	if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
	if ($$props.isInvalid === void 0 && $$bindings.isInvalid && isInvalid !== void 0) $$bindings.isInvalid(isInvalid);
	if ($$props.isQuiet === void 0 && $$bindings.isQuiet && isQuiet !== void 0) $$bindings.isQuiet(isQuiet);
	if ($$props.indeterminate === void 0 && $$bindings.indeterminate && indeterminate !== void 0) $$bindings.indeterminate(indeterminate);
	if ($$props.readonly === void 0 && $$bindings.readonly && readonly !== void 0) $$bindings.readonly(readonly);
	if ($$props.name === void 0 && $$bindings.name && name !== void 0) $$bindings.name(name);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	$$result.css.add(css$5);

	return `${readonly
	? `<label${spread(
			[
				{ title: escape(title) },
				$$restProps,
				{
					class: "spectrum-Checkbox readonly " + escape($$restProps.class)
				}
			],
			(disabled ? "is-disabled" : "") + " " + (indeterminate ? "is-indeterminate" : "") + " " + (isInvalid ? "is-invalid" : "") + " " + (isQuiet ? "spectrum-Checkbox--quiet" : "") + " " + "svelte-pnox6z"
		)}><input type="${"checkbox"}" class="${"spectrum-Checkbox-input"}"${add_attribute("id", id, 0)}${add_attribute("name", name, 0)} ${disabled ? "disabled" : ""}${add_attribute("value", value, 0)} ${checked ? "checked" : ""}${add_attribute("indeterminate", indeterminate, 0)}${add_attribute("this", checkbox, 1)}>
    <span class="${"spectrum-Checkbox-box"}">${checked
		? `${validate_component(CheckmarkSmall, "IconCheckmarkSmall").$$render(
				$$result,
				{
					width: iconSize - 1,
					height: iconSize - 1,
					scale: large ? "L" : "M",
					className: "spectrum-Checkbox-checkmark",
					focusable: "false",
					"aria-hidden": "true"
				},
				{},
				{}
			)}`
		: ``}
      ${indeterminate
		? `${validate_component(DashSmall, "IconDashSmall").$$render(
				$$result,
				{
					width: iconSize,
					height: iconSize,
					scale: large ? "L" : "M",
					className: "spectrum-Checkbox-partialCheckmark",
					focusable: "false",
					"aria-hidden": "true"
				},
				{},
				{}
			)}`
		: ``}</span>
    <span class="${"spectrum-Checkbox-label"}">${slots.default ? slots.default({}) : `Checkbox`}</span></label>`
	: `<label${spread(
			[
				$$restProps,
				{
					class: "spectrum-Checkbox " + escape($$restProps.class)
				}
			],
			(disabled ? "is-disabled" : "") + " " + (indeterminate ? "is-indeterminate" : "") + " " + (isInvalid ? "is-invalid" : "") + " " + (isQuiet ? "spectrum-Checkbox--quiet" : "") + " " + "svelte-pnox6z"
		)}><input type="${"checkbox"}" class="${"spectrum-Checkbox-input"}"${add_attribute("id", id, 0)}${add_attribute("name", name, 0)} ${disabled ? "disabled" : ""}${add_attribute("value", value, 0)}${add_attribute("this", checkbox, 1)}${add_attribute("checked", checked, 1)}${add_attribute("indeterminate", indeterminate, 1)}>
    <span class="${"spectrum-Checkbox-box"}">${checked
		? `${validate_component(CheckmarkSmall, "IconCheckmarkSmall").$$render(
				$$result,
				{
					width: iconSize - 1,
					height: iconSize - 1,
					scale: large ? "L" : "M",
					className: "spectrum-Checkbox-checkmark",
					focusable: "false",
					"aria-hidden": "true"
				},
				{},
				{}
			)}`
		: ``}
      ${indeterminate
		? `${validate_component(DashSmall, "IconDashSmall").$$render(
				$$result,
				{
					width: iconSize,
					height: iconSize,
					scale: large ? "L" : "M",
					className: "spectrum-Checkbox-partialCheckmark",
					focusable: "false",
					"aria-hidden": "true"
				},
				{},
				{}
			)}`
		: ``}</span>
    <span class="${"spectrum-Checkbox-label"}">${slots.default ? slots.default({}) : ``}</span></label>`}`;
});

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=}start start and stop notifications for subscriptions
 */
function writable(value, start = noop) {
    let stop;
    const subscribers = [];
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (let i = 0; i < subscribers.length; i += 1) {
                    const s = subscribers[i];
                    s[1]();
                    subscriber_queue.push(s, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop) {
        const subscriber = [run, invalidate];
        subscribers.push(subscriber);
        if (subscribers.length === 1) {
            stop = start(set) || noop;
        }
        run(value);
        return () => {
            const index = subscribers.indexOf(subscriber);
            if (index !== -1) {
                subscribers.splice(index, 1);
            }
            if (subscribers.length === 0) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

//Safari Date function polyfill
!(function (_Date) {
  function standardizeArgs(args) {
    if (args.length === 1 && typeof args[0] === "string" && isNaN(_Date.parse(args[0]))) {
      args[0] = args[0].replace(/-/g, "/");
    }
    return Array.prototype.slice.call(args);
  }

  function $Date() {
    if (this instanceof $Date) {
      return new (Function.prototype.bind.apply(_Date, [null].concat(standardizeArgs(arguments))))();
    }
    return _Date();
  }
  $Date.prototype = _Date.prototype;

  $Date.now = _Date.now;
  $Date.UTC = _Date.UTC;
  $Date.parse = function () {
    return _Date.parse.apply(_Date, standardizeArgs(arguments));
  };

  Date = $Date;
})(Date);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var colorName = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var isArrayish = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};

var simpleSwizzle = createCommonjsModule(function (module) {



var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};
});

var colorString = createCommonjsModule(function (module) {
/* MIT license */



var reverseNames = {};

// create a list of reverse color names
for (var name in colorName) {
	if (colorName.hasOwnProperty(name)) {
		reverseNames[colorName[name]] = name;
	}
}

var cs = module.exports = {
	to: {},
	get: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha, 16) / 255;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorName[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?(?:\d*\.)?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = (parseFloat(match[1]) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = simpleSwizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = simpleSwizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = simpleSwizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = simpleSwizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = simpleSwizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}
});

var colorName$1 = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};

var conversions = createCommonjsModule(function (module) {
/* MIT license */


// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in colorName$1) {
	if (colorName$1.hasOwnProperty(key)) {
		reverseKeywords[colorName$1[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var rdif;
	var gdif;
	var bdif;
	var h;
	var s;

	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var v = Math.max(r, g, b);
	var diff = v - Math.min(r, g, b);
	var diffc = function (c) {
		return (v - c) / 6 / diff + 1 / 2;
	};

	if (diff === 0) {
		h = s = 0;
	} else {
		s = diff / v;
		rdif = diffc(r);
		gdif = diffc(g);
		bdif = diffc(b);

		if (r === v) {
			h = bdif - gdif;
		} else if (g === v) {
			h = (1 / 3) + rdif - bdif;
		} else if (b === v) {
			h = (2 / 3) + gdif - rdif;
		}
		if (h < 0) {
			h += 1;
		} else if (h > 1) {
			h -= 1;
		}
	}

	return [
		h * 360,
		s * 100,
		v * 100
	];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in colorName$1) {
		if (colorName$1.hasOwnProperty(keyword)) {
			var value = colorName$1[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return colorName$1[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};
});

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

function buildGraph() {
	var graph = {};
	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
	var models = Object.keys(conversions);

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

var route = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

var colorConvert = convert;

var _slice = [].slice;

var skippedModels = [
  // to be honest, I don't really feel like keyword belongs in color convert, but eh.
  "keyword",

  // gray conflicts with some method names, and has its own method defined.
  "gray",

  // shouldn't really be in color-convert either...
  "hex",
];

var hashedModelKeys = {};
Object.keys(colorConvert).forEach(function (model) {
  hashedModelKeys[_slice.call(colorConvert[model].labels).sort().join("")] = model;
});

var limiters = {};

function Color(obj, model) {
  if (!(this instanceof Color)) {
    return new Color(obj, model);
  }

  if (model && model in skippedModels) {
    model = null;
  }

  if (model && !(model in colorConvert)) {
    throw new Error("Unknown model: " + model);
  }

  var i;
  var channels;

  if (obj == null) {
    // eslint-disable-line no-eq-null,eqeqeq
    this.model = "rgb";
    this.color = [0, 0, 0];
    this.valpha = 1;
  } else if (obj instanceof Color) {
    this.model = obj.model;
    this.color = obj.color.slice();
    this.valpha = obj.valpha;
  } else if (typeof obj === "string") {
    var result = colorString.get(obj);
    if (result === null) {
      throw new Error("Unable to parse color from string: " + obj);
    }

    this.model = result.model;
    channels = colorConvert[this.model].channels;
    this.color = result.value.slice(0, channels);
    this.valpha = typeof result.value[channels] === "number" ? result.value[channels] : 1;
  } else if (obj.length) {
    this.model = model || "rgb";
    channels = colorConvert[this.model].channels;
    var newArr = _slice.call(obj, 0, channels);
    this.color = zeroArray(newArr, channels);
    this.valpha = typeof obj[channels] === "number" ? obj[channels] : 1;
  } else if (typeof obj === "number") {
    // this is always RGB - can be converted later on.
    obj &= 0xffffff;
    this.model = "rgb";
    this.color = [(obj >> 16) & 0xff, (obj >> 8) & 0xff, obj & 0xff];
    this.valpha = 1;
  } else {
    this.valpha = 1;

    var keys = Object.keys(obj);
    if ("alpha" in obj) {
      keys.splice(keys.indexOf("alpha"), 1);
      this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
    }

    var hashedKeys = keys.sort().join("");
    if (!(hashedKeys in hashedModelKeys)) {
      throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
    }

    this.model = hashedModelKeys[hashedKeys];

    var labels = colorConvert[this.model].labels;
    var color = [];
    for (i = 0; i < labels.length; i++) {
      color.push(obj[labels[i]]);
    }

    this.color = zeroArray(color);
  }

  // perform limitations (clamping, etc.)
  if (limiters[this.model]) {
    channels = colorConvert[this.model].channels;
    for (i = 0; i < channels; i++) {
      var limit = limiters[this.model][i];
      if (limit) {
        this.color[i] = limit(this.color[i]);
      }
    }
  }

  this.valpha = Math.max(0, Math.min(1, this.valpha));

  if (Object.freeze) {
    Object.freeze(this);
  }
}

Color.prototype = {
  toString: function () {
    return this.string();
  },

  toJSON: function () {
    return this[this.model]();
  },

  string: function (places) {
    var self = this.model in colorString.to ? this : this.rgb();
    self = self.round(typeof places === "number" ? places : 1);
    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    return colorString.to[self.model](args);
  },

  percentString: function (places) {
    var self = this.rgb().round(typeof places === "number" ? places : 1);
    var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
    return colorString.to.rgb.percent(args);
  },

  array: function () {
    return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
  },

  object: function () {
    var result = {};
    var channels = colorConvert[this.model].channels;
    var labels = colorConvert[this.model].labels;

    for (var i = 0; i < channels; i++) {
      result[labels[i]] = this.color[i];
    }

    if (this.valpha !== 1) {
      result.alpha = this.valpha;
    }

    return result;
  },

  unitArray: function () {
    var rgb = this.rgb().color;
    rgb[0] /= 255;
    rgb[1] /= 255;
    rgb[2] /= 255;

    if (this.valpha !== 1) {
      rgb.push(this.valpha);
    }

    return rgb;
  },

  unitObject: function () {
    var rgb = this.rgb().object();
    rgb.r /= 255;
    rgb.g /= 255;
    rgb.b /= 255;

    if (this.valpha !== 1) {
      rgb.alpha = this.valpha;
    }

    return rgb;
  },

  round: function (places) {
    places = Math.max(places || 0, 0);
    return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
  },

  alpha: function (val) {
    if (arguments.length) {
      return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
    }

    return this.valpha;
  },

  // rgb
  red: getset("rgb", 0, maxfn(255)),
  green: getset("rgb", 1, maxfn(255)),
  blue: getset("rgb", 2, maxfn(255)),

  hue: getset(["hsl", "hsv", "hsl", "hwb", "hcg"], 0, function (val) {
    return ((val % 360) + 360) % 360;
  }), // eslint-disable-line brace-style

  saturationl: getset("hsl", 1, maxfn(100)),
  lightness: getset("hsl", 2, maxfn(100)),

  saturationv: getset("hsv", 1, maxfn(100)),
  value: getset("hsv", 2, maxfn(100)),

  chroma: getset("hcg", 1, maxfn(100)),
  gray: getset("hcg", 2, maxfn(100)),

  white: getset("hwb", 1, maxfn(100)),
  wblack: getset("hwb", 2, maxfn(100)),

  cyan: getset("cmyk", 0, maxfn(100)),
  magenta: getset("cmyk", 1, maxfn(100)),
  yellow: getset("cmyk", 2, maxfn(100)),
  black: getset("cmyk", 3, maxfn(100)),

  x: getset("xyz", 0, maxfn(100)),
  y: getset("xyz", 1, maxfn(100)),
  z: getset("xyz", 2, maxfn(100)),

  l: getset("lab", 0, maxfn(100)),
  a: getset("lab", 1),
  b: getset("lab", 2),

  keyword: function (val) {
    if (arguments.length) {
      return new Color(val);
    }

    return colorConvert[this.model].keyword(this.color);
  },

  hex: function (val) {
    if (arguments.length) {
      return new Color(val);
    }

    return colorString.to.hex(this.rgb().round().color);
  },

  rgbNumber: function () {
    var rgb = this.rgb().color;
    return ((rgb[0] & 0xff) << 16) | ((rgb[1] & 0xff) << 8) | (rgb[2] & 0xff);
  },

  luminosity: function () {
    // http://www.w3.org/TR/WCAG20/#relativeluminancedef
    var rgb = this.rgb().color;

    var lum = [];
    for (var i = 0; i < rgb.length; i++) {
      var chan = rgb[i] / 255;
      lum[i] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
    }

    return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  },

  contrast: function (color2) {
    // http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    var lum1 = this.luminosity();
    var lum2 = color2.luminosity();

    if (lum1 > lum2) {
      return (lum1 + 0.05) / (lum2 + 0.05);
    }

    return (lum2 + 0.05) / (lum1 + 0.05);
  },

  level: function (color2) {
    var contrastRatio = this.contrast(color2);
    if (contrastRatio >= 7.1) {
      return "AAA";
    }

    return contrastRatio >= 4.5 ? "AA" : "";
  },

  isDark: function () {
    // YIQ equation from http://24ways.org/2010/calculating-color-contrast
    var rgb = this.rgb().color;
    var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    return yiq < 128;
  },

  isLight: function () {
    return !this.isDark();
  },

  negate: function () {
    var rgb = this.rgb();
    for (var i = 0; i < 3; i++) {
      rgb.color[i] = 255 - rgb.color[i];
    }
    return rgb;
  },

  lighten: function (ratio) {
    var hsl = this.hsl();
    hsl.color[2] += hsl.color[2] * ratio;
    return hsl;
  },

  darken: function (ratio) {
    var hsl = this.hsl();
    hsl.color[2] -= hsl.color[2] * ratio;
    return hsl;
  },

  saturate: function (ratio) {
    var hsl = this.hsl();
    hsl.color[1] += hsl.color[1] * ratio;
    return hsl;
  },

  desaturate: function (ratio) {
    var hsl = this.hsl();
    hsl.color[1] -= hsl.color[1] * ratio;
    return hsl;
  },

  whiten: function (ratio) {
    var hwb = this.hwb();
    hwb.color[1] += hwb.color[1] * ratio;
    return hwb;
  },

  blacken: function (ratio) {
    var hwb = this.hwb();
    hwb.color[2] += hwb.color[2] * ratio;
    return hwb;
  },

  grayscale: function () {
    // http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    var rgb = this.rgb().color;
    var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    return Color.rgb(val, val, val);
  },

  fade: function (ratio) {
    return this.alpha(this.valpha - this.valpha * ratio);
  },

  opaquer: function (ratio) {
    return this.alpha(this.valpha + this.valpha * ratio);
  },

  rotate: function (degrees) {
    var hsl = this.hsl();
    var hue = hsl.color[0];
    hue = (hue + degrees) % 360;
    hue = hue < 0 ? 360 + hue : hue;
    hsl.color[0] = hue;
    return hsl;
  },

  mix: function (mixinColor, weight) {
    // ported from sass implementation in C
    // https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    if (!mixinColor || !mixinColor.rgb) {
      throw new Error('Argument to "mix" was not a Color instance, but rather an instance of ' + typeof mixinColor);
    }
    var color1 = mixinColor.rgb();
    var color2 = this.rgb();
    var p = weight === undefined ? 0.5 : weight;

    var w = 2 * p - 1;
    var a = color1.alpha() - color2.alpha();

    var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    var w2 = 1 - w1;

    return Color.rgb(
      w1 * color1.red() + w2 * color2.red(),
      w1 * color1.green() + w2 * color2.green(),
      w1 * color1.blue() + w2 * color2.blue(),
      color1.alpha() * p + color2.alpha() * (1 - p)
    );
  },
};

// model conversion methods and static constructors
Object.keys(colorConvert).forEach(function (model) {
  if (skippedModels.indexOf(model) !== -1) {
    return;
  }

  var channels = colorConvert[model].channels;

  // conversion methods
  Color.prototype[model] = function () {
    if (this.model === model) {
      return new Color(this);
    }

    if (arguments.length) {
      return new Color(arguments, model);
    }

    var newAlpha = typeof arguments[channels] === "number" ? channels : this.valpha;
    return new Color(assertArray(colorConvert[this.model][model].raw(this.color)).concat(newAlpha), model);
  };

  // 'static' construction methods
  Color[model] = function (color) {
    if (typeof color === "number") {
      color = zeroArray(_slice.call(arguments), channels);
    }
    return new Color(color, model);
  };
});

function roundTo(num, places) {
  return Number(num.toFixed(places));
}

function roundToPlace(places) {
  return function (num) {
    return roundTo(num, places);
  };
}

function getset(model, channel, modifier) {
  model = Array.isArray(model) ? model : [model];

  model.forEach(function (m) {
    (limiters[m] || (limiters[m] = []))[channel] = modifier;
  });

  model = model[0];

  return function (val) {
    var result;

    if (arguments.length) {
      if (modifier) {
        val = modifier(val);
      }

      result = this[model]();
      result.color[channel] = val;
      return result;
    }

    result = this[model]().color[channel];
    if (modifier) {
      result = modifier(result);
    }

    return result;
  };
}

function maxfn(max) {
  return function (v) {
    return Math.max(0, Math.min(max, v));
  };
}

function assertArray(val) {
  return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
  for (var i = 0; i < length; i++) {
    if (typeof arr[i] !== "number") {
      arr[i] = 0;
    }
  }

  return arr;
}

/* node_modules/@rubus/rubus/src/packages/Cornerstone/Cornerstone.svelte generated by Svelte v3.29.4 */

function resetCssVariables(array) {
	if (!array) {
		return;
	}

	let cssVariablesName;

	for (let index = 0; index < array.length; index++) {
		cssVariablesName = Object.getOwnPropertyNames(array[index]);
		document.documentElement.style.setProperty(cssVariablesName, array[index][cssVariablesName]);
	}
}

function resetCssContent(contentText) {
	if (!contentText) {
		return;
	}

	var sheet = document.createElement("style");
	sheet.innerHTML = contentText;
	document.head.appendChild(sheet);
}

const Cornerstone = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { spectrumScale = "medium" } = $$props;
	let { spectrumTheme = "dark" } = $$props;
	let { resetCss = [] } = $$props;
	let { resetCssText = "" } = $$props;
	let { themeColor = undefined } = $$props;
	let { language = "en" } = $$props;
	let { languageReadingOrder = "ltr" } = $$props;
	let themeBgColor = "#cccccc";

	onMount(() => {
		setDocumentElementProperty();
		resetCssContent(resetCssText);
	});

	afterUpdate(() => {
		Promise.resolve().then(function () { return require('./index-6f28b90a.js'); });
	});

	beforeUpdate(() => {
		setDocumentElementProperty();
		resetCssVariables(resetCss);
		getThemeBgColor();
	});

	function setDocumentElementProperty() {
		document.documentElement.className = `spectrum spectrum--${spectrumScale} spectrum--${spectrumTheme}`;
		document.documentElement.lang = language;
		document.documentElement.dir = languageReadingOrder;
	}

	function getThemeBgColor() {
		themeBgColor = getComputedStyle(document.documentElement).getPropertyValue("--spectrum-alias-background-color-default");
	}

	if ($$props.spectrumScale === void 0 && $$bindings.spectrumScale && spectrumScale !== void 0) $$bindings.spectrumScale(spectrumScale);
	if ($$props.spectrumTheme === void 0 && $$bindings.spectrumTheme && spectrumTheme !== void 0) $$bindings.spectrumTheme(spectrumTheme);
	if ($$props.resetCss === void 0 && $$bindings.resetCss && resetCss !== void 0) $$bindings.resetCss(resetCss);
	if ($$props.resetCssText === void 0 && $$bindings.resetCssText && resetCssText !== void 0) $$bindings.resetCssText(resetCssText);
	if ($$props.themeColor === void 0 && $$bindings.themeColor && themeColor !== void 0) $$bindings.themeColor(themeColor);
	if ($$props.language === void 0 && $$bindings.language && language !== void 0) $$bindings.language(language);
	if ($$props.languageReadingOrder === void 0 && $$bindings.languageReadingOrder && languageReadingOrder !== void 0) $$bindings.languageReadingOrder(languageReadingOrder);

	return `${($$result.head += `<meta name="${"theme-color"}"${add_attribute("content", themeColor || themeBgColor, 0)} data-svelte="svelte-1l4uhp4">`, "")}
${slots.default ? slots.default({}) : ``}`;
});

/* node_modules/@rubus/rubus/src/packages/Radio/Radio.svelte generated by Svelte v3.29.4 */

const css$6 = {
	code: ".spectrum-Radio.is-readonly.svelte-1g2r9tn{pointer-events:none}",
	map: "{\"version\":3,\"file\":\"Radio.svelte\",\"sources\":[\"Radio.svelte\"],\"sourcesContent\":[\"<script>\\n  /**\\n   * The element's unique identifier.\\n   * @type { string }[id = `radio-${Math.round(Math.random() * (99999 - 0)) + 0}`]\\n   */\\n  export let id = `radio-${Math.round(Math.random() * (99999 - 0)) + 0}`;\\n\\n  /**\\n   * Set to `true` to checked the radio\\n   * @type {boolean}[checked=false]\\n   */\\n  export let checked = false;\\n\\n  /**\\n   * Set to `true` to invalid the radio\\n   * @type {boolean}[checked=false]\\n   */\\n  export let isInvalid = false;\\n\\n  /**\\n   * Set to `true` to disable the radio\\n   * @type {boolean}[disabled=false]\\n   */\\n  export let disabled = false;\\n\\n  /**\\n   * Specify the quiet mode of radio\\n   * @type { boolean } [isQuiet= false]\\n   */\\n  export let isQuiet = false;\\n\\n  /**\\n   * The name of the radio button, used when submitting an HTML form.\\n   * @type { string }[ name = \\\"radio\\\" ]\\n   */\\n  export let name = \\\"radio\\\";\\n\\n  /**\\n   * The value of the radio button, used when submitting an HTML form.\\n   * @type { string }[value = \\\"\\\"]\\n   */\\n  export let value = \\\"\\\";\\n\\n  /**\\n   * Specify the readonly mode of radio\\n   * @type {boolean}[readonly=false]\\n   */\\n  export let readonly = false;\\n</script>\\n\\n<style global>\\n  .spectrum-Radio.is-readonly {\\n    pointer-events: none;\\n  }\\n</style>\\n\\n<div\\n  class=\\\"spectrum-Radio\\\"\\n  class:spectrum-Radio--quiet={isQuiet}\\n  class:is-invalid={isInvalid}\\n  class:is-readonly={readonly}>\\n  <input type=\\\"radio\\\" {name} class=\\\"spectrum-Radio-input\\\" {id} {checked} {disabled} {value} {readonly} />\\n  <span class=\\\"spectrum-Radio-button\\\" />\\n  <label class=\\\"spectrum-Radio-label\\\" for={id}><slot>{value}</slot></label>\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAmDE,eAAe,YAAY,eAAC,CAAC,AAC3B,cAAc,CAAE,IAAI,AACtB,CAAC\"}"
};

const Radio = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { id = `radio-${Math.round(Math.random() * (99999 - 0)) + 0}` } = $$props;
	let { checked = false } = $$props;
	let { isInvalid = false } = $$props;
	let { disabled = false } = $$props;
	let { isQuiet = false } = $$props;
	let { name = "radio" } = $$props;
	let { value = "" } = $$props;
	let { readonly = false } = $$props;
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);
	if ($$props.checked === void 0 && $$bindings.checked && checked !== void 0) $$bindings.checked(checked);
	if ($$props.isInvalid === void 0 && $$bindings.isInvalid && isInvalid !== void 0) $$bindings.isInvalid(isInvalid);
	if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
	if ($$props.isQuiet === void 0 && $$bindings.isQuiet && isQuiet !== void 0) $$bindings.isQuiet(isQuiet);
	if ($$props.name === void 0 && $$bindings.name && name !== void 0) $$bindings.name(name);
	if ($$props.value === void 0 && $$bindings.value && value !== void 0) $$bindings.value(value);
	if ($$props.readonly === void 0 && $$bindings.readonly && readonly !== void 0) $$bindings.readonly(readonly);
	$$result.css.add(css$6);

	return `<div class="${[
		"spectrum-Radio svelte-1g2r9tn",
		(isQuiet ? "spectrum-Radio--quiet" : "") + " " + (isInvalid ? "is-invalid" : "") + " " + (readonly ? "is-readonly" : "")
	].join(" ").trim()}"><input type="${"radio"}"${add_attribute("name", name, 0)} class="${"spectrum-Radio-input"}"${add_attribute("id", id, 0)} ${checked ? "checked" : ""} ${disabled ? "disabled" : ""}${add_attribute("value", value, 0)} ${readonly ? "readonly" : ""}>
  <span class="${"spectrum-Radio-button"}"></span>
  <label class="${"spectrum-Radio-label"}"${add_attribute("for", id, 0)}>${slots.default ? slots.default({}) : `${escape(value)}`}</label></div>`;
});

/* node_modules/@rubus/rubus/src/packages/SideNav/SideNav.svelte generated by Svelte v3.29.4 */

const SideNav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return `<nav>${slots.default ? slots.default({}) : ``}</nav>`;
});

/* node_modules/@rubus/rubus/src/packages/SideNav/SideNavItem.svelte generated by Svelte v3.29.4 */

const SideNavItem = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { label = "" } = $$props;
	let { isSelected = false } = $$props;
	let { disabled = false } = $$props;
	let { href = "#" } = $$props;
	let sideNavItemEl;

	afterUpdate(() => {
	});

	if ($$props.label === void 0 && $$bindings.label && label !== void 0) $$bindings.label(label);
	if ($$props.isSelected === void 0 && $$bindings.isSelected && isSelected !== void 0) $$bindings.isSelected(isSelected);
	if ($$props.disabled === void 0 && $$bindings.disabled && disabled !== void 0) $$bindings.disabled(disabled);
	if ($$props.href === void 0 && $$bindings.href && href !== void 0) $$bindings.href(href);

	return `<li class="${[
		"spectrum-SideNav-item",
		(isSelected ? "is-selected" : "") + " " + (disabled ? "is-disabled" : "")
	].join(" ").trim()}"${add_attribute("this", sideNavItemEl, 1)}><a${add_attribute("href", href, 0)} class="${"spectrum-SideNav-itemLink"}"${add_attribute("aria-current", isSelected && "page", 0)}>${slots.default ? slots.default({}) : `${escape(label)}`}</a>
  ${slots["sidenav-child"] ? slots["sidenav-child"]({}) : ``}</li>`;
});

/* node_modules/@rubus/rubus/src/packages/SideNav/SideNavGroup.svelte generated by Svelte v3.29.4 */

const SideNavGroup = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { multiLevel = false } = $$props;
	let { title = "" } = $$props;
	let { id = `nav-heading-${Math.round(Math.random() * (99999 - 0)) + 0}` } = $$props;
	if ($$props.multiLevel === void 0 && $$bindings.multiLevel && multiLevel !== void 0) $$bindings.multiLevel(multiLevel);
	if ($$props.title === void 0 && $$bindings.title && title !== void 0) $$bindings.title(title);
	if ($$props.id === void 0 && $$bindings.id && id !== void 0) $$bindings.id(id);

	return `${title
	? `<h2 class="${"spectrum-SideNav-heading"}"${add_attribute("id", id, 0)}>${escape(title)}</h2>`
	: ``}

<ul class="${["spectrum-SideNav", multiLevel ? "spectrum-SideNav--multiLevel" : ""].join(" ").trim()}"${add_attribute("aria-labelledby", title && id, 0)}>${slots.default ? slots.default({}) : ``}</ul>`;
});

/* node_modules/@rubus/rubus/src/packages/Tooltip/Tooltip.svelte generated by Svelte v3.29.4 */

const css$7 = {
	code: ".u-tooltip-showOnEvent.svelte-sjn5pe.svelte-sjn5pe{display:inline-block;position:relative}.u-tooltip-showOnEvent.svelte-sjn5pe .spectrum-Tooltip-label.svelte-sjn5pe{max-width:none}.u-tooltip-showOnEvent.svelte-sjn5pe .spectrum-Tooltip--right .spectrum-Tooltip-tip.svelte-sjn5pe,.u-tooltip-showOnEvent.svelte-sjn5pe .spectrum-Tooltip--left .spectrum-Tooltip-tip.svelte-sjn5pe{top:50%}.u-tooltip-showOnEvent.svelte-sjn5pe .spectrum-Tooltip--bottom .spectrum-Tooltip-tip.svelte-sjn5pe,.u-tooltip-showOnEvent.svelte-sjn5pe .spectrum-Tooltip--top .spectrum-Tooltip-tip.svelte-sjn5pe{left:50%}.spectrum-Tooltip-typeIcon.svelte-sjn5pe.svelte-sjn5pe{width:var(--spectrum-global-dimension-size-225);height:var(--spectrum-global-dimension-size-225);transform:scale(0.8)}.spectrum-Tooltip-label.svelte-sjn5pe.svelte-sjn5pe{white-space:normal}",
	map: "{\"version\":3,\"file\":\"Tooltip.svelte\",\"sources\":[\"Tooltip.svelte\"],\"sourcesContent\":[\"<script>\\n  import { IconInfoMedium, IconAlertMedium, IconSuccessMedium, IconHelpSmall } from \\\"@rubus/svelte-spectrum-icons-ui\\\";\\n  import { afterUpdate, onMount } from \\\"svelte\\\";\\n\\n  /**\\n   *  Specify the label text for the tooltip\\n   * @type {string} [label = \\\"\\\"]\\n   */\\n  export let label = \\\"\\\";\\n\\n  /**\\n   * Specify the variants  for the  tooltip\\n   * @type {\\\"default\\\" | \\\"info\\\" | \\\"negative\\\" | \\\"positive\\\" | \\\"help\\\" } [variants = \\\"default\\\"]\\n   */\\n  export let variants = \\\"default\\\";\\n\\n  /**\\n   *  Specify the open status for the tooltip\\n   * @type {string} [label = \\\"\\\"]\\n   */\\n  export let isOpen = false;\\n\\n  /**\\n   * Specify the directions  for the  tooltip\\n   * @type {\\\"top\\\" | \\\"bottom\\\" | \\\"left\\\" | \\\"right\\\" } [directions = \\\"top\\\"]\\n   */\\n  export let directions = \\\"top\\\";\\n\\n  /**\\n   *  Set the trigger event name to open the tooltip\\n   * @type {\\\"mouseover\\\" | \\\"mouseenter\\\" | \\\"click\\\" | \\\"contextmenu\\\" | \\\"dblclick\\\" | \\\"mousedown\\\" | \\\"mouseup\\\" | \\\"select\\\" | \\\"keydown\\\" | \\\"keypress\\\" | \\\"keyup\\\"} [induceStartEventName = \\\"mouseover\\\"]\\n   */\\n  export let induceStartEventName = \\\"mouseover\\\";\\n\\n  /**\\n   * Set the trigger event name to close the tooltip\\n   * @type {\\\"mouseout\\\" | \\\"mouseleave\\\" | \\\"click\\\" | \\\"contextmenu\\\" | \\\"dblclick\\\" | \\\"mousedown\\\" | \\\"mouseup\\\" | \\\"select\\\" | \\\"keydown\\\" | \\\"keypress\\\" | \\\"keyup\\\"} [induceEndEventName = \\\"mouseout\\\"]\\n   */\\n  export let induceEndEventName = \\\"mouseout\\\";\\n\\n  /**\\n   * The element css width\\n   * @type {DimensionValue} [width = \\\"size-2000\\\"]\\n   */\\n  export let width = \\\"size-2000\\\";\\n\\n  let tooltipEl;\\n  let styleText = \\\"\\\";\\n  let tooltipCH;\\n\\n  onMount(() => {\\n    if (tooltipEl) {\\n      tooltipEl.parentNode.classList.toggle(\\\"u-tooltip-showOnEvent\\\");\\n\\n      tooltipEl.parentNode.addEventListener(induceStartEventName, function () {\\n        isOpen = !isOpen;\\n      });\\n      if (induceStartEventName !== induceEndEventName) {\\n        tooltipEl.parentNode.addEventListener(induceEndEventName, function () {\\n          if (isOpen) isOpen = false;\\n        });\\n      }\\n    }\\n  });\\n\\n  afterUpdate(() => {\\n    let tooltipWrapHeight = tooltipEl.parentNode.clientHeight;\\n    let tooltipWrapWidth = tooltipEl.parentNode.clientWidth;\\n    let widthCss =\\n      width && width.toString().indexOf(\\\"size\\\") !== -1\\n        ? `width:var(--spectrum-global-dimension-${width});`\\n        : width.toString().indexOf(\\\"%\\\") !== -1\\n        ? `width: ${width};`\\n        : `width: ${width}px;`;\\n\\n    switch (directions) {\\n      case \\\"top\\\":\\n        styleText = `top:-${tooltipCH + tooltipWrapHeight * 0.5}px;${widthCss}`;\\n        break;\\n      case \\\"bottom\\\":\\n        styleText = `top:calc(var(--spectrum-global-dimension-size-75) + ${tooltipWrapHeight}px);${widthCss}`;\\n        break;\\n      case \\\"left\\\":\\n        styleText = `left:calc(-1 * var(--spectrum-global-dimension-size-75));${widthCss}`;\\n        break;\\n      case \\\"right\\\":\\n        styleText = `left:calc(var(--spectrum-global-dimension-size-75) + ${tooltipWrapWidth}px);${widthCss}`;\\n        break;\\n    }\\n  });\\n</script>\\n\\n<style global>\\n  .u-tooltip-showOnEvent {\\n    display: inline-block;\\n    position: relative;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip {\\n    position: absolute;\\n    white-space: nowrap;\\n    visibility: visible !important;\\n    transition: transform var(--spectrum-global-animation-duration-100, 130ms) ease-in-out;\\n    top: -100%;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip-label {\\n    max-width: none;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--right,\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--left {\\n    top: 50%;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--right .spectrum-Tooltip-tip,\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--left .spectrum-Tooltip-tip {\\n    top: 50%;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--right {\\n    left: 100%;\\n    transform: translate(0, -50%);\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--left {\\n    transform: translate(-100%, -50%);\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--bottom,\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--top {\\n    left: 50%;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--bottom .spectrum-Tooltip-tip,\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--top .spectrum-Tooltip-tip {\\n    left: 50%;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--bottom {\\n    top: 100%;\\n    transform: translate(-50%, calc(-1 * var(--spectrum-tooltip-tip-margin, var(--spectrum-global-dimension-size-50))));\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip--top {\\n    transform: translate(-50%, var(--spectrum-tooltip-tip-margin, var(--spectrum-global-dimension-size-50)));\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip.is-open,\\n  .u-tooltip-showOnEvent:focus .spectrum-Tooltip,\\n  .u-tooltip-showOnEvent.is-focused .spectrum-Tooltip,\\n  .u-tooltip-showOnEvent *:focus .spectrum-Tooltip {\\n    opacity: 1;\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip.is-open.spectrum-Tooltip--bottom,\\n  .u-tooltip-showOnEvent:focus .spectrum-Tooltip.spectrum-Tooltip--bottom,\\n  .u-tooltip-showOnEvent.is-focused .spectrum-Tooltip.spectrum-Tooltip--bottom,\\n  .u-tooltip-showOnEvent *:focus .spectrum-Tooltip.spectrum-Tooltip--bottom {\\n    transform: translate(-50%, 0);\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip.is-open.spectrum-Tooltip--top,\\n  .u-tooltip-showOnEvent:focus .spectrum-Tooltip.spectrum-Tooltip--top,\\n  .u-tooltip-showOnEvent.is-focused .spectrum-Tooltip.spectrum-Tooltip--top,\\n  .u-tooltip-showOnEvent *:focus .spectrum-Tooltip.spectrum-Tooltip--top {\\n    transform: translate(-50%, calc(-1 * var(--spectrum-tooltip-tip-margin, var(--spectrum-global-dimension-size-50))));\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip.is-open.spectrum-Tooltip--left,\\n  .u-tooltip-showOnEvent:focus .spectrum-Tooltip.spectrum-Tooltip--left,\\n  .u-tooltip-showOnEvent.is-focused .spectrum-Tooltip.spectrum-Tooltip--left,\\n  .u-tooltip-showOnEvent *:focus .spectrum-Tooltip.spectrum-Tooltip--left {\\n    transform: translate(\\n      calc(-100% - var(--spectrum-tooltip-tip-margin, var(--spectrum-global-dimension-size-50))),\\n      -50%\\n    );\\n  }\\n\\n  .u-tooltip-showOnEvent .spectrum-Tooltip.is-open.spectrum-Tooltip--right,\\n  .u-tooltip-showOnEvent:focus .spectrum-Tooltip.spectrum-Tooltip--right,\\n  .u-tooltip-showOnEvent.is-focused .spectrum-Tooltip.spectrum-Tooltip--right,\\n  .u-tooltip-showOnEvent *:focus .spectrum-Tooltip.spectrum-Tooltip--right {\\n    transform: translate(var(--spectrum-tooltip-tip-margin, var(--spectrum-global-dimension-size-50)), -50%);\\n  }\\n\\n  .spectrum-Tooltip-typeIcon {\\n    width: var(--spectrum-global-dimension-size-225);\\n    height: var(--spectrum-global-dimension-size-225);\\n    transform: scale(0.8);\\n  }\\n  .spectrum-Tooltip--help > .spectrum-Tooltip-typeIcon-help {\\n    transform: scale(1);\\n  }\\n  .spectrum-Tooltip-label {\\n    white-space: normal;\\n  }\\n</style>\\n\\n<span\\n  class=\\\"spectrum-Tooltip spectrum-Tooltip--{variants} spectrum-Tooltip--{directions} \\\"\\n  style={styleText}\\n  class:is-open={isOpen}\\n  bind:clientHeight={tooltipCH}\\n  bind:this={tooltipEl}>\\n  {#if variants === 'negative'}\\n    <IconAlertMedium className=\\\"spectrum-Tooltip-typeIcon\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\" />\\n  {:else if variants === 'info'}\\n    <IconInfoMedium className=\\\"spectrum-Tooltip-typeIcon\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\" />\\n  {:else if variants === 'positive'}\\n    <IconSuccessMedium className=\\\"spectrum-Tooltip-typeIcon\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\" />\\n  {:else if variants === 'help'}\\n    <IconHelpSmall\\n      className=\\\"spectrum-Tooltip-typeIcon spectrum-Tooltip-typeIcon-help\\\"\\n      focusable=\\\"false\\\"\\n      aria-hidden=\\\"true\\\" />\\n  {/if}\\n  <span class=\\\"spectrum-Tooltip-label\\\"><slot>{label}</slot></span>\\n  <span class=\\\"spectrum-Tooltip-tip\\\" />\\n</span>\\n\"],\"names\":[],\"mappings\":\"AA6FE,sBAAsB,4BAAC,CAAC,AACtB,OAAO,CAAE,YAAY,CACrB,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAUD,oCAAsB,CAAC,uBAAuB,cAAC,CAAC,AAC9C,SAAS,CAAE,IAAI,AACjB,CAAC,AAOD,oCAAsB,CAAC,wBAAwB,CAAC,mCAAqB,CACrE,oCAAsB,CAAC,uBAAuB,CAAC,qBAAqB,cAAC,CAAC,AACpE,GAAG,CAAE,GAAG,AACV,CAAC,AAgBD,oCAAsB,CAAC,yBAAyB,CAAC,mCAAqB,CACtE,oCAAsB,CAAC,sBAAsB,CAAC,qBAAqB,cAAC,CAAC,AACnE,IAAI,CAAE,GAAG,AACX,CAAC,AAiDD,0BAA0B,4BAAC,CAAC,AAC1B,KAAK,CAAE,IAAI,oCAAoC,CAAC,CAChD,MAAM,CAAE,IAAI,oCAAoC,CAAC,CACjD,SAAS,CAAE,MAAM,GAAG,CAAC,AACvB,CAAC,AAID,uBAAuB,4BAAC,CAAC,AACvB,WAAW,CAAE,MAAM,AACrB,CAAC\"}"
};

const Tooltip = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { label = "" } = $$props;
	let { variants = "default" } = $$props;
	let { isOpen = false } = $$props;
	let { directions = "top" } = $$props;
	let { induceStartEventName = "mouseover" } = $$props;
	let { induceEndEventName = "mouseout" } = $$props;
	let { width = "size-2000" } = $$props;
	let tooltipEl;
	let styleText = "";
	let tooltipCH;

	onMount(() => {
	});

	afterUpdate(() => {
		let tooltipWrapHeight = tooltipEl.parentNode.clientHeight;
		let tooltipWrapWidth = tooltipEl.parentNode.clientWidth;

		let widthCss = width && width.toString().indexOf("size") !== -1
		? `width:var(--spectrum-global-dimension-${width});`
		: width.toString().indexOf("%") !== -1
			? `width: ${width};`
			: `width: ${width}px;`;

		switch (directions) {
			case "top":
				styleText = `top:-${tooltipCH + tooltipWrapHeight * 0.5}px;${widthCss}`;
				break;
			case "bottom":
				styleText = `top:calc(var(--spectrum-global-dimension-size-75) + ${tooltipWrapHeight}px);${widthCss}`;
				break;
			case "left":
				styleText = `left:calc(-1 * var(--spectrum-global-dimension-size-75));${widthCss}`;
				break;
			case "right":
				styleText = `left:calc(var(--spectrum-global-dimension-size-75) + ${tooltipWrapWidth}px);${widthCss}`;
				break;
		}
	});

	if ($$props.label === void 0 && $$bindings.label && label !== void 0) $$bindings.label(label);
	if ($$props.variants === void 0 && $$bindings.variants && variants !== void 0) $$bindings.variants(variants);
	if ($$props.isOpen === void 0 && $$bindings.isOpen && isOpen !== void 0) $$bindings.isOpen(isOpen);
	if ($$props.directions === void 0 && $$bindings.directions && directions !== void 0) $$bindings.directions(directions);
	if ($$props.induceStartEventName === void 0 && $$bindings.induceStartEventName && induceStartEventName !== void 0) $$bindings.induceStartEventName(induceStartEventName);
	if ($$props.induceEndEventName === void 0 && $$bindings.induceEndEventName && induceEndEventName !== void 0) $$bindings.induceEndEventName(induceEndEventName);
	if ($$props.width === void 0 && $$bindings.width && width !== void 0) $$bindings.width(width);
	$$result.css.add(css$7);

	return `<span class="${[
		"spectrum-Tooltip spectrum-Tooltip--" + escape(variants) + " spectrum-Tooltip--" + escape(directions) + " " + " svelte-sjn5pe",
		isOpen ? "is-open" : ""
	].join(" ").trim()}"${add_attribute("style", styleText, 0)}${add_attribute("this", tooltipEl, 1)}>${variants === "negative"
	? `${validate_component(AlertMedium, "IconAlertMedium").$$render(
			$$result,
			{
				className: "spectrum-Tooltip-typeIcon",
				focusable: "false",
				"aria-hidden": "true"
			},
			{},
			{}
		)}`
	: `${variants === "info"
		? `${validate_component(InfoMedium, "IconInfoMedium").$$render(
				$$result,
				{
					className: "spectrum-Tooltip-typeIcon",
					focusable: "false",
					"aria-hidden": "true"
				},
				{},
				{}
			)}`
		: `${variants === "positive"
			? `${validate_component(SuccessMedium, "IconSuccessMedium").$$render(
					$$result,
					{
						className: "spectrum-Tooltip-typeIcon",
						focusable: "false",
						"aria-hidden": "true"
					},
					{},
					{}
				)}`
			: `${variants === "help"
				? `${validate_component(HelpSmall, "IconHelpSmall").$$render(
						$$result,
						{
							className: "spectrum-Tooltip-typeIcon spectrum-Tooltip-typeIcon-help",
							focusable: "false",
							"aria-hidden": "true"
						},
						{},
						{}
					)}`
				: ``}`}`}`}
  <span class="${"spectrum-Tooltip-label svelte-sjn5pe"}">${slots.default ? slots.default({}) : `${escape(label)}`}</span>
  <span class="${"spectrum-Tooltip-tip svelte-sjn5pe"}"></span></span>`;
});

/* node_modules/@rubus/rubus/src/packages/Typography/TypographyBody.svelte generated by Svelte v3.29.4 */

const TypographyBody = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { scale = "M" } = $$props;
	let { isSerif = false } = $$props;
	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.isSerif === void 0 && $$bindings.isSerif && isSerif !== void 0) $$bindings.isSerif(isSerif);

	return `<p class="${[
		"spectrum-Body spectrum-Body--" + escape(scale),
		isSerif ? "spectrum-Body--serif" : ""
	].join(" ").trim()}">${slots.default ? slots.default({}) : ``}</p>`;
});

/* node_modules/@rubus/rubus/src/packages/Typography/TypographyHeading.svelte generated by Svelte v3.29.4 */

const TypographyHeading = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { scale = "M" } = $$props;
	let { isSerif = false } = $$props;
	let { thickness = "default" } = $$props;
	if ($$props.scale === void 0 && $$bindings.scale && scale !== void 0) $$bindings.scale(scale);
	if ($$props.isSerif === void 0 && $$bindings.isSerif && isSerif !== void 0) $$bindings.isSerif(isSerif);
	if ($$props.thickness === void 0 && $$bindings.thickness && thickness !== void 0) $$bindings.thickness(thickness);

	return `<h1 class="${[
		"spectrum-Heading spectrum-Heading--" + escape(scale) + "  spectrum-Heading--" + escape(thickness),
		isSerif ? "spectrum-Heading--serif" : ""
	].join(" ").trim()}">${slots.default ? slots.default({}) : ``}</h1>`;
});

const CONTEXT_KEY = {};

/* src/routes/_layout.svelte generated by Svelte v3.29.4 */

const css$8 = {
	code: "main.svelte-12c7nxz{margin-top:100px;max-width:1200px;margin-left:auto;margin-right:auto;display:flex;justify-content:flex-start}",
	map: "{\"version\":3,\"file\":\"_layout.svelte\",\"sources\":[\"_layout.svelte\"],\"sourcesContent\":[\"<script>\\n  import { Cornerstone } from \\\"@rubus/rubus/src\\\";\\n  import { setContext, getContext, onMount } from \\\"svelte\\\";\\n  import { writable } from \\\"svelte/store\\\";\\n  import { Nav } from \\\"../components\\\";\\n  export let segment;\\n\\n  const rubusDocConfig = writable({\\n    name: \\\"Rubus\\\",\\n    lang: \\\"zh\\\",\\n    theme: \\\"light\\\",\\n  });\\n  setContext(\\\"rubusDocConfig\\\", rubusDocConfig);\\n  let _rubusDocConfig = getContext(\\\"rubusDocConfig\\\");\\n\\n  onMount(() => {\\n    if (window.localStorage.getItem(\\\"rubus-local-config-theme\\\")) {\\n      $_rubusDocConfig.theme = window.localStorage.getItem(\\\"rubus-local-config-theme\\\");\\n    } else {\\n      window.localStorage.setItem(\\\"rubus-local-config-theme\\\", $_rubusDocConfig.theme);\\n    }\\n    if (window.localStorage.getItem(\\\"rubus-local-config-lang\\\")) {\\n      $_rubusDocConfig.lang = window.localStorage.getItem(\\\"rubus-local-config-lang\\\");\\n    } else {\\n      window.localStorage.setItem(\\\"rubus-local-config-lang\\\", $_rubusDocConfig.lang);\\n    }\\n  });\\n</script>\\n\\n<style>\\n  main {\\n    margin-top: 100px;\\n    max-width: 1200px;\\n    margin-left: auto;\\n    margin-right: auto;\\n    display: flex;\\n    justify-content: flex-start;\\n  }\\n</style>\\n\\n<Cornerstone spectrumTheme={$_rubusDocConfig.theme}>\\n  <Nav {segment} />\\n  <main>\\n    <slot />\\n  </main>\\n</Cornerstone>\\n\"],\"names\":[],\"mappings\":\"AA8BE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,UAAU,AAC7B,CAAC\"}"
};

const Layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $_rubusDocConfig;
	let { segment } = $$props;

	const rubusDocConfig = writable({
		name: "Rubus",
		lang: "zh",
		theme: "light"
	});

	setContext("rubusDocConfig", rubusDocConfig);
	let _rubusDocConfig = getContext("rubusDocConfig");
	validate_store(_rubusDocConfig, "_rubusDocConfig");
	$_rubusDocConfig = get_store_value(_rubusDocConfig);

	onMount(() => {
		if (window.localStorage.getItem("rubus-local-config-theme")) {
			$_rubusDocConfig.theme = window.localStorage.getItem("rubus-local-config-theme");
		} else {
			window.localStorage.setItem("rubus-local-config-theme", $_rubusDocConfig.theme);
		}

		if (window.localStorage.getItem("rubus-local-config-lang")) {
			$_rubusDocConfig.lang = window.localStorage.getItem("rubus-local-config-lang");
		} else {
			window.localStorage.setItem("rubus-local-config-lang", $_rubusDocConfig.lang);
		}
	});

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);
	$$result.css.add(css$8);
	validate_store(_rubusDocConfig, "_rubusDocConfig");
	$_rubusDocConfig = get_store_value(_rubusDocConfig);

	return `${validate_component(Cornerstone, "Cornerstone").$$render($$result, { spectrumTheme: $_rubusDocConfig.theme }, {}, {
		default: () => `${validate_component(Nav, "Nav").$$render($$result, { segment }, {}, {})}
  <main class="${"svelte-12c7nxz"}">${slots.default ? slots.default({}) : ``}</main>`
	})}`;
});

var root_comp = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Layout
});

/* src/routes/_error.svelte generated by Svelte v3.29.4 */

const css$9 = {
	code: "h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let status;\\n\\texport let error;\\n\\n\\tconst dev = \\\"development\\\" === 'development';\\n</script>\\n\\n<style>\\n\\th1, p {\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\th1 {\\n\\t\\tfont-size: 2.8em;\\n\\t\\tfont-weight: 700;\\n\\t\\tmargin: 0 0 0.5em 0;\\n\\t}\\n\\n\\tp {\\n\\t\\tmargin: 1em auto;\\n\\t}\\n\\n\\t@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t}\\n</style>\\n\\n<svelte:head>\\n\\t<title>{status}</title>\\n</svelte:head>\\n\\n<h1>{status}</h1>\\n\\n<p>{error.message}</p>\\n\\n{#if dev && error.stack}\\n\\t<pre>{error.stack}</pre>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AAQC,gBAAE,CAAE,CAAC,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,AACf,CAAC,AACF,CAAC\"}"
};

const Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { status } = $$props;
	let { error } = $$props;
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	$$result.css.add(css$9);

	return `${($$result.head += `${($$result.title = `<title>${escape(status)}</title>`, "")}`, "")}

<h1 class="${"svelte-8od9u6"}">${escape(status)}</h1>

<p class="${"svelte-8od9u6"}">${escape(error.message)}</p>

${ error.stack
	? `<pre>${escape(error.stack)}</pre>`
	: ``}`;
});

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.29.4 */

const App = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { stores } = $$props;
	let { error } = $$props;
	let { status } = $$props;
	let { segments } = $$props;
	let { level0 } = $$props;
	let { level1 = null } = $$props;
	let { level2 = null } = $$props;
	let { notify } = $$props;
	afterUpdate(notify);
	setContext(CONTEXT_KEY, stores);
	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);
	if ($$props.level2 === void 0 && $$bindings.level2 && level2 !== void 0) $$bindings.level2(level2);
	if ($$props.notify === void 0 && $$bindings.notify && notify !== void 0) $$bindings.notify(notify);

	return `


${validate_component(Layout, "Layout").$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `${error
		? `${validate_component(Error$1, "Error").$$render($$result, { error, status }, {}, {})}`
		: `${validate_component(level1.component || missing_component, "svelte:component").$$render($$result, Object.assign({ segment: segments[1] }, level1.props), {}, {
				default: () => `${level2
				? `${validate_component(level2.component || missing_component, "svelte:component").$$render($$result, Object.assign(level2.props), {}, {})}`
				: ``}`
			})}`}`
	})}`;
});

// This file is generated by Sapper — do not edit it!

if (typeof window !== 'undefined') {
	Promise.resolve().then(function () { return require('./sapper-dev-client-baba2825.js'); }).then(client => {
		client.connect(10000);
	});
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function page_store(value) {
    const store = writable(value);
    let ready = true;
    function notify() {
        ready = true;
        store.update(val => val);
    }
    function set(new_value) {
        ready = false;
        store.set(new_value);
    }
    function subscribe(run) {
        let old_value;
        return store.subscribe((new_value) => {
            if (old_value === undefined || (ready && new_value !== old_value)) {
                run(old_value = new_value);
            }
        });
    }
    return { notify, set, subscribe };
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;
const stores = {
    page: page_store({}),
    preloading: writable(null),
    session: writable(initial_data && initial_data.session)
};
stores.session.subscribe((value) => __awaiter(void 0, void 0, void 0, function* () {
    return;
}));

const stores$1 = () => getContext(CONTEXT_KEY);

/* src/components/nav-menu/navMenu.svelte generated by Svelte v3.29.4 */

const css$a = {
	code: "nav.svelte-7zrp5u{width:200px;height:100vh}",
	map: "{\"version\":3,\"file\":\"navMenu.svelte\",\"sources\":[\"navMenu.svelte\"],\"sourcesContent\":[\"<script>\\n  import { SideNav, SideNavGroup, SideNavItem } from \\\"@rubus/rubus/src\\\";\\n  import { stores } from \\\"@sapper/app\\\";\\n  const { page } = stores();\\n\\n  let routers = [\\n    {\\n      title: \\\"Token\\\",\\n      router: [\\n        { url: \\\"./docs/csstokens/color\\\", name: \\\"颜色\\\" },\\n        { url: \\\"csstokens\\\", name: \\\"尺寸\\\" },\\n      ],\\n    },\\n    {\\n      title: \\\"Asset\\\",\\n      router: [\\n        { url: \\\"Token\\\", name: \\\"图标\\\" },\\n        { url: \\\"Token\\\", name: \\\"插画\\\" },\\n      ],\\n    },\\n    {\\n      title: \\\"Basic\\\",\\n      router: [\\n        { url: \\\"Token\\\", name: \\\"Button 按钮\\\" },\\n        { url: \\\"Token\\\", name: \\\"Link 链接\\\" },\\n      ],\\n    },\\n  ];\\n</script>\\n\\n<style>\\n  nav {\\n    width: 200px;\\n    height: 100vh;\\n  }\\n</style>\\n\\n<nav>\\n  <SideNav>\\n    {#each routers as item, i}\\n      <SideNavGroup title={item.title}>\\n        {#each item.router as _router}\\n          <SideNavItem href={_router.url} isSelected={_router.url.indexOf($page.path) > -1}>{_router.name}</SideNavItem>\\n        {/each}\\n      </SideNavGroup>\\n    {/each}\\n  </SideNav>\\n</nav>\\n\"],\"names\":[],\"mappings\":\"AA+BE,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,AACf,CAAC\"}"
};

const NavMenu = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $page;
	const { page } = stores$1();
	validate_store(page, "page");
	$page = get_store_value(page);

	let routers = [
		{
			title: "Token",
			router: [
				{
					url: "./docs/csstokens/color",
					name: "颜色"
				},
				{ url: "csstokens", name: "尺寸" }
			]
		},
		{
			title: "Asset",
			router: [{ url: "Token", name: "图标" }, { url: "Token", name: "插画" }]
		},
		{
			title: "Basic",
			router: [{ url: "Token", name: "Button 按钮" }, { url: "Token", name: "Link 链接" }]
		}
	];

	$$result.css.add(css$a);
	validate_store(page, "page");
	$page = get_store_value(page);

	return `<nav class="${"svelte-7zrp5u"}">${validate_component(SideNav, "SideNav").$$render($$result, {}, {}, {
		default: () => `${each(routers, (item, i) => `${validate_component(SideNavGroup, "SideNavGroup").$$render($$result, { title: item.title }, {}, {
			default: () => `${each(item.router, _router => `${validate_component(SideNavItem, "SideNavItem").$$render(
				$$result,
				{
					href: _router.url,
					isSelected: _router.url.indexOf($page.path) > -1
				},
				{},
				{ default: () => `${escape(_router.name)}` }
			)}`)}
      `
		})}`)}`
	})}</nav>`;
});

/* src/routes/docs/_layout.svelte generated by Svelte v3.29.4 */

const css$b = {
	code: ".content.svelte-16t2pkl{width:1000px;display:block;margin-top:var(--spectrum-sidenav-heading-gap-top, var(--spectrum-global-dimension-size-200));margin-bottom:var(--spectrum-global-dimension-size-800);padding-left:var(--spectrum-global-dimension-size-800)}",
	map: "{\"version\":3,\"file\":\"_layout.svelte\",\"sources\":[\"_layout.svelte\"],\"sourcesContent\":[\"<script>\\n  import { NavMenu } from \\\"../../components\\\";\\n\\n  export let segment;\\n  segment;\\n</script>\\n\\n<style>\\n  .content {\\n    width: 1000px;\\n\\n    display: block;\\n    margin-top: var(--spectrum-sidenav-heading-gap-top, var(--spectrum-global-dimension-size-200));\\n    margin-bottom: var(--spectrum-global-dimension-size-800);\\n    padding-left: var(--spectrum-global-dimension-size-800);\\n  }\\n</style>\\n\\n<NavMenu />\\n<div class=\\\"content\\\">\\n  <slot />\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAQE,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,MAAM,CAEb,OAAO,CAAE,KAAK,CACd,UAAU,CAAE,IAAI,kCAAkC,CAAC,0CAA0C,CAAC,CAC9F,aAAa,CAAE,IAAI,oCAAoC,CAAC,CACxD,YAAY,CAAE,IAAI,oCAAoC,CAAC,AACzD,CAAC\"}"
};

const Layout$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let { segment } = $$props;
	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);
	$$result.css.add(css$b);

	return `${validate_component(NavMenu, "NavMenu").$$render($$result, {}, {}, {})}
<div class="${"content svelte-16t2pkl"}">${slots.default ? slots.default({}) : ``}</div>`;
});

var component_1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Layout$1
});

/* src/routes/docs/index.svelte generated by Svelte v3.29.4 */

const Docs = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	return ``;
});

var component_2 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Docs
});

var light = {
	globalColor: [
		[
			{
				name: "GRAY 50",
				code: "#FFFFFF"
			},
			{
				name: "GRAY 75",
				code: "#FAFAFA"
			},
			{
				name: "GRAY 100",
				code: "#F5F5F5"
			},
			{
				name: "GRAY 200",
				code: "#EAEAEA"
			},
			{
				name: "GRAY 300",
				code: "#E1E1E1"
			},
			{
				name: "GRAY 400",
				code: "#CACACA"
			},
			{
				name: "GRAY 500",
				code: "#B3B3B3"
			},
			{
				name: "GRAY 600",
				code: "#8E8E8E"
			},
			{
				name: "GRAY 700",
				code: "#6E6E6E"
			},
			{
				name: "GRAY 800",
				code: "#4B4B4B"
			},
			{
				name: "GRAY 900",
				code: "#2C2C2C"
			}
		],
		[
			{
				name: "BLUE 400",
				code: "#2680EB"
			},
			{
				name: "BLUE 500",
				code: "#1473E6"
			},
			{
				name: "BLUE 600",
				code: "#0D66D0"
			},
			{
				name: "BLUE 700",
				code: "#095ABA"
			}
		],
		[
			{
				name: "RED 400",
				code: "#E34850"
			},
			{
				name: "RED 500",
				code: "#D7373F"
			},
			{
				name: "RED 600",
				code: "#C9252D"
			},
			{
				name: "RED 700",
				code: "#BB121A"
			}
		],
		[
			{
				name: "ORANGE 400",
				code: "#E68619"
			},
			{
				name: "ORANGE 500",
				code: "#DA7B11"
			},
			{
				name: "ORANGE 600",
				code: "#CB6F10"
			},
			{
				name: "ORANGE 700",
				code: "#BD640D"
			}
		],
		[
			{
				name: "GREEN 400",
				code: "#2D9D78"
			},
			{
				name: "GREEN 500",
				code: "#268E6C"
			},
			{
				name: "GREEN 600",
				code: "#12805C"
			},
			{
				name: "GREEN 700",
				code: "#107154"
			}
		]
	],
	staticColor: [
		[
			{
				name: "STATIC WHITE",
				code: "#FFFFFF"
			},
			{
				name: "STATIC BLACK",
				code: "#000000"
			}
		],
		[
			{
				name: "STATIC GRAY 200",
				code: "#F4F4F4"
			},
			{
				name: "STATIC GRAY 300",
				code: "#EAEAEA"
			},
			{
				name: "STATIC GRAY 400",
				code: "#D3D3D3"
			},
			{
				name: "STATIC GRAY 500",
				code: "#BCBCBC"
			},
			{
				name: "STATIC GRAY 600",
				code: "#959595"
			},
			{
				name: "STATIC GRAY 700",
				code: "#747474"
			},
			{
				name: "STATIC GRAY 800",
				code: "#505050"
			},
			{
				name: "STATIC GRAY 900",
				code: "#323232"
			}
		],
		[
			{
				name: "STATIC BLUE 400",
				code: "#378EF0"
			},
			{
				name: "STATIC BLUE 500",
				code: "#2680EB"
			},
			{
				name: "STATIC BLUE 600",
				code: "#1473E6"
			},
			{
				name: "STATIC BLUE 700",
				code: "#0D66D0"
			}
		],
		[
			{
				name: "STATIC RED 400",
				code: "#EC5B62"
			},
			{
				name: "STATIC RED 500",
				code: "#E34850"
			},
			{
				name: "STATIC RED 600",
				code: "#D7373F"
			},
			{
				name: "STATIC RED 700",
				code: "#C9252D"
			}
		],
		[
			{
				name: "STATIC ORANGE 400",
				code: "#F29423"
			},
			{
				name: "STATIC ORANGE 500",
				code: "#E68619"
			},
			{
				name: "STATIC ORANGE 600",
				code: "#DA7B11"
			},
			{
				name: "STATIC ORANGE 700",
				code: "#CB6F10"
			}
		],
		[
			{
				name: "STATIC GREEN 400",
				code: "#33ABB4"
			},
			{
				name: "STATIC GREEN 500",
				code: "#2D9D78"
			},
			{
				name: "STATIC GREEN 600",
				code: "#268E6C"
			},
			{
				name: "STATIC GREEN 400",
				code: "#12805C"
			}
		]
	]
};
var lightest = {
	globalColor: [
		[
			{
				name: "GRAY 50",
				code: "#FFFFFF"
			},
			{
				name: "GRAY 75",
				code: "#FFFFFF"
			},
			{
				name: "GRAY 100",
				code: "#FFFFFF"
			},
			{
				name: "GRAY 200",
				code: "#F4F4F4"
			},
			{
				name: "GRAY 300",
				code: "#eaeaea"
			},
			{
				name: "GRAY 400",
				code: "#d3d3d3"
			},
			{
				name: "GRAY 500",
				code: "#bcbcbc"
			},
			{
				name: "GRAY 600",
				code: "#959595"
			},
			{
				name: "GRAY 700",
				code: "#747474"
			},
			{
				name: "GRAY 800",
				code: "#505050"
			},
			{
				name: "GRAY 900",
				code: "#323232"
			}
		],
		[
			{
				name: "BLUE 400",
				code: "#378ef0"
			},
			{
				name: "BLUE 500",
				code: "#2680eb"
			},
			{
				name: "BLUE 600",
				code: "#1473e6"
			},
			{
				name: "BLUE 700",
				code: "#0d66d0"
			}
		],
		[
			{
				name: "RED 400",
				code: "#ec5b62"
			},
			{
				name: "RED 500",
				code: "#e34850"
			},
			{
				name: "RED 600",
				code: "#d7373f"
			},
			{
				name: "RED 700",
				code: "#c9252d"
			}
		],
		[
			{
				name: "ORANGE 400",
				code: "#f29423"
			},
			{
				name: "ORANGE 500",
				code: "#e68619"
			},
			{
				name: "ORANGE 600",
				code: "#da7b11"
			},
			{
				name: "ORANGE 700",
				code: "#cb6f10"
			}
		],
		[
			{
				name: "GREEN 400",
				code: "#33ab84"
			},
			{
				name: "GREEN 500",
				code: "#2d9d78"
			},
			{
				name: "GREEN 600",
				code: "#268e6c"
			},
			{
				name: "GREEN 700",
				code: "#12805c"
			}
		]
	],
	staticColor: [
		[
			{
				name: "STATIC WHITE",
				code: "#FFFFFF"
			},
			{
				name: "STATIC BLACK",
				code: "#000000"
			}
		],
		[
			{
				name: "STATIC GRAY 200",
				code: "#F4F4F4"
			},
			{
				name: "STATIC GRAY 300",
				code: "#EAEAEA"
			},
			{
				name: "STATIC GRAY 400",
				code: "#D3D3D3"
			},
			{
				name: "STATIC GRAY 500",
				code: "#BCBCBC"
			},
			{
				name: "STATIC GRAY 600",
				code: "#959595"
			},
			{
				name: "STATIC GRAY 700",
				code: "#747474"
			},
			{
				name: "STATIC GRAY 800",
				code: "#505050"
			},
			{
				name: "STATIC GRAY 900",
				code: "#323232"
			}
		],
		[
			{
				name: "STATIC BLUE 400",
				code: "#378EF0"
			},
			{
				name: "STATIC BLUE 500",
				code: "#2680EB"
			},
			{
				name: "STATIC BLUE 600",
				code: "#1473E6"
			},
			{
				name: "STATIC BLUE 700",
				code: "#0D66D0"
			}
		],
		[
			{
				name: "STATIC RED 400",
				code: "#EC5B62"
			},
			{
				name: "STATIC RED 500",
				code: "#E34850"
			},
			{
				name: "STATIC RED 600",
				code: "#D7373F"
			},
			{
				name: "STATIC RED 700",
				code: "#C9252D"
			}
		],
		[
			{
				name: "STATIC ORANGE 400",
				code: "#F29423"
			},
			{
				name: "STATIC ORANGE 500",
				code: "#E68619"
			},
			{
				name: "STATIC ORANGE 600",
				code: "#DA7B11"
			},
			{
				name: "STATIC ORANGE 700",
				code: "#CB6F10"
			}
		],
		[
			{
				name: "STATIC GREEN 400",
				code: "#33ABB4"
			},
			{
				name: "STATIC GREEN 500",
				code: "#2D9D78"
			},
			{
				name: "STATIC GREEN 600",
				code: "#268E6C"
			},
			{
				name: "STATIC GREEN 400",
				code: "#12805C"
			}
		]
	]
};
var dark = {
	globalColor: [
		[
			{
				name: "GRAY 50",
				code: "#252525"
			},
			{
				name: "GRAY 75",
				code: "#2F2F2F"
			},
			{
				name: "GRAY 100",
				code: "#323232"
			},
			{
				name: "GRAY 200",
				code: "#3E3E3E"
			},
			{
				name: "GRAY 300",
				code: "#4A4A4A"
			},
			{
				name: "GRAY 400",
				code: "#5A5A5A"
			},
			{
				name: "GRAY 500",
				code: "#6E6E6E"
			},
			{
				name: "GRAY 600",
				code: "#909090"
			},
			{
				name: "GRAY 700",
				code: "#B9B9B9"
			},
			{
				name: "GRAY 800",
				code: "#E3E3E3"
			},
			{
				name: "GRAY 900",
				code: "#FFFFFF"
			}
		],
		[
			{
				name: "BLUE 400",
				code: "#2680EB"
			},
			{
				name: "BLUE 500",
				code: "#378EF0"
			},
			{
				name: "BLUE 600",
				code: "#4B9CF5"
			},
			{
				name: "BLUE 700",
				code: "#5AA9FA"
			}
		],
		[
			{
				name: "RED 400",
				code: "#E34850"
			},
			{
				name: "RED 500",
				code: "#EC5B62"
			},
			{
				name: "RED 600",
				code: "#F76D74"
			},
			{
				name: "RED 700",
				code: "#FF7B82"
			}
		],
		[
			{
				name: "ORANGE 400",
				code: "#E68619"
			},
			{
				name: "ORANGE 500",
				code: "#F29423"
			},
			{
				name: "ORANGE 600",
				code: "#F9A43F"
			},
			{
				name: "ORANGE 700",
				code: "#FFB55B"
			}
		],
		[
			{
				name: "GREEN 400",
				code: "#2D9D78"
			},
			{
				name: "GREEN 500",
				code: "#33AB84"
			},
			{
				name: "GREEN 600",
				code: "#39B990"
			},
			{
				name: "GREEN 700",
				code: "#3FC89C"
			}
		]
	],
	staticColor: [
		[
			{
				name: "STATIC WHITE",
				code: "#FFFFFF"
			},
			{
				name: "STATIC BLACK",
				code: "#000000"
			}
		],
		[
			{
				name: "STATIC GRAY 200",
				code: "#F4F4F4"
			},
			{
				name: "STATIC GRAY 300",
				code: "#EAEAEA"
			},
			{
				name: "STATIC GRAY 400",
				code: "#D3D3D3"
			},
			{
				name: "STATIC GRAY 500",
				code: "#BCBCBC"
			},
			{
				name: "STATIC GRAY 600",
				code: "#959595"
			},
			{
				name: "STATIC GRAY 700",
				code: "#747474"
			},
			{
				name: "STATIC GRAY 800",
				code: "#505050"
			},
			{
				name: "STATIC GRAY 900",
				code: "#323232"
			}
		],
		[
			{
				name: "STATIC BLUE 400",
				code: "#378EF0"
			},
			{
				name: "STATIC BLUE 500",
				code: "#2680EB"
			},
			{
				name: "STATIC BLUE 600",
				code: "#1473E6"
			},
			{
				name: "STATIC BLUE 700",
				code: "#0D66D0"
			}
		],
		[
			{
				name: "STATIC RED 400",
				code: "#EC5B62"
			},
			{
				name: "STATIC RED 500",
				code: "#E34850"
			},
			{
				name: "STATIC RED 600",
				code: "#D7373F"
			},
			{
				name: "STATIC RED 700",
				code: "#C9252D"
			}
		],
		[
			{
				name: "STATIC ORANGE 400",
				code: "#F29423"
			},
			{
				name: "STATIC ORANGE 500",
				code: "#E68619"
			},
			{
				name: "STATIC ORANGE 600",
				code: "#DA7B11"
			},
			{
				name: "STATIC ORANGE 700",
				code: "#CB6F10"
			}
		],
		[
			{
				name: "STATIC GREEN 400",
				code: "#33ABB4"
			},
			{
				name: "STATIC GREEN 500",
				code: "#2D9D78"
			},
			{
				name: "STATIC GREEN 600",
				code: "#268E6C"
			},
			{
				name: "STATIC GREEN 400",
				code: "#12805C"
			}
		]
	]
};
var darkest = {
	globalColor: [
		[
			{
				name: "GRAY 50",
				code: "#080808"
			},
			{
				name: "GRAY 75",
				code: "#1a1a1a"
			},
			{
				name: "GRAY 100",
				code: "#1e1e1e"
			},
			{
				name: "GRAY 200",
				code: "#2c2c2c"
			},
			{
				name: "GRAY 300",
				code: "#393939"
			},
			{
				name: "GRAY 400",
				code: "#494949"
			},
			{
				name: "GRAY 500",
				code: "#5c5c5c"
			},
			{
				name: "GRAY 600",
				code: "#7c7c7c"
			},
			{
				name: "GRAY 700",
				code: "#a2a2a2"
			},
			{
				name: "GRAY 800",
				code: "#c8c8c8"
			},
			{
				name: "GRAY 900",
				code: "#efefef"
			}
		],
		[
			{
				name: "BLUE 400",
				code: "#1473e6"
			},
			{
				name: "BLUE 500",
				code: "#2680eb"
			},
			{
				name: "BLUE 600",
				code: "#378ef0"
			},
			{
				name: "BLUE 700",
				code: "#4b9cf5"
			}
		],
		[
			{
				name: "RED 400",
				code: "#d7373f"
			},
			{
				name: "RED 500",
				code: "#e34850"
			},
			{
				name: "RED 600",
				code: "#ec5b62"
			},
			{
				name: "RED 700",
				code: "#f76d74"
			}
		],
		[
			{
				name: "ORANGE 400",
				code: "#da7b11"
			},
			{
				name: "ORANGE 500",
				code: "#e68619"
			},
			{
				name: "ORANGE 600",
				code: "#f29423"
			},
			{
				name: "ORANGE 700",
				code: "#f9a43f"
			}
		],
		[
			{
				name: "GREEN 400",
				code: "#268e6c"
			},
			{
				name: "GREEN 500",
				code: "#2d9d78"
			},
			{
				name: "GREEN 600",
				code: "#33ab84"
			},
			{
				name: "GREEN 700",
				code: "#39b990"
			}
		]
	],
	staticColor: [
		[
			{
				name: "STATIC WHITE",
				code: "#FFFFFF"
			},
			{
				name: "STATIC BLACK",
				code: "#000000"
			}
		],
		[
			{
				name: "STATIC GRAY 200",
				code: "#F4F4F4"
			},
			{
				name: "STATIC GRAY 300",
				code: "#EAEAEA"
			},
			{
				name: "STATIC GRAY 400",
				code: "#D3D3D3"
			},
			{
				name: "STATIC GRAY 500",
				code: "#BCBCBC"
			},
			{
				name: "STATIC GRAY 600",
				code: "#959595"
			},
			{
				name: "STATIC GRAY 700",
				code: "#747474"
			},
			{
				name: "STATIC GRAY 800",
				code: "#505050"
			},
			{
				name: "STATIC GRAY 900",
				code: "#323232"
			}
		],
		[
			{
				name: "STATIC BLUE 400",
				code: "#378EF0"
			},
			{
				name: "STATIC BLUE 500",
				code: "#2680EB"
			},
			{
				name: "STATIC BLUE 600",
				code: "#1473E6"
			},
			{
				name: "STATIC BLUE 700",
				code: "#0D66D0"
			}
		],
		[
			{
				name: "STATIC RED 400",
				code: "#EC5B62"
			},
			{
				name: "STATIC RED 500",
				code: "#E34850"
			},
			{
				name: "STATIC RED 600",
				code: "#D7373F"
			},
			{
				name: "STATIC RED 700",
				code: "#C9252D"
			}
		],
		[
			{
				name: "STATIC ORANGE 400",
				code: "#F29423"
			},
			{
				name: "STATIC ORANGE 500",
				code: "#E68619"
			},
			{
				name: "STATIC ORANGE 600",
				code: "#DA7B11"
			},
			{
				name: "STATIC ORANGE 700",
				code: "#CB6F10"
			}
		],
		[
			{
				name: "STATIC GREEN 400",
				code: "#33ABB4"
			},
			{
				name: "STATIC GREEN 500",
				code: "#2D9D78"
			},
			{
				name: "STATIC GREEN 600",
				code: "#268E6C"
			},
			{
				name: "STATIC GREEN 400",
				code: "#12805C"
			}
		]
	]
};
var color = {
	light: light,
	lightest: lightest,
	dark: dark,
	darkest: darkest
};

var colorData = /*#__PURE__*/Object.freeze({
    __proto__: null,
    light: light,
    lightest: lightest,
    dark: dark,
    darkest: darkest,
    'default': color
});

/* src/components/color-container/ColorContainer.svelte generated by Svelte v3.29.4 */

const css$c = {
	code: ".toolbar.svelte-1uc2o5u.svelte-1uc2o5u{display:flex;width:300px;justify-content:space-between;align-items:center}form.svelte-1uc2o5u.svelte-1uc2o5u{display:flex}.vertical-line.svelte-1uc2o5u.svelte-1uc2o5u{width:1px;height:20px;background-color:var(--spectrum-alias-background-color-default)}.color-model.svelte-1uc2o5u.svelte-1uc2o5u{width:120px;justify-content:space-between}.color-container.svelte-1uc2o5u.svelte-1uc2o5u{padding:8px;box-sizing:border-box;border:1px solid transparent;border-radius:4px;padding-top:32px;background-color:var(--spectrum-global-color-gray-100);border:1px solid var(--spectrum-global-color-gray-300);border-radius:4px}.color-group.svelte-1uc2o5u.svelte-1uc2o5u{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-start;max-width:816px;margin:auto;margin-bottom:30px}.color-item.svelte-1uc2o5u.svelte-1uc2o5u{flex-basis:22%;height:100px;margin:1.5%;border-radius:4px;box-sizing:border-box;cursor:pointer;padding:10px;border:1px solid var(--spectrum-global-color-gray-200);transition:transform 130ms ease-in-out}.color-item.svelte-1uc2o5u.svelte-1uc2o5u:hover{transform:scale(1.08)}.color-item-name.svelte-1uc2o5u.svelte-1uc2o5u{font-size:11px;line-height:1.3;letter-spacing:0.03em;text-transform:uppercase;margin-top:0;margin-bottom:0}.color-item-code.svelte-1uc2o5u.svelte-1uc2o5u{font-weight:600;line-height:1.3;font-size:13px}.color-item-light.svelte-1uc2o5u>.color-item-name.svelte-1uc2o5u{color:var(--spectrum-global-color-static-gray-800)}.color-item-light.svelte-1uc2o5u>.color-item-code.svelte-1uc2o5u{color:var(--spectrum-global-color-static-gray-900)}.color-item-dark.svelte-1uc2o5u>.color-item-name.svelte-1uc2o5u{color:var(--spectrum-global-color-static-gray-200)}.color-item-dark.svelte-1uc2o5u>.color-item-code.svelte-1uc2o5u{color:var(--spectrum-global-color-static-gray-100)}",
	map: "{\"version\":3,\"file\":\"ColorContainer.svelte\",\"sources\":[\"ColorContainer.svelte\"],\"sourcesContent\":[\"<script>\\n  import { Radio, Checkbox, Tooltip } from \\\"@rubus/rubus/src\\\";\\n  import { getContext, onMount } from \\\"svelte\\\";\\n\\n  import * as colorData from \\\"./color.json\\\";\\n\\n  let colorModel = \\\"hex\\\";\\n  let staticColorsView = false;\\n  let rubusDocConfig = getContext(\\\"rubusDocConfig\\\");\\n  let colorDisplay = \\\"globalColor\\\";\\n\\n  onMount(() => {});\\n  function handleClick() {\\n    staticColorsView = !staticColorsView;\\n    colorDisplay = staticColorsView ? \\\"staticColor\\\" : \\\"globalColor\\\";\\n  }\\n\\n  async function copyColor(t, c) {\\n    if (colorModel !== \\\"hex\\\") {\\n      c = hexToRGB(c);\\n    }\\n    let colorCode = staticColorsView\\n      ? `--spectrum-global-color-static-${t.replace(/[^a-zA-Z]/gi, \\\"\\\").toLowerCase()}-${t.replace(\\n          /[^0-9]/gi,\\n          \\\"\\\"\\n        )}: ${c}`\\n      : `--spectrum-global-color-${t.replace(/[^a-zA-Z]/gi, \\\"\\\").toLowerCase()}-${t.replace(/[^0-9]/gi, \\\"\\\")}: ${c}`;\\n    if (navigator.clipboard) {\\n      try {\\n        await navigator.clipboard.writeText(colorCode);\\n        console.log(\\\"Page URL copied to clipboard:\\\" + colorCode);\\n      } catch (err) {\\n        console.error(\\\"Failed to copy: \\\", err);\\n      }\\n    }\\n  }\\n  function hexToRGB(h) {\\n    let r = 0,\\n      g = 0,\\n      b = 0;\\n\\n    // 3 digits\\n    if (h.length == 4) {\\n      r = \\\"0x\\\" + h[1] + h[1];\\n      g = \\\"0x\\\" + h[2] + h[2];\\n      b = \\\"0x\\\" + h[3] + h[3];\\n\\n      // 6 digits\\n    } else if (h.length == 7) {\\n      r = \\\"0x\\\" + h[1] + h[2];\\n      g = \\\"0x\\\" + h[3] + h[4];\\n      b = \\\"0x\\\" + h[5] + h[6];\\n    }\\n\\n    return \\\"rgb(\\\" + +r + \\\",\\\" + +g + \\\",\\\" + +b + \\\")\\\";\\n  }\\n\\n  function hexToHSL(H) {\\n    let r = 0,\\n      g = 0,\\n      b = 0;\\n    if (H.length == 4) {\\n      r = \\\"0x\\\" + H[1] + H[1];\\n      g = \\\"0x\\\" + H[2] + H[2];\\n      b = \\\"0x\\\" + H[3] + H[3];\\n    } else if (H.length == 7) {\\n      r = \\\"0x\\\" + H[1] + H[2];\\n      g = \\\"0x\\\" + H[3] + H[4];\\n      b = \\\"0x\\\" + H[5] + H[6];\\n    }\\n    // Then to HSL\\n    r /= 255;\\n    g /= 255;\\n    b /= 255;\\n    let cmin = Math.min(r, g, b),\\n      cmax = Math.max(r, g, b),\\n      delta = cmax - cmin,\\n      h = 0,\\n      s = 0,\\n      l = 0;\\n\\n    if (delta == 0) h = 0;\\n    else if (cmax == r) h = ((g - b) / delta) % 6;\\n    else if (cmax == g) h = (b - r) / delta + 2;\\n    else h = (r - g) / delta + 4;\\n\\n    h = Math.round(h * 60);\\n\\n    if (h < 0) h += 360;\\n\\n    l = (cmax + cmin) / 2;\\n    s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));\\n    s = +(s * 100).toFixed(1);\\n    l = +(l * 100).toFixed(1);\\n\\n    return [h, s, l];\\n  }\\n\\n  function lightAndDark(code) {\\n    let [, , l] = hexToHSL(code);\\n    let crossover = 50;\\n    switch ($rubusDocConfig.theme) {\\n      case \\\"light\\\":\\n        crossover = 60;\\n        break;\\n      case \\\"lightest\\\":\\n        crossover = 70;\\n        break;\\n      case \\\"dark\\\":\\n        crossover = 38;\\n        break;\\n      case \\\"darkest\\\":\\n        crossover = 35;\\n        break;\\n    }\\n    return l >= crossover ? false : true;\\n  }\\n</script>\\n\\n<style>\\n  .toolbar {\\n    display: flex;\\n    width: 300px;\\n    justify-content: space-between;\\n    align-items: center;\\n  }\\n  form {\\n    display: flex;\\n  }\\n  .vertical-line {\\n    width: 1px;\\n    height: 20px;\\n    background-color: var(--spectrum-alias-background-color-default);\\n  }\\n  .color-model {\\n    width: 120px;\\n    justify-content: space-between;\\n  }\\n  .color-container {\\n    padding: 8px;\\n    box-sizing: border-box;\\n    border: 1px solid transparent;\\n    border-radius: 4px;\\n    padding-top: 32px;\\n    background-color: var(--spectrum-global-color-gray-100);\\n    border: 1px solid var(--spectrum-global-color-gray-300);\\n    border-radius: 4px;\\n  }\\n  .color-group {\\n    display: flex;\\n    flex-wrap: wrap;\\n    align-items: center;\\n    justify-content: flex-start;\\n    max-width: 816px;\\n    margin: auto;\\n    margin-bottom: 30px;\\n  }\\n  .color-item {\\n    flex-basis: 22%;\\n    height: 100px;\\n    margin: 1.5%;\\n    border-radius: 4px;\\n\\n    box-sizing: border-box;\\n    cursor: pointer;\\n    padding: 10px;\\n    border: 1px solid var(--spectrum-global-color-gray-200);\\n    transition: transform 130ms ease-in-out;\\n  }\\n  .color-item:hover {\\n    transform: scale(1.08);\\n  }\\n  .color-item-name {\\n    font-size: 11px;\\n    line-height: 1.3;\\n    letter-spacing: 0.03em;\\n    text-transform: uppercase;\\n    margin-top: 0;\\n    margin-bottom: 0;\\n  }\\n  .color-item-code {\\n    font-weight: 600;\\n    line-height: 1.3;\\n    font-size: 13px;\\n  }\\n  .color-item-light > .color-item-name {\\n    color: var(--spectrum-global-color-static-gray-800);\\n  }\\n  .color-item-light > .color-item-code {\\n    color: var(--spectrum-global-color-static-gray-900);\\n  }\\n  .color-item-dark > .color-item-name {\\n    color: var(--spectrum-global-color-static-gray-200);\\n  }\\n  .color-item-dark > .color-item-code {\\n    color: var(--spectrum-global-color-static-gray-100);\\n  }\\n</style>\\n\\n<div class=\\\"toolbar\\\">\\n  <form>\\n    <Checkbox checked={staticColorsView} on:click={handleClick}>Static colors</Checkbox>\\n  </form>\\n  <div class=\\\"vertical-line\\\" />\\n  <form class=\\\"color-model\\\">\\n    <Radio\\n      value=\\\"Hex\\\"\\n      checked={colorModel == 'hex'}\\n      on:click={() => {\\n        colorModel = 'hex';\\n      }} />\\n    <Radio\\n      value=\\\"RGB\\\"\\n      checked={colorModel == 'rgb'}\\n      on:click={() => {\\n        colorModel = 'rgb';\\n      }} />\\n  </form>\\n</div>\\n<div class=\\\"color-container\\\">\\n  {#each colorData[$rubusDocConfig.theme][colorDisplay] as items}\\n    <div class=\\\"color-group\\\">\\n      {#each items as colorItem}\\n        <div\\n          on:click={() => {\\n            copyColor(colorItem.name, colorItem.code);\\n          }}\\n          class=\\\"color-item {lightAndDark(colorItem.code) ? 'color-item-dark' : 'color-item-light'}\\\"\\n          style={`background-color:${colorModel == 'hex' ? colorItem.code.toUpperCase() : hexToRGB(colorItem.code).toUpperCase()}`}>\\n          <div class=\\\"color-item-name\\\">{colorItem.name}</div>\\n          <div class=\\\"color-item-code\\\">\\n            {colorModel == 'hex' ? colorItem.code.toUpperCase() : hexToRGB(colorItem.code).toUpperCase()}\\n            <Tooltip\\n              width=\\\"20px\\\"\\n              directions=\\\"bottom\\\"\\n              label={colorModel == 'hex' ? colorItem.code.toUpperCase() : hexToRGB(colorItem.code).toUpperCase()} />\\n          </div>\\n        </div>\\n      {/each}\\n    </div>\\n  {/each}\\n</div>\\n\"],\"names\":[],\"mappings\":\"AAwHE,QAAQ,8BAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,AACrB,CAAC,AACD,IAAI,8BAAC,CAAC,AACJ,OAAO,CAAE,IAAI,AACf,CAAC,AACD,cAAc,8BAAC,CAAC,AACd,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,gBAAgB,CAAE,IAAI,yCAAyC,CAAC,AAClE,CAAC,AACD,YAAY,8BAAC,CAAC,AACZ,KAAK,CAAE,KAAK,CACZ,eAAe,CAAE,aAAa,AAChC,CAAC,AACD,gBAAgB,8BAAC,CAAC,AAChB,OAAO,CAAE,GAAG,CACZ,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,IAAI,CACjB,gBAAgB,CAAE,IAAI,gCAAgC,CAAC,CACvD,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,gCAAgC,CAAC,CACvD,aAAa,CAAE,GAAG,AACpB,CAAC,AACD,YAAY,8BAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,UAAU,CAC3B,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,WAAW,8BAAC,CAAC,AACX,UAAU,CAAE,GAAG,CACf,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAElB,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,gCAAgC,CAAC,CACvD,UAAU,CAAE,SAAS,CAAC,KAAK,CAAC,WAAW,AACzC,CAAC,AACD,yCAAW,MAAM,AAAC,CAAC,AACjB,SAAS,CAAE,MAAM,IAAI,CAAC,AACxB,CAAC,AACD,gBAAgB,8BAAC,CAAC,AAChB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,MAAM,CACtB,cAAc,CAAE,SAAS,CACzB,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,CAAC,AAClB,CAAC,AACD,gBAAgB,8BAAC,CAAC,AAChB,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,gCAAiB,CAAG,gBAAgB,eAAC,CAAC,AACpC,KAAK,CAAE,IAAI,uCAAuC,CAAC,AACrD,CAAC,AACD,gCAAiB,CAAG,gBAAgB,eAAC,CAAC,AACpC,KAAK,CAAE,IAAI,uCAAuC,CAAC,AACrD,CAAC,AACD,+BAAgB,CAAG,gBAAgB,eAAC,CAAC,AACnC,KAAK,CAAE,IAAI,uCAAuC,CAAC,AACrD,CAAC,AACD,+BAAgB,CAAG,gBAAgB,eAAC,CAAC,AACnC,KAAK,CAAE,IAAI,uCAAuC,CAAC,AACrD,CAAC\"}"
};

function hexToHSL(H) {
	let r = 0, g = 0, b = 0;

	if (H.length == 4) {
		r = "0x" + H[1] + H[1];
		g = "0x" + H[2] + H[2];
		b = "0x" + H[3] + H[3];
	} else if (H.length == 7) {
		r = "0x" + H[1] + H[2];
		g = "0x" + H[3] + H[4];
		b = "0x" + H[5] + H[6];
	}

	// Then to HSL
	r /= 255;

	g /= 255;
	b /= 255;

	let cmin = Math.min(r, g, b),
		cmax = Math.max(r, g, b),
		delta = cmax - cmin,
		h = 0,
		s = 0,
		l = 0;

	if (delta == 0) h = 0; else if (cmax == r) h = (g - b) / delta % 6; else if (cmax == g) h = (b - r) / delta + 2; else h = (r - g) / delta + 4;
	h = Math.round(h * 60);
	if (h < 0) h += 360;
	l = (cmax + cmin) / 2;
	s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));
	s = +(s * 100).toFixed(1);
	l = +(l * 100).toFixed(1);
	return [h, s, l];
}

const ColorContainer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $rubusDocConfig;
	let colorModel = "hex";
	let staticColorsView = false;
	let rubusDocConfig = getContext("rubusDocConfig");
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);
	let colorDisplay = "globalColor";

	onMount(() => {
		
	});

	function lightAndDark(code) {
		let [,,l] = hexToHSL(code);
		let crossover = 50;

		switch ($rubusDocConfig.theme) {
			case "light":
				crossover = 60;
				break;
			case "lightest":
				crossover = 70;
				break;
			case "dark":
				crossover = 38;
				break;
			case "darkest":
				crossover = 35;
				break;
		}

		return l >= crossover ? false : true;
	}

	$$result.css.add(css$c);
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);

	return `<div class="${"toolbar svelte-1uc2o5u"}"><form class="${"svelte-1uc2o5u"}">${validate_component(Checkbox, "Checkbox").$$render($$result, { checked: staticColorsView }, {}, { default: () => `Static colors` })}</form>
  <div class="${"vertical-line svelte-1uc2o5u"}"></div>
  <form class="${"color-model svelte-1uc2o5u"}">${validate_component(Radio, "Radio").$$render(
		$$result,
		{
			value: "Hex",
			checked: colorModel == "hex"
		},
		{},
		{}
	)}
    ${validate_component(Radio, "Radio").$$render(
		$$result,
		{
			value: "RGB",
			checked: colorModel == "rgb"
		},
		{},
		{}
	)}</form></div>
<div class="${"color-container svelte-1uc2o5u"}">${each(colorData[$rubusDocConfig.theme][colorDisplay], items => `<div class="${"color-group svelte-1uc2o5u"}">${each(items, colorItem => `<div class="${"color-item " + escape(lightAndDark(colorItem.code)
	? "color-item-dark"
	: "color-item-light") + " svelte-1uc2o5u"}"${add_attribute(
		"style",
		`background-color:${ colorItem.code.toUpperCase()
		}`,
		0
	)}><div class="${"color-item-name svelte-1uc2o5u"}">${escape(colorItem.name)}</div>
          <div class="${"color-item-code svelte-1uc2o5u"}">${escape( colorItem.code.toUpperCase()
	)}
            ${validate_component(Tooltip, "Tooltip").$$render(
		$$result,
		{
			width: "20px",
			directions: "bottom",
			label:  colorItem.code.toUpperCase()
			
		},
		{},
		{}
	)}</div>
        </div>`)}
    </div>`)}</div>`;
});

/* src/routes/docs/csstokens/color/index.svelte generated by Svelte v3.29.4 */

const css$d = {
	code: "header.svelte-at88ok{min-height:120px}",
	map: "{\"version\":3,\"file\":\"index.svelte\",\"sources\":[\"index.svelte\"],\"sourcesContent\":[\"<script>\\n  import { TypographyHeading, TypographyBody } from \\\"@rubus/rubus/src\\\";\\n  import { getContext } from \\\"svelte\\\";\\n  import ColorContainer from \\\"../../../../components/color-container\\\";\\n  let rubusDocConfig = getContext(\\\"rubusDocConfig\\\");\\n</script>\\n\\n<style>\\n  header {\\n    min-height: 120px;\\n  }\\n</style>\\n\\n<svelte:head>\\n  <title>{$rubusDocConfig.name} 颜色</title>\\n</svelte:head>\\n\\n<header>\\n  <TypographyHeading scale=\\\"XL\\\">颜色</TypographyHeading>\\n  <TypographyBody scale=\\\"M\\\" lineHeight=\\\"size-400\\\">位于设计系统中的颜色令牌</TypographyBody>\\n</header>\\n\\n<main>\\n  <ColorContainer />\\n</main>\\n\"],\"names\":[],\"mappings\":\"AAQE,MAAM,cAAC,CAAC,AACN,UAAU,CAAE,KAAK,AACnB,CAAC\"}"
};

const Color$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
	let $rubusDocConfig;
	let rubusDocConfig = getContext("rubusDocConfig");
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);
	$$result.css.add(css$d);
	validate_store(rubusDocConfig, "rubusDocConfig");
	$rubusDocConfig = get_store_value(rubusDocConfig);

	return `${($$result.head += `${($$result.title = `<title>${escape($rubusDocConfig.name)} 颜色</title>`, "")}`, "")}

<header class="${"svelte-at88ok"}">${validate_component(TypographyHeading, "TypographyHeading").$$render($$result, { scale: "XL" }, {}, { default: () => `颜色` })}
  ${validate_component(TypographyBody, "TypographyBody").$$render($$result, { scale: "M", lineHeight: "size-400" }, {}, { default: () => `位于设计系统中的颜色令牌` })}</header>

<main>${validate_component(ColorContainer, "ColorContainer").$$render($$result, {}, {}, {})}</main>`;
});

var component_3 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': Color$1
});

// This file is generated by Sapper — do not edit it!

const manifest = {
	server_routes: [
		
	],

	pages: [
		{
			// index.svelte
			pattern: /^\/$/,
			parts: [
				{ name: "index", file: "index.svelte", component: component_0 }
			]
		},

		{
			// docs/index.svelte
			pattern: /^\/docs\/?$/,
			parts: [
				{ name: "docs__layout", file: "docs/_layout.svelte", component: component_1 },
				{ name: "docs", file: "docs/index.svelte", component: component_2 }
			]
		},

		{
			// docs/csstokens/color/index.svelte
			pattern: /^\/docs\/csstokens\/color\/?$/,
			parts: [
				{ name: "docs__layout", file: "docs/_layout.svelte", component: component_1 },
				null,
				{ name: "docs_csstokens_color", file: "docs/csstokens/color/index.svelte", component: component_3 }
			]
		}
	],

	root_comp,
	error: Error$1
};

const build_dir = "__sapper__/dev";

const src_dir = "src";

/**
 * @param typeMap [Object] Map of MIME type -> Array[extensions]
 * @param ...
 */
function Mime() {
  this._types = Object.create(null);
  this._extensions = Object.create(null);

  for (var i = 0; i < arguments.length; i++) {
    this.define(arguments[i]);
  }

  this.define = this.define.bind(this);
  this.getType = this.getType.bind(this);
  this.getExtension = this.getExtension.bind(this);
}

/**
 * Define mimetype -> extension mappings.  Each key is a mime-type that maps
 * to an array of extensions associated with the type.  The first extension is
 * used as the default extension for the type.
 *
 * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});
 *
 * If a type declares an extension that has already been defined, an error will
 * be thrown.  To suppress this error and force the extension to be associated
 * with the new type, pass `force`=true.  Alternatively, you may prefix the
 * extension with "*" to map the type to extension, without mapping the
 * extension to the type.
 *
 * e.g. mime.define({'audio/wav', ['wav']}, {'audio/x-wav', ['*wav']});
 *
 *
 * @param map (Object) type definitions
 * @param force (Boolean) if true, force overriding of existing definitions
 */
Mime.prototype.define = function(typeMap, force) {
  for (var type in typeMap) {
    var extensions = typeMap[type].map(function(t) {return t.toLowerCase()});
    type = type.toLowerCase();

    for (var i = 0; i < extensions.length; i++) {
      var ext = extensions[i];

      // '*' prefix = not the preferred type for this extension.  So fixup the
      // extension, and skip it.
      if (ext[0] == '*') {
        continue;
      }

      if (!force && (ext in this._types)) {
        throw new Error(
          'Attempt to change mapping for "' + ext +
          '" extension from "' + this._types[ext] + '" to "' + type +
          '". Pass `force=true` to allow this, otherwise remove "' + ext +
          '" from the list of extensions for "' + type + '".'
        );
      }

      this._types[ext] = type;
    }

    // Use first extension as default
    if (force || !this._extensions[type]) {
      var ext = extensions[0];
      this._extensions[type] = (ext[0] != '*') ? ext : ext.substr(1);
    }
  }
};

/**
 * Lookup a mime type based on extension
 */
Mime.prototype.getType = function(path) {
  path = String(path);
  var last = path.replace(/^.*[/\\]/, '').toLowerCase();
  var ext = last.replace(/^.*\./, '').toLowerCase();

  var hasPath = last.length < path.length;
  var hasDot = ext.length < last.length - 1;

  return (hasDot || !hasPath) && this._types[ext] || null;
};

/**
 * Return file extension associated with a mime type
 */
Mime.prototype.getExtension = function(type) {
  type = /^\s*([^;\s]*)/.test(type) && RegExp.$1;
  return type && this._extensions[type.toLowerCase()] || null;
};

var Mime_1 = Mime;

var standard = {"application/andrew-inset":["ez"],"application/applixware":["aw"],"application/atom+xml":["atom"],"application/atomcat+xml":["atomcat"],"application/atomdeleted+xml":["atomdeleted"],"application/atomsvc+xml":["atomsvc"],"application/atsc-dwd+xml":["dwd"],"application/atsc-held+xml":["held"],"application/atsc-rsat+xml":["rsat"],"application/bdoc":["bdoc"],"application/calendar+xml":["xcs"],"application/ccxml+xml":["ccxml"],"application/cdfx+xml":["cdfx"],"application/cdmi-capability":["cdmia"],"application/cdmi-container":["cdmic"],"application/cdmi-domain":["cdmid"],"application/cdmi-object":["cdmio"],"application/cdmi-queue":["cdmiq"],"application/cu-seeme":["cu"],"application/dash+xml":["mpd"],"application/davmount+xml":["davmount"],"application/docbook+xml":["dbk"],"application/dssc+der":["dssc"],"application/dssc+xml":["xdssc"],"application/ecmascript":["ecma","es"],"application/emma+xml":["emma"],"application/emotionml+xml":["emotionml"],"application/epub+zip":["epub"],"application/exi":["exi"],"application/fdt+xml":["fdt"],"application/font-tdpfr":["pfr"],"application/geo+json":["geojson"],"application/gml+xml":["gml"],"application/gpx+xml":["gpx"],"application/gxf":["gxf"],"application/gzip":["gz"],"application/hjson":["hjson"],"application/hyperstudio":["stk"],"application/inkml+xml":["ink","inkml"],"application/ipfix":["ipfix"],"application/its+xml":["its"],"application/java-archive":["jar","war","ear"],"application/java-serialized-object":["ser"],"application/java-vm":["class"],"application/javascript":["js","mjs"],"application/json":["json","map"],"application/json5":["json5"],"application/jsonml+json":["jsonml"],"application/ld+json":["jsonld"],"application/lgr+xml":["lgr"],"application/lost+xml":["lostxml"],"application/mac-binhex40":["hqx"],"application/mac-compactpro":["cpt"],"application/mads+xml":["mads"],"application/manifest+json":["webmanifest"],"application/marc":["mrc"],"application/marcxml+xml":["mrcx"],"application/mathematica":["ma","nb","mb"],"application/mathml+xml":["mathml"],"application/mbox":["mbox"],"application/mediaservercontrol+xml":["mscml"],"application/metalink+xml":["metalink"],"application/metalink4+xml":["meta4"],"application/mets+xml":["mets"],"application/mmt-aei+xml":["maei"],"application/mmt-usd+xml":["musd"],"application/mods+xml":["mods"],"application/mp21":["m21","mp21"],"application/mp4":["mp4s","m4p"],"application/mrb-consumer+xml":["*xdf"],"application/mrb-publish+xml":["*xdf"],"application/msword":["doc","dot"],"application/mxf":["mxf"],"application/n-quads":["nq"],"application/n-triples":["nt"],"application/node":["cjs"],"application/octet-stream":["bin","dms","lrf","mar","so","dist","distz","pkg","bpk","dump","elc","deploy","exe","dll","deb","dmg","iso","img","msi","msp","msm","buffer"],"application/oda":["oda"],"application/oebps-package+xml":["opf"],"application/ogg":["ogx"],"application/omdoc+xml":["omdoc"],"application/onenote":["onetoc","onetoc2","onetmp","onepkg"],"application/oxps":["oxps"],"application/p2p-overlay+xml":["relo"],"application/patch-ops-error+xml":["*xer"],"application/pdf":["pdf"],"application/pgp-encrypted":["pgp"],"application/pgp-signature":["asc","sig"],"application/pics-rules":["prf"],"application/pkcs10":["p10"],"application/pkcs7-mime":["p7m","p7c"],"application/pkcs7-signature":["p7s"],"application/pkcs8":["p8"],"application/pkix-attr-cert":["ac"],"application/pkix-cert":["cer"],"application/pkix-crl":["crl"],"application/pkix-pkipath":["pkipath"],"application/pkixcmp":["pki"],"application/pls+xml":["pls"],"application/postscript":["ai","eps","ps"],"application/provenance+xml":["provx"],"application/pskc+xml":["pskcxml"],"application/raml+yaml":["raml"],"application/rdf+xml":["rdf","owl"],"application/reginfo+xml":["rif"],"application/relax-ng-compact-syntax":["rnc"],"application/resource-lists+xml":["rl"],"application/resource-lists-diff+xml":["rld"],"application/rls-services+xml":["rs"],"application/route-apd+xml":["rapd"],"application/route-s-tsid+xml":["sls"],"application/route-usd+xml":["rusd"],"application/rpki-ghostbusters":["gbr"],"application/rpki-manifest":["mft"],"application/rpki-roa":["roa"],"application/rsd+xml":["rsd"],"application/rss+xml":["rss"],"application/rtf":["rtf"],"application/sbml+xml":["sbml"],"application/scvp-cv-request":["scq"],"application/scvp-cv-response":["scs"],"application/scvp-vp-request":["spq"],"application/scvp-vp-response":["spp"],"application/sdp":["sdp"],"application/senml+xml":["senmlx"],"application/sensml+xml":["sensmlx"],"application/set-payment-initiation":["setpay"],"application/set-registration-initiation":["setreg"],"application/shf+xml":["shf"],"application/sieve":["siv","sieve"],"application/smil+xml":["smi","smil"],"application/sparql-query":["rq"],"application/sparql-results+xml":["srx"],"application/srgs":["gram"],"application/srgs+xml":["grxml"],"application/sru+xml":["sru"],"application/ssdl+xml":["ssdl"],"application/ssml+xml":["ssml"],"application/swid+xml":["swidtag"],"application/tei+xml":["tei","teicorpus"],"application/thraud+xml":["tfi"],"application/timestamped-data":["tsd"],"application/toml":["toml"],"application/ttml+xml":["ttml"],"application/urc-ressheet+xml":["rsheet"],"application/voicexml+xml":["vxml"],"application/wasm":["wasm"],"application/widget":["wgt"],"application/winhlp":["hlp"],"application/wsdl+xml":["wsdl"],"application/wspolicy+xml":["wspolicy"],"application/xaml+xml":["xaml"],"application/xcap-att+xml":["xav"],"application/xcap-caps+xml":["xca"],"application/xcap-diff+xml":["xdf"],"application/xcap-el+xml":["xel"],"application/xcap-error+xml":["xer"],"application/xcap-ns+xml":["xns"],"application/xenc+xml":["xenc"],"application/xhtml+xml":["xhtml","xht"],"application/xliff+xml":["xlf"],"application/xml":["xml","xsl","xsd","rng"],"application/xml-dtd":["dtd"],"application/xop+xml":["xop"],"application/xproc+xml":["xpl"],"application/xslt+xml":["xslt"],"application/xspf+xml":["xspf"],"application/xv+xml":["mxml","xhvml","xvml","xvm"],"application/yang":["yang"],"application/yin+xml":["yin"],"application/zip":["zip"],"audio/3gpp":["*3gpp"],"audio/adpcm":["adp"],"audio/basic":["au","snd"],"audio/midi":["mid","midi","kar","rmi"],"audio/mobile-xmf":["mxmf"],"audio/mp3":["*mp3"],"audio/mp4":["m4a","mp4a"],"audio/mpeg":["mpga","mp2","mp2a","mp3","m2a","m3a"],"audio/ogg":["oga","ogg","spx"],"audio/s3m":["s3m"],"audio/silk":["sil"],"audio/wav":["wav"],"audio/wave":["*wav"],"audio/webm":["weba"],"audio/xm":["xm"],"font/collection":["ttc"],"font/otf":["otf"],"font/ttf":["ttf"],"font/woff":["woff"],"font/woff2":["woff2"],"image/aces":["exr"],"image/apng":["apng"],"image/bmp":["bmp"],"image/cgm":["cgm"],"image/dicom-rle":["drle"],"image/emf":["emf"],"image/fits":["fits"],"image/g3fax":["g3"],"image/gif":["gif"],"image/heic":["heic"],"image/heic-sequence":["heics"],"image/heif":["heif"],"image/heif-sequence":["heifs"],"image/hej2k":["hej2"],"image/hsj2":["hsj2"],"image/ief":["ief"],"image/jls":["jls"],"image/jp2":["jp2","jpg2"],"image/jpeg":["jpeg","jpg","jpe"],"image/jph":["jph"],"image/jphc":["jhc"],"image/jpm":["jpm"],"image/jpx":["jpx","jpf"],"image/jxr":["jxr"],"image/jxra":["jxra"],"image/jxrs":["jxrs"],"image/jxs":["jxs"],"image/jxsc":["jxsc"],"image/jxsi":["jxsi"],"image/jxss":["jxss"],"image/ktx":["ktx"],"image/png":["png"],"image/sgi":["sgi"],"image/svg+xml":["svg","svgz"],"image/t38":["t38"],"image/tiff":["tif","tiff"],"image/tiff-fx":["tfx"],"image/webp":["webp"],"image/wmf":["wmf"],"message/disposition-notification":["disposition-notification"],"message/global":["u8msg"],"message/global-delivery-status":["u8dsn"],"message/global-disposition-notification":["u8mdn"],"message/global-headers":["u8hdr"],"message/rfc822":["eml","mime"],"model/3mf":["3mf"],"model/gltf+json":["gltf"],"model/gltf-binary":["glb"],"model/iges":["igs","iges"],"model/mesh":["msh","mesh","silo"],"model/mtl":["mtl"],"model/obj":["obj"],"model/stl":["stl"],"model/vrml":["wrl","vrml"],"model/x3d+binary":["*x3db","x3dbz"],"model/x3d+fastinfoset":["x3db"],"model/x3d+vrml":["*x3dv","x3dvz"],"model/x3d+xml":["x3d","x3dz"],"model/x3d-vrml":["x3dv"],"text/cache-manifest":["appcache","manifest"],"text/calendar":["ics","ifb"],"text/coffeescript":["coffee","litcoffee"],"text/css":["css"],"text/csv":["csv"],"text/html":["html","htm","shtml"],"text/jade":["jade"],"text/jsx":["jsx"],"text/less":["less"],"text/markdown":["markdown","md"],"text/mathml":["mml"],"text/mdx":["mdx"],"text/n3":["n3"],"text/plain":["txt","text","conf","def","list","log","in","ini"],"text/richtext":["rtx"],"text/rtf":["*rtf"],"text/sgml":["sgml","sgm"],"text/shex":["shex"],"text/slim":["slim","slm"],"text/stylus":["stylus","styl"],"text/tab-separated-values":["tsv"],"text/troff":["t","tr","roff","man","me","ms"],"text/turtle":["ttl"],"text/uri-list":["uri","uris","urls"],"text/vcard":["vcard"],"text/vtt":["vtt"],"text/xml":["*xml"],"text/yaml":["yaml","yml"],"video/3gpp":["3gp","3gpp"],"video/3gpp2":["3g2"],"video/h261":["h261"],"video/h263":["h263"],"video/h264":["h264"],"video/jpeg":["jpgv"],"video/jpm":["*jpm","jpgm"],"video/mj2":["mj2","mjp2"],"video/mp2t":["ts"],"video/mp4":["mp4","mp4v","mpg4"],"video/mpeg":["mpeg","mpg","mpe","m1v","m2v"],"video/ogg":["ogv"],"video/quicktime":["qt","mov"],"video/webm":["webm"]};

var lite = new Mime_1(standard);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function get_server_route_handler(routes) {
    function handle_route(route, req, res, next) {
        return __awaiter$1(this, void 0, void 0, function* () {
            req.params = route.params(route.pattern.exec(req.path));
            const method = req.method.toLowerCase();
            // 'delete' cannot be exported from a module because it is a keyword,
            // so check for 'del' instead
            const method_export = method === 'delete' ? 'del' : method;
            const handle_method = route.handlers[method_export];
            if (handle_method) {
                if (process.env.SAPPER_EXPORT) {
                    const { write, end, setHeader } = res;
                    const chunks = [];
                    const headers = {};
                    // intercept data so that it can be exported
                    res.write = function (chunk) {
                        chunks.push(Buffer.from(chunk));
                        return write.apply(res, [chunk]);
                    };
                    res.setHeader = function (name, value) {
                        headers[name.toLowerCase()] = value;
                        setHeader.apply(res, [name, value]);
                    };
                    res.end = function (chunk) {
                        if (chunk)
                            chunks.push(Buffer.from(chunk));
                        end.apply(res, [chunk]);
                        process.send({
                            __sapper__: true,
                            event: 'file',
                            url: req.url,
                            method: req.method,
                            status: res.statusCode,
                            type: headers['content-type'],
                            body: Buffer.concat(chunks)
                        });
                    };
                }
                const handle_next = (err) => {
                    if (err) {
                        res.statusCode = 500;
                        res.end(err.message);
                    }
                    else {
                        process.nextTick(next);
                    }
                };
                try {
                    yield handle_method(req, res, handle_next);
                }
                catch (err) {
                    console.error(err);
                    handle_next(err);
                }
            }
            else {
                // no matching handler for method
                process.nextTick(next);
            }
        });
    }
    return function find_route(req, res, next) {
        for (const route of routes) {
            if (route.pattern.test(req.path)) {
                handle_route(route, req, res, next);
                return;
            }
        }
        next();
    };
}

/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */

/**
 * Module exports.
 * @public
 */

var parse_1 = parse;

/**
 * Module variables.
 * @private
 */

var decode = decodeURIComponent;
var pairSplitRegExp = /; */;

/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */

function parse(str, options) {
  if (typeof str !== 'string') {
    throw new TypeError('argument str must be a string');
  }

  var obj = {};
  var opt = options || {};
  var pairs = str.split(pairSplitRegExp);
  var dec = opt.decode || decode;

  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i];
    var eq_idx = pair.indexOf('=');

    // skip things that don't look like key=value
    if (eq_idx < 0) {
      continue;
    }

    var key = pair.substr(0, eq_idx).trim();
    var val = pair.substr(++eq_idx, pair.length).trim();

    // quoted values
    if ('"' == val[0]) {
      val = val.slice(1, -1);
    }

    // only assign once
    if (undefined == obj[key]) {
      obj[key] = tryDecode(val, dec);
    }
  }

  return obj;
}

/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */

function tryDecode(str, decode) {
  try {
    return decode(str);
  } catch (e) {
    return str;
  }
}

var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$';
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
    '<': '\\u003C',
    '>': '\\u003E',
    '/': '\\u002F',
    '\\': '\\\\',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\0': '\\0',
    '\u2028': '\\u2028',
    '\u2029': '\\u2029'
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join('\0');
function devalue(value) {
    var counts = new Map();
    function walk(thing) {
        if (typeof thing === 'function') {
            throw new Error("Cannot stringify a function");
        }
        if (counts.has(thing)) {
            counts.set(thing, counts.get(thing) + 1);
            return;
        }
        counts.set(thing, 1);
        if (!isPrimitive(thing)) {
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                case 'Date':
                case 'RegExp':
                    return;
                case 'Array':
                    thing.forEach(walk);
                    break;
                case 'Set':
                case 'Map':
                    Array.from(thing).forEach(walk);
                    break;
                default:
                    var proto = Object.getPrototypeOf(thing);
                    if (proto !== Object.prototype &&
                        proto !== null &&
                        Object.getOwnPropertyNames(proto).sort().join('\0') !== objectProtoOwnPropertyNames) {
                        throw new Error("Cannot stringify arbitrary non-POJOs");
                    }
                    if (Object.getOwnPropertySymbols(thing).length > 0) {
                        throw new Error("Cannot stringify POJOs with symbolic keys");
                    }
                    Object.keys(thing).forEach(function (key) { return walk(thing[key]); });
            }
        }
    }
    walk(value);
    var names = new Map();
    Array.from(counts)
        .filter(function (entry) { return entry[1] > 1; })
        .sort(function (a, b) { return b[1] - a[1]; })
        .forEach(function (entry, i) {
        names.set(entry[0], getName(i));
    });
    function stringify(thing) {
        if (names.has(thing)) {
            return names.get(thing);
        }
        if (isPrimitive(thing)) {
            return stringifyPrimitive(thing);
        }
        var type = getType(thing);
        switch (type) {
            case 'Number':
            case 'String':
            case 'Boolean':
                return "Object(" + stringify(thing.valueOf()) + ")";
            case 'RegExp':
                return "new RegExp(" + stringifyString(thing.source) + ", \"" + thing.flags + "\")";
            case 'Date':
                return "new Date(" + thing.getTime() + ")";
            case 'Array':
                var members = thing.map(function (v, i) { return i in thing ? stringify(v) : ''; });
                var tail = thing.length === 0 || (thing.length - 1 in thing) ? '' : ',';
                return "[" + members.join(',') + tail + "]";
            case 'Set':
            case 'Map':
                return "new " + type + "([" + Array.from(thing).map(stringify).join(',') + "])";
            default:
                var obj = "{" + Object.keys(thing).map(function (key) { return safeKey(key) + ":" + stringify(thing[key]); }).join(',') + "}";
                var proto = Object.getPrototypeOf(thing);
                if (proto === null) {
                    return Object.keys(thing).length > 0
                        ? "Object.assign(Object.create(null)," + obj + ")"
                        : "Object.create(null)";
                }
                return obj;
        }
    }
    var str = stringify(value);
    if (names.size) {
        var params_1 = [];
        var statements_1 = [];
        var values_1 = [];
        names.forEach(function (name, thing) {
            params_1.push(name);
            if (isPrimitive(thing)) {
                values_1.push(stringifyPrimitive(thing));
                return;
            }
            var type = getType(thing);
            switch (type) {
                case 'Number':
                case 'String':
                case 'Boolean':
                    values_1.push("Object(" + stringify(thing.valueOf()) + ")");
                    break;
                case 'RegExp':
                    values_1.push(thing.toString());
                    break;
                case 'Date':
                    values_1.push("new Date(" + thing.getTime() + ")");
                    break;
                case 'Array':
                    values_1.push("Array(" + thing.length + ")");
                    thing.forEach(function (v, i) {
                        statements_1.push(name + "[" + i + "]=" + stringify(v));
                    });
                    break;
                case 'Set':
                    values_1.push("new Set");
                    statements_1.push(name + "." + Array.from(thing).map(function (v) { return "add(" + stringify(v) + ")"; }).join('.'));
                    break;
                case 'Map':
                    values_1.push("new Map");
                    statements_1.push(name + "." + Array.from(thing).map(function (_a) {
                        var k = _a[0], v = _a[1];
                        return "set(" + stringify(k) + ", " + stringify(v) + ")";
                    }).join('.'));
                    break;
                default:
                    values_1.push(Object.getPrototypeOf(thing) === null ? 'Object.create(null)' : '{}');
                    Object.keys(thing).forEach(function (key) {
                        statements_1.push("" + name + safeProp(key) + "=" + stringify(thing[key]));
                    });
            }
        });
        statements_1.push("return " + str);
        return "(function(" + params_1.join(',') + "){" + statements_1.join(';') + "}(" + values_1.join(',') + "))";
    }
    else {
        return str;
    }
}
function getName(num) {
    var name = '';
    do {
        name = chars[num % chars.length] + name;
        num = ~~(num / chars.length) - 1;
    } while (num >= 0);
    return reserved.test(name) ? name + "_" : name;
}
function isPrimitive(thing) {
    return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
    if (typeof thing === 'string')
        return stringifyString(thing);
    if (thing === void 0)
        return 'void 0';
    if (thing === 0 && 1 / thing < 0)
        return '-0';
    var str = String(thing);
    if (typeof thing === 'number')
        return str.replace(/^(-)?0\./, '$1.');
    return str;
}
function getType(thing) {
    return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
    return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
    return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
    return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
    var result = '"';
    for (var i = 0; i < str.length; i += 1) {
        var char = str.charAt(i);
        var code = char.charCodeAt(0);
        if (char === '"') {
            result += '\\"';
        }
        else if (char in escaped$1) {
            result += escaped$1[char];
        }
        else if (code >= 0xd800 && code <= 0xdfff) {
            var next = str.charCodeAt(i + 1);
            // If this is the beginning of a [high, low] surrogate pair,
            // add the next two characters, otherwise escape
            if (code <= 0xdbff && (next >= 0xdc00 && next <= 0xdfff)) {
                result += char + str[++i];
            }
            else {
                result += "\\u" + code.toString(16).toUpperCase();
            }
        }
        else {
            result += char;
        }
    }
    result += '"';
    return result;
}

// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js

// fix for "Readable" isn't a named export issue
const Readable = Stream__default['default'].Readable;

const BUFFER = Symbol('buffer');
const TYPE = Symbol('type');

class Blob {
	constructor() {
		this[TYPE] = '';

		const blobParts = arguments[0];
		const options = arguments[1];

		const buffers = [];
		let size = 0;

		if (blobParts) {
			const a = blobParts;
			const length = Number(a.length);
			for (let i = 0; i < length; i++) {
				const element = a[i];
				let buffer;
				if (element instanceof Buffer) {
					buffer = element;
				} else if (ArrayBuffer.isView(element)) {
					buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
				} else if (element instanceof ArrayBuffer) {
					buffer = Buffer.from(element);
				} else if (element instanceof Blob) {
					buffer = element[BUFFER];
				} else {
					buffer = Buffer.from(typeof element === 'string' ? element : String(element));
				}
				size += buffer.length;
				buffers.push(buffer);
			}
		}

		this[BUFFER] = Buffer.concat(buffers);

		let type = options && options.type !== undefined && String(options.type).toLowerCase();
		if (type && !/[^\u0020-\u007E]/.test(type)) {
			this[TYPE] = type;
		}
	}
	get size() {
		return this[BUFFER].length;
	}
	get type() {
		return this[TYPE];
	}
	text() {
		return Promise.resolve(this[BUFFER].toString());
	}
	arrayBuffer() {
		const buf = this[BUFFER];
		const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		return Promise.resolve(ab);
	}
	stream() {
		const readable = new Readable();
		readable._read = function () {};
		readable.push(this[BUFFER]);
		readable.push(null);
		return readable;
	}
	toString() {
		return '[object Blob]';
	}
	slice() {
		const size = this.size;

		const start = arguments[0];
		const end = arguments[1];
		let relativeStart, relativeEnd;
		if (start === undefined) {
			relativeStart = 0;
		} else if (start < 0) {
			relativeStart = Math.max(size + start, 0);
		} else {
			relativeStart = Math.min(start, size);
		}
		if (end === undefined) {
			relativeEnd = size;
		} else if (end < 0) {
			relativeEnd = Math.max(size + end, 0);
		} else {
			relativeEnd = Math.min(end, size);
		}
		const span = Math.max(relativeEnd - relativeStart, 0);

		const buffer = this[BUFFER];
		const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
		const blob = new Blob([], { type: arguments[2] });
		blob[BUFFER] = slicedBuffer;
		return blob;
	}
}

Object.defineProperties(Blob.prototype, {
	size: { enumerable: true },
	type: { enumerable: true },
	slice: { enumerable: true }
});

Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
	value: 'Blob',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * fetch-error.js
 *
 * FetchError interface for operational errors
 */

/**
 * Create FetchError instance
 *
 * @param   String      message      Error message for human
 * @param   String      type         Error type for machine
 * @param   String      systemError  For Node.js system error
 * @return  FetchError
 */
function FetchError(message, type, systemError) {
  Error.call(this, message);

  this.message = message;
  this.type = type;

  // when err.type is `system`, err.code contains system error code
  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';

let convert$1;
try {
	convert$1 = require('encoding').convert;
} catch (e) {}

const INTERNALS = Symbol('Body internals');

// fix an issue where "PassThrough" isn't a named export for node <10
const PassThrough = Stream__default['default'].PassThrough;

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
function Body(body) {
	var _this = this;

	var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	    _ref$size = _ref.size;

	let size = _ref$size === undefined ? 0 : _ref$size;
	var _ref$timeout = _ref.timeout;
	let timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

	if (body == null) {
		// body is undefined or null
		body = null;
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		body = Buffer.from(body.toString());
	} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		body = Buffer.from(body);
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
	} else if (body instanceof Stream__default['default']) ; else {
		// none of the above
		// coerce to string then buffer
		body = Buffer.from(String(body));
	}
	this[INTERNALS] = {
		body,
		disturbed: false,
		error: null
	};
	this.size = size;
	this.timeout = timeout;

	if (body instanceof Stream__default['default']) {
		body.on('error', function (err) {
			const error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);
			_this[INTERNALS].error = error;
		});
	}
}

Body.prototype = {
	get body() {
		return this[INTERNALS].body;
	},

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	},

	/**
  * Decode response as ArrayBuffer
  *
  * @return  Promise
  */
	arrayBuffer() {
		return consumeBody.call(this).then(function (buf) {
			return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
		});
	},

	/**
  * Return raw response as Blob
  *
  * @return Promise
  */
	blob() {
		let ct = this.headers && this.headers.get('content-type') || '';
		return consumeBody.call(this).then(function (buf) {
			return Object.assign(
			// Prevent copying
			new Blob([], {
				type: ct.toLowerCase()
			}), {
				[BUFFER]: buf
			});
		});
	},

	/**
  * Decode response as json
  *
  * @return  Promise
  */
	json() {
		var _this2 = this;

		return consumeBody.call(this).then(function (buffer) {
			try {
				return JSON.parse(buffer.toString());
			} catch (err) {
				return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));
			}
		});
	},

	/**
  * Decode response as text
  *
  * @return  Promise
  */
	text() {
		return consumeBody.call(this).then(function (buffer) {
			return buffer.toString();
		});
	},

	/**
  * Decode response as buffer (non-spec api)
  *
  * @return  Promise
  */
	buffer() {
		return consumeBody.call(this);
	},

	/**
  * Decode response as text, while automatically detecting the encoding and
  * trying to decode to UTF-8 (non-spec api)
  *
  * @return  Promise
  */
	textConverted() {
		var _this3 = this;

		return consumeBody.call(this).then(function (buffer) {
			return convertBody(buffer, _this3.headers);
		});
	}
};

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: { enumerable: true },
	bodyUsed: { enumerable: true },
	arrayBuffer: { enumerable: true },
	blob: { enumerable: true },
	json: { enumerable: true },
	text: { enumerable: true }
});

Body.mixIn = function (proto) {
	for (const name of Object.getOwnPropertyNames(Body.prototype)) {
		// istanbul ignore else: future proof
		if (!(name in proto)) {
			const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
			Object.defineProperty(proto, name, desc);
		}
	}
};

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return  Promise
 */
function consumeBody() {
	var _this4 = this;

	if (this[INTERNALS].disturbed) {
		return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
	}

	this[INTERNALS].disturbed = true;

	if (this[INTERNALS].error) {
		return Body.Promise.reject(this[INTERNALS].error);
	}

	let body = this.body;

	// body is null
	if (body === null) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is blob
	if (isBlob(body)) {
		body = body.stream();
	}

	// body is buffer
	if (Buffer.isBuffer(body)) {
		return Body.Promise.resolve(body);
	}

	// istanbul ignore if: should never happen
	if (!(body instanceof Stream__default['default'])) {
		return Body.Promise.resolve(Buffer.alloc(0));
	}

	// body is stream
	// get ready to actually consume the body
	let accum = [];
	let accumBytes = 0;
	let abort = false;

	return new Body.Promise(function (resolve, reject) {
		let resTimeout;

		// allow timeout on slow response body
		if (_this4.timeout) {
			resTimeout = setTimeout(function () {
				abort = true;
				reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));
			}, _this4.timeout);
		}

		// handle stream errors
		body.on('error', function (err) {
			if (err.name === 'AbortError') {
				// if the request was aborted, reject with this Error
				abort = true;
				reject(err);
			} else {
				// other errors, such as incorrect content-encoding
				reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));
			}
		});

		body.on('data', function (chunk) {
			if (abort || chunk === null) {
				return;
			}

			if (_this4.size && accumBytes + chunk.length > _this4.size) {
				abort = true;
				reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));
				return;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		});

		body.on('end', function () {
			if (abort) {
				return;
			}

			clearTimeout(resTimeout);

			try {
				resolve(Buffer.concat(accum, accumBytes));
			} catch (err) {
				// handle streams that have accumulated too much data (issue #414)
				reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));
			}
		});
	});
}

/**
 * Detect buffer encoding and convert to target encoding
 * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding
 *
 * @param   Buffer  buffer    Incoming buffer
 * @param   String  encoding  Target encoding
 * @return  String
 */
function convertBody(buffer, headers) {
	if (typeof convert$1 !== 'function') {
		throw new Error('The package `encoding` must be installed to use the textConverted() function');
	}

	const ct = headers.get('content-type');
	let charset = 'utf-8';
	let res, str;

	// header
	if (ct) {
		res = /charset=([^;]*)/i.exec(ct);
	}

	// no charset in content type, peek at response body for at most 1024 bytes
	str = buffer.slice(0, 1024).toString();

	// html5
	if (!res && str) {
		res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
	}

	// html4
	if (!res && str) {
		res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
		if (!res) {
			res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
			if (res) {
				res.pop(); // drop last quote
			}
		}

		if (res) {
			res = /charset=(.*)/i.exec(res.pop());
		}
	}

	// xml
	if (!res && str) {
		res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
	}

	// found charset
	if (res) {
		charset = res.pop();

		// prevent decode issues when sites use incorrect encoding
		// ref: https://hsivonen.fi/encoding-menu/
		if (charset === 'gb2312' || charset === 'gbk') {
			charset = 'gb18030';
		}
	}

	// turn raw buffers into a single utf-8 buffer
	return convert$1(buffer, 'UTF-8', charset).toString();
}

/**
 * Detect a URLSearchParams object
 * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143
 *
 * @param   Object  obj     Object to detect by type or brand
 * @return  String
 */
function isURLSearchParams(obj) {
	// Duck-typing as a necessary condition.
	if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
		return false;
	}

	// Brand-checking and more duck-typing as optional condition.
	return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

/**
 * Check if `obj` is a W3C `Blob` object (which `File` inherits from)
 * @param  {*} obj
 * @return {boolean}
 */
function isBlob(obj) {
	return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed  instance  Response or Request instance
 * @return  Mixed
 */
function clone(instance) {
	let p1, p2;
	let body = instance.body;

	// don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if (body instanceof Stream__default['default'] && typeof body.getBoundary !== 'function') {
		// tee instance body
		p1 = new PassThrough();
		p2 = new PassThrough();
		body.pipe(p1);
		body.pipe(p2);
		// set instance body to teed body and return the other teed body
		instance[INTERNALS].body = p1;
		body = p2;
	}

	return body;
}

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param   Mixed  instance  Any options.body input
 */
function extractContentType(body) {
	if (body === null) {
		// body is null
		return null;
	} else if (typeof body === 'string') {
		// body is string
		return 'text/plain;charset=UTF-8';
	} else if (isURLSearchParams(body)) {
		// body is a URLSearchParams
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	} else if (isBlob(body)) {
		// body is blob
		return body.type || null;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return null;
	} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
		// body is ArrayBuffer
		return null;
	} else if (ArrayBuffer.isView(body)) {
		// body is ArrayBufferView
		return null;
	} else if (typeof body.getBoundary === 'function') {
		// detect form data input from form-data module
		return `multipart/form-data;boundary=${body.getBoundary()}`;
	} else if (body instanceof Stream__default['default']) {
		// body is stream
		// can't really do much about this
		return null;
	} else {
		// Body constructor defaults other things to string
		return 'text/plain;charset=UTF-8';
	}
}

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param   Body    instance   Instance of Body
 * @return  Number?            Number of bytes, or null if not possible
 */
function getTotalBytes(instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		return 0;
	} else if (isBlob(body)) {
		return body.size;
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		return body.length;
	} else if (body && typeof body.getLengthSync === 'function') {
		// detect form data input from form-data module
		if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x
		body.hasKnownLength && body.hasKnownLength()) {
			// 2.x
			return body.getLengthSync();
		}
		return null;
	} else {
		// body is stream
		return null;
	}
}

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param   Body    instance   Instance of Body
 * @return  Void
 */
function writeToStream(dest, instance) {
	const body = instance.body;


	if (body === null) {
		// body is null
		dest.end();
	} else if (isBlob(body)) {
		body.stream().pipe(dest);
	} else if (Buffer.isBuffer(body)) {
		// body is buffer
		dest.write(body);
		dest.end();
	} else {
		// body is stream
		body.pipe(dest);
	}
}

// expose Promise
Body.Promise = global.Promise;

/**
 * headers.js
 *
 * Headers class offers convenient helpers
 */

const invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
const invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
	name = `${name}`;
	if (invalidTokenRegex.test(name) || name === '') {
		throw new TypeError(`${name} is not a legal HTTP header name`);
	}
}

function validateValue(value) {
	value = `${value}`;
	if (invalidHeaderCharRegex.test(value)) {
		throw new TypeError(`${value} is not a legal HTTP header value`);
	}
}

/**
 * Find the key in the map object given a header name.
 *
 * Returns undefined if not found.
 *
 * @param   String  name  Header name
 * @return  String|Undefined
 */
function find(map, name) {
	name = name.toLowerCase();
	for (const key in map) {
		if (key.toLowerCase() === name) {
			return key;
		}
	}
	return undefined;
}

const MAP = Symbol('map');
class Headers {
	/**
  * Headers class
  *
  * @param   Object  headers  Response headers
  * @return  Void
  */
	constructor() {
		let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

		this[MAP] = Object.create(null);

		if (init instanceof Headers) {
			const rawHeaders = init.raw();
			const headerNames = Object.keys(rawHeaders);

			for (const headerName of headerNames) {
				for (const value of rawHeaders[headerName]) {
					this.append(headerName, value);
				}
			}

			return;
		}

		// We don't worry about converting prop to ByteString here as append()
		// will handle it.
		if (init == null) ; else if (typeof init === 'object') {
			const method = init[Symbol.iterator];
			if (method != null) {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				const pairs = [];
				for (const pair of init) {
					if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {
						throw new TypeError('Each header pair must be iterable');
					}
					pairs.push(Array.from(pair));
				}

				for (const pair of pairs) {
					if (pair.length !== 2) {
						throw new TypeError('Each header pair must be a name/value tuple');
					}
					this.append(pair[0], pair[1]);
				}
			} else {
				// record<ByteString, ByteString>
				for (const key of Object.keys(init)) {
					const value = init[key];
					this.append(key, value);
				}
			}
		} else {
			throw new TypeError('Provided initializer must be an object');
		}
	}

	/**
  * Return combined header value given name
  *
  * @param   String  name  Header name
  * @return  Mixed
  */
	get(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key === undefined) {
			return null;
		}

		return this[MAP][key].join(', ');
	}

	/**
  * Iterate over all headers
  *
  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)
  * @param   Boolean   thisArg   `this` context for callback function
  * @return  Void
  */
	forEach(callback) {
		let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		let pairs = getHeaders(this);
		let i = 0;
		while (i < pairs.length) {
			var _pairs$i = pairs[i];
			const name = _pairs$i[0],
			      value = _pairs$i[1];

			callback.call(thisArg, value, name, this);
			pairs = getHeaders(this);
			i++;
		}
	}

	/**
  * Overwrite header values given name
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	set(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		this[MAP][key !== undefined ? key : name] = [value];
	}

	/**
  * Append a value onto existing header
  *
  * @param   String  name   Header name
  * @param   String  value  Header value
  * @return  Void
  */
	append(name, value) {
		name = `${name}`;
		value = `${value}`;
		validateName(name);
		validateValue(value);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			this[MAP][key].push(value);
		} else {
			this[MAP][name] = [value];
		}
	}

	/**
  * Check for header name existence
  *
  * @param   String   name  Header name
  * @return  Boolean
  */
	has(name) {
		name = `${name}`;
		validateName(name);
		return find(this[MAP], name) !== undefined;
	}

	/**
  * Delete all header values given name
  *
  * @param   String  name  Header name
  * @return  Void
  */
	delete(name) {
		name = `${name}`;
		validateName(name);
		const key = find(this[MAP], name);
		if (key !== undefined) {
			delete this[MAP][key];
		}
	}

	/**
  * Return raw headers (non-spec api)
  *
  * @return  Object
  */
	raw() {
		return this[MAP];
	}

	/**
  * Get an iterator on keys.
  *
  * @return  Iterator
  */
	keys() {
		return createHeadersIterator(this, 'key');
	}

	/**
  * Get an iterator on values.
  *
  * @return  Iterator
  */
	values() {
		return createHeadersIterator(this, 'value');
	}

	/**
  * Get an iterator on entries.
  *
  * This is the default iterator of the Headers object.
  *
  * @return  Iterator
  */
	[Symbol.iterator]() {
		return createHeadersIterator(this, 'key+value');
	}
}
Headers.prototype.entries = Headers.prototype[Symbol.iterator];

Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
	value: 'Headers',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Headers.prototype, {
	get: { enumerable: true },
	forEach: { enumerable: true },
	set: { enumerable: true },
	append: { enumerable: true },
	has: { enumerable: true },
	delete: { enumerable: true },
	keys: { enumerable: true },
	values: { enumerable: true },
	entries: { enumerable: true }
});

function getHeaders(headers) {
	let kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';

	const keys = Object.keys(headers[MAP]).sort();
	return keys.map(kind === 'key' ? function (k) {
		return k.toLowerCase();
	} : kind === 'value' ? function (k) {
		return headers[MAP][k].join(', ');
	} : function (k) {
		return [k.toLowerCase(), headers[MAP][k].join(', ')];
	});
}

const INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
	const iterator = Object.create(HeadersIteratorPrototype);
	iterator[INTERNAL] = {
		target,
		kind,
		index: 0
	};
	return iterator;
}

const HeadersIteratorPrototype = Object.setPrototypeOf({
	next() {
		// istanbul ignore if
		if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
			throw new TypeError('Value of `this` is not a HeadersIterator');
		}

		var _INTERNAL = this[INTERNAL];
		const target = _INTERNAL.target,
		      kind = _INTERNAL.kind,
		      index = _INTERNAL.index;

		const values = getHeaders(target, kind);
		const len = values.length;
		if (index >= len) {
			return {
				value: undefined,
				done: true
			};
		}

		this[INTERNAL].index = index + 1;

		return {
			value: values[index],
			done: false
		};
	}
}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));

Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
	value: 'HeadersIterator',
	writable: false,
	enumerable: false,
	configurable: true
});

/**
 * Export the Headers object in a form that Node.js can consume.
 *
 * @param   Headers  headers
 * @return  Object
 */
function exportNodeCompatibleHeaders(headers) {
	const obj = Object.assign({ __proto__: null }, headers[MAP]);

	// http.request() only supports string as Host header. This hack makes
	// specifying custom Host header possible.
	const hostHeaderKey = find(headers[MAP], 'Host');
	if (hostHeaderKey !== undefined) {
		obj[hostHeaderKey] = obj[hostHeaderKey][0];
	}

	return obj;
}

/**
 * Create a Headers object from an object of headers, ignoring those that do
 * not conform to HTTP grammar productions.
 *
 * @param   Object  obj  Object of headers
 * @return  Headers
 */
function createHeadersLenient(obj) {
	const headers = new Headers();
	for (const name of Object.keys(obj)) {
		if (invalidTokenRegex.test(name)) {
			continue;
		}
		if (Array.isArray(obj[name])) {
			for (const val of obj[name]) {
				if (invalidHeaderCharRegex.test(val)) {
					continue;
				}
				if (headers[MAP][name] === undefined) {
					headers[MAP][name] = [val];
				} else {
					headers[MAP][name].push(val);
				}
			}
		} else if (!invalidHeaderCharRegex.test(obj[name])) {
			headers[MAP][name] = [obj[name]];
		}
	}
	return headers;
}

const INTERNALS$1 = Symbol('Response internals');

// fix an issue where "STATUS_CODES" aren't a named export for node <10
const STATUS_CODES = http__default['default'].STATUS_CODES;

/**
 * Response class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response {
	constructor() {
		let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		Body.call(this, body, opts);

		const status = opts.status || 200;
		const headers = new Headers(opts.headers);

		if (body != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[INTERNALS$1] = {
			url: opts.url,
			status,
			statusText: opts.statusText || STATUS_CODES[status],
			headers,
			counter: opts.counter
		};
	}

	get url() {
		return this[INTERNALS$1].url || '';
	}

	get status() {
		return this[INTERNALS$1].status;
	}

	/**
  * Convenience property representing if the request ended normally
  */
	get ok() {
		return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
	}

	get redirected() {
		return this[INTERNALS$1].counter > 0;
	}

	get statusText() {
		return this[INTERNALS$1].statusText;
	}

	get headers() {
		return this[INTERNALS$1].headers;
	}

	/**
  * Clone this response
  *
  * @return  Response
  */
	clone() {
		return new Response(clone(this), {
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected
		});
	}
}

Body.mixIn(Response.prototype);

Object.defineProperties(Response.prototype, {
	url: { enumerable: true },
	status: { enumerable: true },
	ok: { enumerable: true },
	redirected: { enumerable: true },
	statusText: { enumerable: true },
	headers: { enumerable: true },
	clone: { enumerable: true }
});

Object.defineProperty(Response.prototype, Symbol.toStringTag, {
	value: 'Response',
	writable: false,
	enumerable: false,
	configurable: true
});

const INTERNALS$2 = Symbol('Request internals');

// fix an issue where "format", "parse" aren't a named export for node <10
const parse_url = Url__default['default'].parse;
const format_url = Url__default['default'].format;

const streamDestructionSupported = 'destroy' in Stream__default['default'].Readable.prototype;

/**
 * Check if a value is an instance of Request.
 *
 * @param   Mixed   input
 * @return  Boolean
 */
function isRequest(input) {
	return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
	const proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
	return !!(proto && proto.constructor.name === 'AbortSignal');
}

/**
 * Request class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request {
	constructor(input) {
		let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		let parsedURL;

		// normalize input
		if (!isRequest(input)) {
			if (input && input.href) {
				// in order to support Node.js' Url objects; though WHATWG's URL objects
				// will fall into this branch also (since their `toString()` will return
				// `href` property anyway)
				parsedURL = parse_url(input.href);
			} else {
				// coerce input to a string before attempting to parse
				parsedURL = parse_url(`${input}`);
			}
			input = {};
		} else {
			parsedURL = parse_url(input.url);
		}

		let method = init.method || input.method || 'GET';
		method = method.toUpperCase();

		if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;

		Body.call(this, inputBody, {
			timeout: init.timeout || input.timeout || 0,
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody != null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		let signal = isRequest(input) ? input.signal : null;
		if ('signal' in init) signal = init.signal;

		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal');
		}

		this[INTERNALS$2] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal
		};

		// node-fetch-only options
		this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
		this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
	}

	get method() {
		return this[INTERNALS$2].method;
	}

	get url() {
		return format_url(this[INTERNALS$2].parsedURL);
	}

	get headers() {
		return this[INTERNALS$2].headers;
	}

	get redirect() {
		return this[INTERNALS$2].redirect;
	}

	get signal() {
		return this[INTERNALS$2].signal;
	}

	/**
  * Clone this request
  *
  * @return  Request
  */
	clone() {
		return new Request(this);
	}
}

Body.mixIn(Request.prototype);

Object.defineProperty(Request.prototype, Symbol.toStringTag, {
	value: 'Request',
	writable: false,
	enumerable: false,
	configurable: true
});

Object.defineProperties(Request.prototype, {
	method: { enumerable: true },
	url: { enumerable: true },
	headers: { enumerable: true },
	redirect: { enumerable: true },
	clone: { enumerable: true },
	signal: { enumerable: true }
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param   Request  A Request instance
 * @return  Object   The options object to be passed to http.request
 */
function getNodeRequestOptions(request) {
	const parsedURL = request[INTERNALS$2].parsedURL;
	const headers = new Headers(request[INTERNALS$2].headers);

	// fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// Basic fetch
	if (!parsedURL.protocol || !parsedURL.hostname) {
		throw new TypeError('Only absolute URLs are supported');
	}

	if (!/^https?:$/.test(parsedURL.protocol)) {
		throw new TypeError('Only HTTP(S) protocols are supported');
	}

	if (request.signal && request.body instanceof Stream__default['default'].Readable && !streamDestructionSupported) {
		throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
		contentLengthValue = '0';
	}
	if (request.body != null) {
		const totalBytes = getTotalBytes(request);
		if (typeof totalBytes === 'number') {
			contentLengthValue = String(totalBytes);
		}
	}
	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip,deflate');
	}

	let agent = request.agent;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	if (!headers.has('Connection') && !agent) {
		headers.set('Connection', 'close');
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	return Object.assign({}, parsedURL, {
		method: request.method,
		headers: exportNodeCompatibleHeaders(headers),
		agent
	});
}

/**
 * abort-error.js
 *
 * AbortError interface for cancelled requests
 */

/**
 * Create AbortError instance
 *
 * @param   String      message      Error message for human
 * @return  AbortError
 */
function AbortError(message) {
  Error.call(this, message);

  this.type = 'aborted';
  this.message = message;

  // hide custom error implementation details from end-users
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';

// fix an issue where "PassThrough", "resolve" aren't a named export for node <10
const PassThrough$1 = Stream__default['default'].PassThrough;
const resolve_url = Url__default['default'].resolve;

/**
 * Fetch function
 *
 * @param   Mixed    url   Absolute url or Request instance
 * @param   Object   opts  Fetch options
 * @return  Promise
 */
function fetch(url, opts) {

	// allow custom promise
	if (!fetch.Promise) {
		throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
	}

	Body.Promise = fetch.Promise;

	// wrap http.request into fetch
	return new fetch.Promise(function (resolve, reject) {
		// build request object
		const request = new Request(url, opts);
		const options = getNodeRequestOptions(request);

		const send = (options.protocol === 'https:' ? https__default['default'] : http__default['default']).request;
		const signal = request.signal;

		let response = null;

		const abort = function abort() {
			let error = new AbortError('The user aborted a request.');
			reject(error);
			if (request.body && request.body instanceof Stream__default['default'].Readable) {
				request.body.destroy(error);
			}
			if (!response || !response.body) return;
			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = function abortAndFinalize() {
			abort();
			finalize();
		};

		// send request
		const req = send(options);
		let reqTimeout;

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		function finalize() {
			req.abort();
			if (signal) signal.removeEventListener('abort', abortAndFinalize);
			clearTimeout(reqTimeout);
		}

		if (request.timeout) {
			req.once('socket', function (socket) {
				reqTimeout = setTimeout(function () {
					reject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));
					finalize();
				}, request.timeout);
			});
		}

		req.on('error', function (err) {
			reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));
			finalize();
		});

		req.on('response', function (res) {
			clearTimeout(reqTimeout);

			const headers = createHeadersLenient(res.headers);

			// HTTP fetch step 5
			if (fetch.isRedirect(res.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				const locationURL = location === null ? null : resolve_url(request.url, location);

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.
						if (locationURL !== null) {
							// handle corrupted header
							try {
								headers.set('Location', locationURL);
							} catch (err) {
								// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request
								reject(err);
							}
						}
						break;
					case 'follow':
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOpts = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: request.body,
							signal: request.signal,
							timeout: request.timeout,
							size: request.size
						};

						// HTTP-redirect fetch step 9
						if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
							requestOpts.method = 'GET';
							requestOpts.body = undefined;
							requestOpts.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOpts)));
						finalize();
						return;
				}
			}

			// prepare response
			res.once('end', function () {
				if (signal) signal.removeEventListener('abort', abortAndFinalize);
			});
			let body = res.pipe(new PassThrough$1());

			const response_options = {
				url: request.url,
				status: res.statusCode,
				statusText: res.statusMessage,
				headers: headers,
				size: request.size,
				timeout: request.timeout,
				counter: request.counter
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: zlib__default['default'].Z_SYNC_FLUSH,
				finishFlush: zlib__default['default'].Z_SYNC_FLUSH
			};

			// for gzip
			if (codings == 'gzip' || codings == 'x-gzip') {
				body = body.pipe(zlib__default['default'].createGunzip(zlibOptions));
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// for deflate
			if (codings == 'deflate' || codings == 'x-deflate') {
				// handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = res.pipe(new PassThrough$1());
				raw.once('data', function (chunk) {
					// see http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = body.pipe(zlib__default['default'].createInflate());
					} else {
						body = body.pipe(zlib__default['default'].createInflateRaw());
					}
					response = new Response(body, response_options);
					resolve(response);
				});
				return;
			}

			// for br
			if (codings == 'br' && typeof zlib__default['default'].createBrotliDecompress === 'function') {
				body = body.pipe(zlib__default['default'].createBrotliDecompress());
				response = new Response(body, response_options);
				resolve(response);
				return;
			}

			// otherwise, use response as-is
			response = new Response(body, response_options);
			resolve(response);
		});

		writeToStream(req, request);
	});
}
/**
 * Redirect code matching
 *
 * @param   Number   code  Status code
 * @return  Boolean
 */
fetch.isRedirect = function (code) {
	return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

// expose Promise
fetch.Promise = global.Promise;

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
var encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
var decode$1 = function (charCode) {
  var bigA = 65;     // 'A'
  var bigZ = 90;     // 'Z'

  var littleA = 97;  // 'a'
  var littleZ = 122; // 'z'

  var zero = 48;     // '0'
  var nine = 57;     // '9'

  var plus = 43;     // '+'
  var slash = 47;    // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return (charCode - bigA);
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return (charCode - littleA + littleOffset);
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return (charCode - zero + numberOffset);
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};

var base64 = {
	encode: encode,
	decode: decode$1
};

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */



// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011

var VLQ_BASE_SHIFT = 5;

// binary: 100000
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

// binary: 011111
var VLQ_BASE_MASK = VLQ_BASE - 1;

// binary: 100000
var VLQ_CONTINUATION_BIT = VLQ_BASE;

/**
 * Converts from a two-complement value to a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
 */
function toVLQSigned(aValue) {
  return aValue < 0
    ? ((-aValue) << 1) + 1
    : (aValue << 1) + 0;
}

/**
 * Converts to a two-complement value from a value where the sign bit is
 * placed in the least significant bit.  For example, as decimals:
 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
 */
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative
    ? -shifted
    : shifted;
}

/**
 * Returns the base 64 VLQ encoded value.
 */
var encode$1 = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;

  var vlq = toVLQSigned(aValue);

  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      // There are still more digits in this value, so we must make sure the
      // continuation bit is marked.
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);

  return encoded;
};

/**
 * Decodes the next base 64 VLQ value from the given string and returns the
 * value and the rest of the string via the out parameter.
 */
var decode$2 = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;

  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }

    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }

    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);

  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};

var base64Vlq = {
	encode: encode$1,
	decode: decode$2
};

function createCommonjsModule$1(fn, basedir, module) {
	return module = {
	  path: basedir,
	  exports: {},
	  require: function (path, base) {
      return commonjsRequire$1(path, (base === undefined || base === null) ? module.path : base);
    }
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire$1 () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var util = createCommonjsModule$1(function (module, exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

/**
 * This is a helper function for getting values from parameter/options
 * objects.
 *
 * @param args The object we are extracting values from
 * @param name The name of the property we are getting.
 * @param defaultValue An optional value to return if the property is missing
 * from the object. If this is not specified and the property is missing, an
 * error will be thrown.
 */
function getArg(aArgs, aName, aDefaultValue) {
  if (aName in aArgs) {
    return aArgs[aName];
  } else if (arguments.length === 3) {
    return aDefaultValue;
  } else {
    throw new Error('"' + aName + '" is a required argument.');
  }
}
exports.getArg = getArg;

var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var dataUrlRegexp = /^data:.+\,.+$/;

function urlParse(aUrl) {
  var match = aUrl.match(urlRegexp);
  if (!match) {
    return null;
  }
  return {
    scheme: match[1],
    auth: match[2],
    host: match[3],
    port: match[4],
    path: match[5]
  };
}
exports.urlParse = urlParse;

function urlGenerate(aParsedUrl) {
  var url = '';
  if (aParsedUrl.scheme) {
    url += aParsedUrl.scheme + ':';
  }
  url += '//';
  if (aParsedUrl.auth) {
    url += aParsedUrl.auth + '@';
  }
  if (aParsedUrl.host) {
    url += aParsedUrl.host;
  }
  if (aParsedUrl.port) {
    url += ":" + aParsedUrl.port;
  }
  if (aParsedUrl.path) {
    url += aParsedUrl.path;
  }
  return url;
}
exports.urlGenerate = urlGenerate;

/**
 * Normalizes a path, or the path portion of a URL:
 *
 * - Replaces consecutive slashes with one slash.
 * - Removes unnecessary '.' parts.
 * - Removes unnecessary '<dir>/..' parts.
 *
 * Based on code in the Node.js 'path' core module.
 *
 * @param aPath The path or url to normalize.
 */
function normalize(aPath) {
  var path = aPath;
  var url = urlParse(aPath);
  if (url) {
    if (!url.path) {
      return aPath;
    }
    path = url.path;
  }
  var isAbsolute = exports.isAbsolute(path);

  var parts = path.split(/\/+/);
  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
    part = parts[i];
    if (part === '.') {
      parts.splice(i, 1);
    } else if (part === '..') {
      up++;
    } else if (up > 0) {
      if (part === '') {
        // The first part is blank if the path is absolute. Trying to go
        // above the root is a no-op. Therefore we can remove all '..' parts
        // directly after the root.
        parts.splice(i + 1, up);
        up = 0;
      } else {
        parts.splice(i, 2);
        up--;
      }
    }
  }
  path = parts.join('/');

  if (path === '') {
    path = isAbsolute ? '/' : '.';
  }

  if (url) {
    url.path = path;
    return urlGenerate(url);
  }
  return path;
}
exports.normalize = normalize;

/**
 * Joins two paths/URLs.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be joined with the root.
 *
 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
 *   first.
 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
 *   is updated with the result and aRoot is returned. Otherwise the result
 *   is returned.
 *   - If aPath is absolute, the result is aPath.
 *   - Otherwise the two paths are joined with a slash.
 * - Joining for example 'http://' and 'www.example.com' is also supported.
 */
function join(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }
  if (aPath === "") {
    aPath = ".";
  }
  var aPathUrl = urlParse(aPath);
  var aRootUrl = urlParse(aRoot);
  if (aRootUrl) {
    aRoot = aRootUrl.path || '/';
  }

  // `join(foo, '//www.example.org')`
  if (aPathUrl && !aPathUrl.scheme) {
    if (aRootUrl) {
      aPathUrl.scheme = aRootUrl.scheme;
    }
    return urlGenerate(aPathUrl);
  }

  if (aPathUrl || aPath.match(dataUrlRegexp)) {
    return aPath;
  }

  // `join('http://', 'www.example.com')`
  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
    aRootUrl.host = aPath;
    return urlGenerate(aRootUrl);
  }

  var joined = aPath.charAt(0) === '/'
    ? aPath
    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

  if (aRootUrl) {
    aRootUrl.path = joined;
    return urlGenerate(aRootUrl);
  }
  return joined;
}
exports.join = join;

exports.isAbsolute = function (aPath) {
  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
};

/**
 * Make a path relative to a URL or another path.
 *
 * @param aRoot The root path or URL.
 * @param aPath The path or URL to be made relative to aRoot.
 */
function relative(aRoot, aPath) {
  if (aRoot === "") {
    aRoot = ".";
  }

  aRoot = aRoot.replace(/\/$/, '');

  // It is possible for the path to be above the root. In this case, simply
  // checking whether the root is a prefix of the path won't work. Instead, we
  // need to remove components from the root one by one, until either we find
  // a prefix that fits, or we run out of components to remove.
  var level = 0;
  while (aPath.indexOf(aRoot + '/') !== 0) {
    var index = aRoot.lastIndexOf("/");
    if (index < 0) {
      return aPath;
    }

    // If the only part of the root that is left is the scheme (i.e. http://,
    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
    // have exhausted all components, so the path is not relative to the root.
    aRoot = aRoot.slice(0, index);
    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
      return aPath;
    }

    ++level;
  }

  // Make sure we add a "../" for each component we removed from the root.
  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
}
exports.relative = relative;

var supportsNullProto = (function () {
  var obj = Object.create(null);
  return !('__proto__' in obj);
}());

function identity (s) {
  return s;
}

/**
 * Because behavior goes wacky when you set `__proto__` on objects, we
 * have to prefix all the strings in our set with an arbitrary character.
 *
 * See https://github.com/mozilla/source-map/pull/31 and
 * https://github.com/mozilla/source-map/issues/30
 *
 * @param String aStr
 */
function toSetString(aStr) {
  if (isProtoString(aStr)) {
    return '$' + aStr;
  }

  return aStr;
}
exports.toSetString = supportsNullProto ? identity : toSetString;

function fromSetString(aStr) {
  if (isProtoString(aStr)) {
    return aStr.slice(1);
  }

  return aStr;
}
exports.fromSetString = supportsNullProto ? identity : fromSetString;

function isProtoString(s) {
  if (!s) {
    return false;
  }

  var length = s.length;

  if (length < 9 /* "__proto__".length */) {
    return false;
  }

  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
      s.charCodeAt(length - 9) !== 95  /* '_' */) {
    return false;
  }

  for (var i = length - 10; i >= 0; i--) {
    if (s.charCodeAt(i) !== 36 /* '$' */) {
      return false;
    }
  }

  return true;
}

/**
 * Comparator between two mappings where the original positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same original source/line/column, but different generated
 * line and column the same. Useful when searching for a mapping with a
 * stubbed out mapping.
 */
function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
  var cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0 || onlyCompareOriginal) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByOriginalPositions = compareByOriginalPositions;

/**
 * Comparator between two mappings with deflated source and name indices where
 * the generated positions are compared.
 *
 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
 * mappings with the same generated line and column, but different
 * source/name/original line and column the same. Useful when searching for a
 * mapping with a stubbed out mapping.
 */
function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0 || onlyCompareGenerated) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

function strcmp(aStr1, aStr2) {
  if (aStr1 === aStr2) {
    return 0;
  }

  if (aStr1 === null) {
    return 1; // aStr2 !== null
  }

  if (aStr2 === null) {
    return -1; // aStr1 !== null
  }

  if (aStr1 > aStr2) {
    return 1;
  }

  return -1;
}

/**
 * Comparator between two mappings with inflated source and name strings where
 * the generated positions are compared.
 */
function compareByGeneratedPositionsInflated(mappingA, mappingB) {
  var cmp = mappingA.generatedLine - mappingB.generatedLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = strcmp(mappingA.source, mappingB.source);
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalLine - mappingB.originalLine;
  if (cmp !== 0) {
    return cmp;
  }

  cmp = mappingA.originalColumn - mappingB.originalColumn;
  if (cmp !== 0) {
    return cmp;
  }

  return strcmp(mappingA.name, mappingB.name);
}
exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

/**
 * Strip any JSON XSSI avoidance prefix from the string (as documented
 * in the source maps specification), and then parse the string as
 * JSON.
 */
function parseSourceMapInput(str) {
  return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
}
exports.parseSourceMapInput = parseSourceMapInput;

/**
 * Compute the URL of a source given the the source root, the source's
 * URL, and the source map's URL.
 */
function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
  sourceURL = sourceURL || '';

  if (sourceRoot) {
    // This follows what Chrome does.
    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
      sourceRoot += '/';
    }
    // The spec says:
    //   Line 4: An optional source root, useful for relocating source
    //   files on a server or removing repeated values in the
    //   “sources” entry.  This value is prepended to the individual
    //   entries in the “source” field.
    sourceURL = sourceRoot + sourceURL;
  }

  // Historically, SourceMapConsumer did not take the sourceMapURL as
  // a parameter.  This mode is still somewhat supported, which is why
  // this code block is conditional.  However, it's preferable to pass
  // the source map URL to SourceMapConsumer, so that this function
  // can implement the source URL resolution algorithm as outlined in
  // the spec.  This block is basically the equivalent of:
  //    new URL(sourceURL, sourceMapURL).toString()
  // ... except it avoids using URL, which wasn't available in the
  // older releases of node still supported by this library.
  //
  // The spec says:
  //   If the sources are not absolute URLs after prepending of the
  //   “sourceRoot”, the sources are resolved relative to the
  //   SourceMap (like resolving script src in a html document).
  if (sourceMapURL) {
    var parsed = urlParse(sourceMapURL);
    if (!parsed) {
      throw new Error("sourceMapURL could not be parsed");
    }
    if (parsed.path) {
      // Strip the last path component, but keep the "/".
      var index = parsed.path.lastIndexOf('/');
      if (index >= 0) {
        parsed.path = parsed.path.substring(0, index + 1);
      }
    }
    sourceURL = join(urlGenerate(parsed), sourceURL);
  }

  return normalize(sourceURL);
}
exports.computeSourceURL = computeSourceURL;
});

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */


var has = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";

/**
 * A data structure which is a combination of an array and a set. Adding a new
 * member is O(1), testing for membership is O(1), and finding the index of an
 * element is O(1). Removing elements from the set is not supported. Only
 * strings are supported for membership.
 */
function ArraySet() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}

/**
 * Static method for creating ArraySet instances from an existing array.
 */
ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set = new ArraySet();
  for (var i = 0, len = aArray.length; i < len; i++) {
    set.add(aArray[i], aAllowDuplicates);
  }
  return set;
};

/**
 * Return how many unique items are in this ArraySet. If duplicates have been
 * added, than those do not count towards the size.
 *
 * @returns Number
 */
ArraySet.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};

/**
 * Add the given string to this set.
 *
 * @param String aStr
 */
ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};

/**
 * Is the given string a member of this set?
 *
 * @param String aStr
 */
ArraySet.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util.toSetString(aStr);
    return has.call(this._set, sStr);
  }
};

/**
 * What is the index of the given string in the array?
 *
 * @param String aStr
 */
ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
        return idx;
    }
  } else {
    var sStr = util.toSetString(aStr);
    if (has.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }

  throw new Error('"' + aStr + '" is not in the set.');
};

/**
 * What is the element at the given index?
 *
 * @param Number aIdx
 */
ArraySet.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error('No element indexed by ' + aIdx);
};

/**
 * Returns the array representation of this set (which has the proper indices
 * indicated by indexOf). Note that this is a copy of the internal array used
 * for storing the members so that no one can mess with internal state.
 */
ArraySet.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};

var ArraySet_1 = ArraySet;

var arraySet = {
	ArraySet: ArraySet_1
};

var binarySearch = createCommonjsModule$1(function (module, exports) {
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

exports.GREATEST_LOWER_BOUND = 1;
exports.LEAST_UPPER_BOUND = 2;

/**
 * Recursive implementation of binary search.
 *
 * @param aLow Indices here and lower do not contain the needle.
 * @param aHigh Indices here and higher do not contain the needle.
 * @param aNeedle The element being searched for.
 * @param aHaystack The non-empty array being searched.
 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 */
function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
  // This function terminates when one of the following is true:
  //
  //   1. We find the exact element we are looking for.
  //
  //   2. We did not find the exact element, but we can return the index of
  //      the next-closest element.
  //
  //   3. We did not find the exact element, and there is no next-closest
  //      element than the one we are searching for, so we return -1.
  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
  var cmp = aCompare(aNeedle, aHaystack[mid], true);
  if (cmp === 0) {
    // Found the element we are looking for.
    return mid;
  }
  else if (cmp > 0) {
    // Our needle is greater than aHaystack[mid].
    if (aHigh - mid > 1) {
      // The element is in the upper half.
      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
    }

    // The exact needle element was not found in this haystack. Determine if
    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return aHigh < aHaystack.length ? aHigh : -1;
    } else {
      return mid;
    }
  }
  else {
    // Our needle is less than aHaystack[mid].
    if (mid - aLow > 1) {
      // The element is in the lower half.
      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
    }

    // we are in termination case (3) or (2) and return the appropriate thing.
    if (aBias == exports.LEAST_UPPER_BOUND) {
      return mid;
    } else {
      return aLow < 0 ? -1 : aLow;
    }
  }
}

/**
 * This is an implementation of binary search which will always try and return
 * the index of the closest element if there is no exact hit. This is because
 * mappings between original and generated line/col pairs are single points,
 * and there is an implicit region between each of them, so a miss just means
 * that you aren't on the very start of a region.
 *
 * @param aNeedle The element you are looking for.
 * @param aHaystack The array that is being searched.
 * @param aCompare A function which takes the needle and an element in the
 *     array and returns -1, 0, or 1 depending on whether the needle is less
 *     than, equal to, or greater than the element, respectively.
 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
 */
exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
  if (aHaystack.length === 0) {
    return -1;
  }

  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
  if (index < 0) {
    return -1;
  }

  // We have found either the exact element, or the next-closest element than
  // the one we are searching for. However, there may be more than one such
  // element. Make sure we always return the smallest of these.
  while (index - 1 >= 0) {
    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
      break;
    }
    --index;
  }

  return index;
};
});

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

// It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.

/**
 * Swap the elements indexed by `x` and `y` in the array `ary`.
 *
 * @param {Array} ary
 *        The array.
 * @param {Number} x
 *        The index of the first item.
 * @param {Number} y
 *        The index of the second item.
 */
function swap(ary, x, y) {
  var temp = ary[x];
  ary[x] = ary[y];
  ary[y] = temp;
}

/**
 * Returns a random integer within the range `low .. high` inclusive.
 *
 * @param {Number} low
 *        The lower bound on the range.
 * @param {Number} high
 *        The upper bound on the range.
 */
function randomIntInRange(low, high) {
  return Math.round(low + (Math.random() * (high - low)));
}

/**
 * The Quick Sort algorithm.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 * @param {Number} p
 *        Start index of the array
 * @param {Number} r
 *        End index of the array
 */
function doQuickSort(ary, comparator, p, r) {
  // If our lower bound is less than our upper bound, we (1) partition the
  // array into two pieces and (2) recurse on each half. If it is not, this is
  // the empty array and our base case.

  if (p < r) {
    // (1) Partitioning.
    //
    // The partitioning chooses a pivot between `p` and `r` and moves all
    // elements that are less than or equal to the pivot to the before it, and
    // all the elements that are greater than it after it. The effect is that
    // once partition is done, the pivot is in the exact place it will be when
    // the array is put in sorted order, and it will not need to be moved
    // again. This runs in O(n) time.

    // Always choose a random pivot so that an input array which is reverse
    // sorted does not cause O(n^2) running time.
    var pivotIndex = randomIntInRange(p, r);
    var i = p - 1;

    swap(ary, pivotIndex, r);
    var pivot = ary[r];

    // Immediately after `j` is incremented in this loop, the following hold
    // true:
    //
    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
    //
    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
    for (var j = p; j < r; j++) {
      if (comparator(ary[j], pivot) <= 0) {
        i += 1;
        swap(ary, i, j);
      }
    }

    swap(ary, i + 1, j);
    var q = i + 1;

    // (2) Recurse on each half.

    doQuickSort(ary, comparator, p, q - 1);
    doQuickSort(ary, comparator, q + 1, r);
  }
}

/**
 * Sort the given array in-place with the given comparator function.
 *
 * @param {Array} ary
 *        An array to sort.
 * @param {function} comparator
 *        Function to use to compare two items.
 */
var quickSort_1 = function (ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};

var quickSort = {
	quickSort: quickSort_1
};

/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */



var ArraySet$1 = arraySet.ArraySet;

var quickSort$1 = quickSort.quickSort;

function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  return sourceMap.sections != null
    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
}

SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};

/**
 * The version of the source mapping spec that we are consuming.
 */
SourceMapConsumer.prototype._version = 3;

// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.

SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__generatedMappings;
  }
});

SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
  configurable: true,
  enumerable: true,
  get: function () {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }

    return this.__originalMappings;
  }
});

SourceMapConsumer.prototype._charIsMappingSeparator =
  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
    var c = aStr.charAt(index);
    return c === ";" || c === ",";
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
SourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    throw new Error("Subclasses must implement _parseMappings");
  };

SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;

SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;

/**
 * Iterate over each mapping between an original source/line/column and a
 * generated line/column in this source map.
 *
 * @param Function aCallback
 *        The function that is called with each mapping.
 * @param Object aContext
 *        Optional. If specified, this object will be the value of `this` every
 *        time that `aCallback` is called.
 * @param aOrder
 *        Either `SourceMapConsumer.GENERATED_ORDER` or
 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
 *        iterate over the mappings sorted by the generated file's line/column
 *        order or the original's source/line/column order, respectively. Defaults to
 *        `SourceMapConsumer.GENERATED_ORDER`.
 */
SourceMapConsumer.prototype.eachMapping =
  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
    var context = aContext || null;
    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

    var mappings;
    switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
    }

    var sourceRoot = this.sourceRoot;
    mappings.map(function (mapping) {
      var source = mapping.source === null ? null : this._sources.at(mapping.source);
      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
      return {
        source: source,
        generatedLine: mapping.generatedLine,
        generatedColumn: mapping.generatedColumn,
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: mapping.name === null ? null : this._names.at(mapping.name)
      };
    }, this).forEach(aCallback, context);
  };

/**
 * Returns all generated line and column information for the original source,
 * line, and column provided. If no column is provided, returns all mappings
 * corresponding to a either the line we are searching for or the next
 * closest line that has any mappings. Otherwise, returns all mappings
 * corresponding to the given line and either the column we are searching for
 * or the next closest column that has any offsets.
 *
 * The only argument is an object with the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number is 1-based.
 *   - column: Optional. the column number in the original source.
 *    The column number is 0-based.
 *
 * and an array of objects is returned, each with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *    line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *    The column number is 0-based.
 */
SourceMapConsumer.prototype.allGeneratedPositionsFor =
  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
    var line = util.getArg(aArgs, 'line');

    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
    // returns the index of the closest mapping less than the needle. By
    // setting needle.originalColumn to 0, we thus find the last mapping for
    // the given line, provided such a mapping exists.
    var needle = {
      source: util.getArg(aArgs, 'source'),
      originalLine: line,
      originalColumn: util.getArg(aArgs, 'column', 0)
    };

    needle.source = this._findSourceIndex(needle.source);
    if (needle.source < 0) {
      return [];
    }

    var mappings = [];

    var index = this._findMapping(needle,
                                  this._originalMappings,
                                  "originalLine",
                                  "originalColumn",
                                  util.compareByOriginalPositions,
                                  binarySearch.LEAST_UPPER_BOUND);
    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (aArgs.column === undefined) {
        var originalLine = mapping.originalLine;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we found. Since
        // mappings are sorted, this is guaranteed to find all mappings for
        // the line we found.
        while (mapping && mapping.originalLine === originalLine) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      } else {
        var originalColumn = mapping.originalColumn;

        // Iterate until either we run out of mappings, or we run into
        // a mapping for a different line than the one we were searching for.
        // Since mappings are sorted, this is guaranteed to find all mappings for
        // the line we are searching for.
        while (mapping &&
               mapping.originalLine === line &&
               mapping.originalColumn == originalColumn) {
          mappings.push({
            line: util.getArg(mapping, 'generatedLine', null),
            column: util.getArg(mapping, 'generatedColumn', null),
            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
          });

          mapping = this._originalMappings[++index];
        }
      }
    }

    return mappings;
  };

var SourceMapConsumer_1 = SourceMapConsumer;

/**
 * A BasicSourceMapConsumer instance represents a parsed source map which we can
 * query for information about the original file positions by giving it a file
 * position in the generated source.
 *
 * The first parameter is the raw source map (either as a JSON string, or
 * already parsed to an object). According to the spec, source maps have the
 * following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - sources: An array of URLs to the original source files.
 *   - names: An array of identifiers which can be referrenced by individual mappings.
 *   - sourceRoot: Optional. The URL root from which all sources are relative.
 *   - sourcesContent: Optional. An array of contents of the original source files.
 *   - mappings: A string of base64 VLQs which contain the actual mappings.
 *   - file: Optional. The generated file this source map is associated with.
 *
 * Here is an example source map, taken from the source map spec[0]:
 *
 *     {
 *       version : 3,
 *       file: "out.js",
 *       sourceRoot : "",
 *       sources: ["foo.js", "bar.js"],
 *       names: ["src", "maps", "are", "fun"],
 *       mappings: "AA,AB;;ABCDE;"
 *     }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
 */
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sources = util.getArg(sourceMap, 'sources');
  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
  // requires the array) to play nice here.
  var names = util.getArg(sourceMap, 'names', []);
  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
  var mappings = util.getArg(sourceMap, 'mappings');
  var file = util.getArg(sourceMap, 'file', null);

  // Once again, Sass deviates from the spec and supplies the version as a
  // string rather than a number, so we use loose equality checking here.
  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  if (sourceRoot) {
    sourceRoot = util.normalize(sourceRoot);
  }

  sources = sources
    .map(String)
    // Some source maps produce relative source paths like "./foo.js" instead of
    // "foo.js".  Normalize these first so that future comparisons will succeed.
    // See bugzil.la/1090768.
    .map(util.normalize)
    // Always ensure that absolute sources are internally stored relative to
    // the source root, if the source root is absolute. Not doing this would
    // be particularly problematic when the source root is a prefix of the
    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
    .map(function (source) {
      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
        ? util.relative(sourceRoot, source)
        : source;
    });

  // Pass `true` below to allow duplicate names and sources. While source maps
  // are intended to be compressed and deduplicated, the TypeScript compiler
  // sometimes generates source maps with duplicates in them. See Github issue
  // #72 and bugzil.la/889492.
  this._names = ArraySet$1.fromArray(names.map(String), true);
  this._sources = ArraySet$1.fromArray(sources, true);

  this._absoluteSources = this._sources.toArray().map(function (s) {
    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
  });

  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}

BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

/**
 * Utility function to find the index of a source.  Returns -1 if not
 * found.
 */
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util.relative(this.sourceRoot, relativeSource);
  }

  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }

  // Maybe aSource is an absolute URL as returned by |sources|.  In
  // this case we can't simply undo the transform.
  var i;
  for (i = 0; i < this._absoluteSources.length; ++i) {
    if (this._absoluteSources[i] == aSource) {
      return i;
    }
  }

  return -1;
};

/**
 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
 *
 * @param SourceMapGenerator aSourceMap
 *        The source map that will be consumed.
 * @param String aSourceMapURL
 *        The URL at which the source map can be found (optional)
 * @returns BasicSourceMapConsumer
 */
BasicSourceMapConsumer.fromSourceMap =
  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
    var smc = Object.create(BasicSourceMapConsumer.prototype);

    var names = smc._names = ArraySet$1.fromArray(aSourceMap._names.toArray(), true);
    var sources = smc._sources = ArraySet$1.fromArray(aSourceMap._sources.toArray(), true);
    smc.sourceRoot = aSourceMap._sourceRoot;
    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                            smc.sourceRoot);
    smc.file = aSourceMap._file;
    smc._sourceMapURL = aSourceMapURL;
    smc._absoluteSources = smc._sources.toArray().map(function (s) {
      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
    });

    // Because we are modifying the entries (by converting string sources and
    // names to indices into the sources and names ArraySets), we have to make
    // a copy of the entry or else bad things happen. Shared mutable state
    // strikes again! See github issue #191.

    var generatedMappings = aSourceMap._mappings.toArray().slice();
    var destGeneratedMappings = smc.__generatedMappings = [];
    var destOriginalMappings = smc.__originalMappings = [];

    for (var i = 0, length = generatedMappings.length; i < length; i++) {
      var srcMapping = generatedMappings[i];
      var destMapping = new Mapping;
      destMapping.generatedLine = srcMapping.generatedLine;
      destMapping.generatedColumn = srcMapping.generatedColumn;

      if (srcMapping.source) {
        destMapping.source = sources.indexOf(srcMapping.source);
        destMapping.originalLine = srcMapping.originalLine;
        destMapping.originalColumn = srcMapping.originalColumn;

        if (srcMapping.name) {
          destMapping.name = names.indexOf(srcMapping.name);
        }

        destOriginalMappings.push(destMapping);
      }

      destGeneratedMappings.push(destMapping);
    }

    quickSort$1(smc.__originalMappings, util.compareByOriginalPositions);

    return smc;
  };

/**
 * The version of the source mapping spec that we are consuming.
 */
BasicSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
  get: function () {
    return this._absoluteSources.slice();
  }
});

/**
 * Provide the JIT with a nice shape / hidden class.
 */
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
BasicSourceMapConsumer.prototype._parseMappings =
  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    var generatedLine = 1;
    var previousGeneratedColumn = 0;
    var previousOriginalLine = 0;
    var previousOriginalColumn = 0;
    var previousSource = 0;
    var previousName = 0;
    var length = aStr.length;
    var index = 0;
    var cachedSegments = {};
    var temp = {};
    var originalMappings = [];
    var generatedMappings = [];
    var mapping, str, segment, end, value;

    while (index < length) {
      if (aStr.charAt(index) === ';') {
        generatedLine++;
        index++;
        previousGeneratedColumn = 0;
      }
      else if (aStr.charAt(index) === ',') {
        index++;
      }
      else {
        mapping = new Mapping();
        mapping.generatedLine = generatedLine;

        // Because each offset is encoded relative to the previous one,
        // many segments often have the same encoding. We can exploit this
        // fact by caching the parsed variable length fields of each segment,
        // allowing us to avoid a second parse if we encounter the same
        // segment again.
        for (end = index; end < length; end++) {
          if (this._charIsMappingSeparator(aStr, end)) {
            break;
          }
        }
        str = aStr.slice(index, end);

        segment = cachedSegments[str];
        if (segment) {
          index += str.length;
        } else {
          segment = [];
          while (index < end) {
            base64Vlq.decode(aStr, index, temp);
            value = temp.value;
            index = temp.rest;
            segment.push(value);
          }

          if (segment.length === 2) {
            throw new Error('Found a source, but no line and column');
          }

          if (segment.length === 3) {
            throw new Error('Found a source and line, but no column');
          }

          cachedSegments[str] = segment;
        }

        // Generated column.
        mapping.generatedColumn = previousGeneratedColumn + segment[0];
        previousGeneratedColumn = mapping.generatedColumn;

        if (segment.length > 1) {
          // Original source.
          mapping.source = previousSource + segment[1];
          previousSource += segment[1];

          // Original line.
          mapping.originalLine = previousOriginalLine + segment[2];
          previousOriginalLine = mapping.originalLine;
          // Lines are stored 0-based
          mapping.originalLine += 1;

          // Original column.
          mapping.originalColumn = previousOriginalColumn + segment[3];
          previousOriginalColumn = mapping.originalColumn;

          if (segment.length > 4) {
            // Original name.
            mapping.name = previousName + segment[4];
            previousName += segment[4];
          }
        }

        generatedMappings.push(mapping);
        if (typeof mapping.originalLine === 'number') {
          originalMappings.push(mapping);
        }
      }
    }

    quickSort$1(generatedMappings, util.compareByGeneratedPositionsDeflated);
    this.__generatedMappings = generatedMappings;

    quickSort$1(originalMappings, util.compareByOriginalPositions);
    this.__originalMappings = originalMappings;
  };

/**
 * Find the mapping that best matches the hypothetical "needle" mapping that
 * we are searching for in the given "haystack" of mappings.
 */
BasicSourceMapConsumer.prototype._findMapping =
  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                         aColumnName, aComparator, aBias) {
    // To return the position we are searching for, we must first find the
    // mapping for the given position and then return the opposite position it
    // points to. Because the mappings are sorted, we can use binary search to
    // find the best mapping.

    if (aNeedle[aLineName] <= 0) {
      throw new TypeError('Line must be greater than or equal to 1, got '
                          + aNeedle[aLineName]);
    }
    if (aNeedle[aColumnName] < 0) {
      throw new TypeError('Column must be greater than or equal to 0, got '
                          + aNeedle[aColumnName]);
    }

    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
  };

/**
 * Compute the last column for each generated mapping. The last column is
 * inclusive.
 */
BasicSourceMapConsumer.prototype.computeColumnSpans =
  function SourceMapConsumer_computeColumnSpans() {
    for (var index = 0; index < this._generatedMappings.length; ++index) {
      var mapping = this._generatedMappings[index];

      // Mappings do not contain a field for the last generated columnt. We
      // can come up with an optimistic estimate, however, by assuming that
      // mappings are contiguous (i.e. given two consecutive mappings, the
      // first mapping ends where the second one starts).
      if (index + 1 < this._generatedMappings.length) {
        var nextMapping = this._generatedMappings[index + 1];

        if (mapping.generatedLine === nextMapping.generatedLine) {
          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
          continue;
        }
      }

      // The last mapping for each line spans the entire line.
      mapping.lastGeneratedColumn = Infinity;
    }
  };

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
BasicSourceMapConsumer.prototype.originalPositionFor =
  function SourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._generatedMappings,
      "generatedLine",
      "generatedColumn",
      util.compareByGeneratedPositionsDeflated,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._generatedMappings[index];

      if (mapping.generatedLine === needle.generatedLine) {
        var source = util.getArg(mapping, 'source', null);
        if (source !== null) {
          source = this._sources.at(source);
          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
        }
        var name = util.getArg(mapping, 'name', null);
        if (name !== null) {
          name = this._names.at(name);
        }
        return {
          source: source,
          line: util.getArg(mapping, 'originalLine', null),
          column: util.getArg(mapping, 'originalColumn', null),
          name: name
        };
      }
    }

    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
  function BasicSourceMapConsumer_hasContentsOfAllSources() {
    if (!this.sourcesContent) {
      return false;
    }
    return this.sourcesContent.length >= this._sources.size() &&
      !this.sourcesContent.some(function (sc) { return sc == null; });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
BasicSourceMapConsumer.prototype.sourceContentFor =
  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    if (!this.sourcesContent) {
      return null;
    }

    var index = this._findSourceIndex(aSource);
    if (index >= 0) {
      return this.sourcesContent[index];
    }

    var relativeSource = aSource;
    if (this.sourceRoot != null) {
      relativeSource = util.relative(this.sourceRoot, relativeSource);
    }

    var url;
    if (this.sourceRoot != null
        && (url = util.urlParse(this.sourceRoot))) {
      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
      // many users. We can help them out when they expect file:// URIs to
      // behave like it would if they were running a local HTTP server. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
      var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
      if (url.scheme == "file"
          && this._sources.has(fileUriAbsPath)) {
        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
      }

      if ((!url.path || url.path == "/")
          && this._sources.has("/" + relativeSource)) {
        return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
      }
    }

    // This function is used recursively from
    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
    // don't want to throw if we can't find the source - we just want to
    // return null, so we provide a flag to exit gracefully.
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + relativeSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
 *     closest element that is smaller than or greater than the one we are
 *     searching for, respectively, if the exact element cannot be found.
 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
BasicSourceMapConsumer.prototype.generatedPositionFor =
  function SourceMapConsumer_generatedPositionFor(aArgs) {
    var source = util.getArg(aArgs, 'source');
    source = this._findSourceIndex(source);
    if (source < 0) {
      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }

    var needle = {
      source: source,
      originalLine: util.getArg(aArgs, 'line'),
      originalColumn: util.getArg(aArgs, 'column')
    };

    var index = this._findMapping(
      needle,
      this._originalMappings,
      "originalLine",
      "originalColumn",
      util.compareByOriginalPositions,
      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
    );

    if (index >= 0) {
      var mapping = this._originalMappings[index];

      if (mapping.source === needle.source) {
        return {
          line: util.getArg(mapping, 'generatedLine', null),
          column: util.getArg(mapping, 'generatedColumn', null),
          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
        };
      }
    }

    return {
      line: null,
      column: null,
      lastColumn: null
    };
  };

var BasicSourceMapConsumer_1 = BasicSourceMapConsumer;

/**
 * An IndexedSourceMapConsumer instance represents a parsed source map which
 * we can query for information. It differs from BasicSourceMapConsumer in
 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
 * input.
 *
 * The first parameter is a raw source map (either as a JSON string, or already
 * parsed to an object). According to the spec for indexed source maps, they
 * have the following attributes:
 *
 *   - version: Which version of the source map spec this map is following.
 *   - file: Optional. The generated file this source map is associated with.
 *   - sections: A list of section definitions.
 *
 * Each value under the "sections" field has two fields:
 *   - offset: The offset into the original specified at which this section
 *       begins to apply, defined as an object with a "line" and "column"
 *       field.
 *   - map: A source map definition. This source map could also be indexed,
 *       but doesn't have to be.
 *
 * Instead of the "map" field, it's also possible to have a "url" field
 * specifying a URL to retrieve a source map from, but that's currently
 * unsupported.
 *
 * Here's an example source map, taken from the source map spec[0], but
 * modified to omit a section which uses the "url" field.
 *
 *  {
 *    version : 3,
 *    file: "app.js",
 *    sections: [{
 *      offset: {line:100, column:10},
 *      map: {
 *        version : 3,
 *        file: "section.js",
 *        sources: ["foo.js", "bar.js"],
 *        names: ["src", "maps", "are", "fun"],
 *        mappings: "AAAA,E;;ABCDE;"
 *      }
 *    }],
 *  }
 *
 * The second parameter, if given, is a string whose value is the URL
 * at which the source map was found.  This URL is used to compute the
 * sources array.
 *
 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
 */
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap = aSourceMap;
  if (typeof aSourceMap === 'string') {
    sourceMap = util.parseSourceMapInput(aSourceMap);
  }

  var version = util.getArg(sourceMap, 'version');
  var sections = util.getArg(sourceMap, 'sections');

  if (version != this._version) {
    throw new Error('Unsupported version: ' + version);
  }

  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();

  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function (s) {
    if (s.url) {
      // The url field will require support for asynchronicity.
      // See https://github.com/mozilla/source-map/issues/16
      throw new Error('Support for url field in sections not implemented.');
    }
    var offset = util.getArg(s, 'offset');
    var offsetLine = util.getArg(offset, 'line');
    var offsetColumn = util.getArg(offset, 'column');

    if (offsetLine < lastOffset.line ||
        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
      throw new Error('Section offsets must be ordered and non-overlapping.');
    }
    lastOffset = offset;

    return {
      generatedOffset: {
        // The offset fields are 0-based, but we use 1-based indices when
        // encoding/decoding from VLQ.
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
    }
  });
}

IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

/**
 * The version of the source mapping spec that we are consuming.
 */
IndexedSourceMapConsumer.prototype._version = 3;

/**
 * The list of original sources.
 */
Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
  get: function () {
    var sources = [];
    for (var i = 0; i < this._sections.length; i++) {
      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
        sources.push(this._sections[i].consumer.sources[j]);
      }
    }
    return sources;
  }
});

/**
 * Returns the original source, line, and column information for the generated
 * source's line and column positions provided. The only argument is an object
 * with the following properties:
 *
 *   - line: The line number in the generated source.  The line number
 *     is 1-based.
 *   - column: The column number in the generated source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - source: The original source file, or null.
 *   - line: The line number in the original source, or null.  The
 *     line number is 1-based.
 *   - column: The column number in the original source, or null.  The
 *     column number is 0-based.
 *   - name: The original identifier, or null.
 */
IndexedSourceMapConsumer.prototype.originalPositionFor =
  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
    var needle = {
      generatedLine: util.getArg(aArgs, 'line'),
      generatedColumn: util.getArg(aArgs, 'column')
    };

    // Find the section containing the generated position we're trying to map
    // to an original position.
    var sectionIndex = binarySearch.search(needle, this._sections,
      function(needle, section) {
        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
        if (cmp) {
          return cmp;
        }

        return (needle.generatedColumn -
                section.generatedOffset.generatedColumn);
      });
    var section = this._sections[sectionIndex];

    if (!section) {
      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }

    return section.consumer.originalPositionFor({
      line: needle.generatedLine -
        (section.generatedOffset.generatedLine - 1),
      column: needle.generatedColumn -
        (section.generatedOffset.generatedLine === needle.generatedLine
         ? section.generatedOffset.generatedColumn - 1
         : 0),
      bias: aArgs.bias
    });
  };

/**
 * Return true if we have the source content for every source in the source
 * map, false otherwise.
 */
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
    return this._sections.every(function (s) {
      return s.consumer.hasContentsOfAllSources();
    });
  };

/**
 * Returns the original source content. The only argument is the url of the
 * original source file. Returns null if no original source content is
 * available.
 */
IndexedSourceMapConsumer.prototype.sourceContentFor =
  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      var content = section.consumer.sourceContentFor(aSource, true);
      if (content) {
        return content;
      }
    }
    if (nullOnMissing) {
      return null;
    }
    else {
      throw new Error('"' + aSource + '" is not in the SourceMap.');
    }
  };

/**
 * Returns the generated line and column information for the original source,
 * line, and column positions provided. The only argument is an object with
 * the following properties:
 *
 *   - source: The filename of the original source.
 *   - line: The line number in the original source.  The line number
 *     is 1-based.
 *   - column: The column number in the original source.  The column
 *     number is 0-based.
 *
 * and an object is returned with the following properties:
 *
 *   - line: The line number in the generated source, or null.  The
 *     line number is 1-based. 
 *   - column: The column number in the generated source, or null.
 *     The column number is 0-based.
 */
IndexedSourceMapConsumer.prototype.generatedPositionFor =
  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];

      // Only consider this section if the requested source is in the list of
      // sources of the consumer.
      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
        continue;
      }
      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
      if (generatedPosition) {
        var ret = {
          line: generatedPosition.line +
            (section.generatedOffset.generatedLine - 1),
          column: generatedPosition.column +
            (section.generatedOffset.generatedLine === generatedPosition.line
             ? section.generatedOffset.generatedColumn - 1
             : 0)
        };
        return ret;
      }
    }

    return {
      line: null,
      column: null
    };
  };

/**
 * Parse the mappings in a string in to a data structure which we can easily
 * query (the ordered arrays in the `this.__generatedMappings` and
 * `this.__originalMappings` properties).
 */
IndexedSourceMapConsumer.prototype._parseMappings =
  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
    this.__generatedMappings = [];
    this.__originalMappings = [];
    for (var i = 0; i < this._sections.length; i++) {
      var section = this._sections[i];
      var sectionMappings = section.consumer._generatedMappings;
      for (var j = 0; j < sectionMappings.length; j++) {
        var mapping = sectionMappings[j];

        var source = section.consumer._sources.at(mapping.source);
        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
        this._sources.add(source);
        source = this._sources.indexOf(source);

        var name = null;
        if (mapping.name) {
          name = section.consumer._names.at(mapping.name);
          this._names.add(name);
          name = this._names.indexOf(name);
        }

        // The mappings coming from the consumer for the section have
        // generated positions relative to the start of the section, so we
        // need to offset them to be relative to the start of the concatenated
        // generated file.
        var adjustedMapping = {
          source: source,
          generatedLine: mapping.generatedLine +
            (section.generatedOffset.generatedLine - 1),
          generatedColumn: mapping.generatedColumn +
            (section.generatedOffset.generatedLine === mapping.generatedLine
            ? section.generatedOffset.generatedColumn - 1
            : 0),
          originalLine: mapping.originalLine,
          originalColumn: mapping.originalColumn,
          name: name
        };

        this.__generatedMappings.push(adjustedMapping);
        if (typeof adjustedMapping.originalLine === 'number') {
          this.__originalMappings.push(adjustedMapping);
        }
      }
    }

    quickSort$1(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
    quickSort$1(this.__originalMappings, util.compareByOriginalPositions);
  };

var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;

var sourceMapConsumer = {
	SourceMapConsumer: SourceMapConsumer_1,
	BasicSourceMapConsumer: BasicSourceMapConsumer_1,
	IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
};

var SourceMapConsumer$1 = sourceMapConsumer.SourceMapConsumer;

function get_sourcemap_url(contents) {
    const reversed = contents
        .split('\n')
        .reverse()
        .join('\n');
    const match = /\/[/*]#[ \t]+sourceMappingURL=([^\s'"]+?)(?:[ \t]+|$)/gm.exec(reversed);
    if (match)
        return match[1];
    return undefined;
}
const file_cache = new Map();
function get_file_contents(file_path) {
    if (file_cache.has(file_path)) {
        return file_cache.get(file_path);
    }
    try {
        const data = fs__default['default'].readFileSync(file_path, 'utf8');
        file_cache.set(file_path, data);
        return data;
    }
    catch (_a) {
        return undefined;
    }
}
function sourcemap_stacktrace(stack) {
    const replace = (line) => line.replace(/^ {4}at (?:(.+?)\s+\()?(?:(.+?):(\d+)(?::(\d+))?)\)?/, (input, var_name, file_path, line_num, column) => {
        if (!file_path)
            return input;
        const contents = get_file_contents(file_path);
        if (!contents)
            return input;
        const sourcemap_url = get_sourcemap_url(contents);
        if (!sourcemap_url)
            return input;
        let dir = path__default['default'].dirname(file_path);
        let sourcemap_data;
        if (/^data:application\/json[^,]+base64,/.test(sourcemap_url)) {
            const raw_data = sourcemap_url.slice(sourcemap_url.indexOf(',') + 1);
            try {
                sourcemap_data = Buffer.from(raw_data, 'base64').toString();
            }
            catch (_a) {
                return input;
            }
        }
        else {
            const sourcemap_path = path__default['default'].resolve(dir, sourcemap_url);
            const data = get_file_contents(sourcemap_path);
            if (!data)
                return input;
            sourcemap_data = data;
            dir = path__default['default'].dirname(sourcemap_path);
        }
        let raw_sourcemap;
        try {
            raw_sourcemap = JSON.parse(sourcemap_data);
        }
        catch (_b) {
            return input;
        }
        const consumer = new SourceMapConsumer$1(raw_sourcemap);
        const pos = consumer.originalPositionFor({
            line: Number(line_num),
            column: Number(column),
            bias: SourceMapConsumer$1.LEAST_UPPER_BOUND
        });
        if (!pos.source)
            return input;
        const source_path = path__default['default'].resolve(dir, pos.source);
        const source = `${source_path}:${pos.line || 0}:${pos.column || 0}`;
        if (!var_name)
            return `    at ${source}`;
        return `    at ${var_name} (${source})`;
    });
    file_cache.clear();
    return stack
        .split('\n')
        .map(replace)
        .join('\n');
}

function get_page_handler(manifest, session_getter) {
    const get_build_info =  () => JSON.parse(fs__default['default'].readFileSync(path__default['default'].join(build_dir, 'build.json'), 'utf-8'))
        ;
    const template =  () => read_template(src_dir)
        ;
    const has_service_worker = fs__default['default'].existsSync(path__default['default'].join(build_dir, 'service-worker.js'));
    const { pages, error: error_route } = manifest;
    function bail(res, err) {
        console.error(err);
        const message =  escape_html(typeof err === 'string' ? err : err.message) ;
        res.statusCode = 500;
        res.end(`<pre>${message}</pre>`);
    }
    function handle_error(req, res, statusCode, error) {
        handle_page({
            pattern: null,
            parts: [
                { name: null, component: { default: error_route } }
            ]
        }, req, res, statusCode, error || 'Unknown error');
    }
    function handle_page(page, req, res, status = 200, error = null) {
        var _a, _b;
        return __awaiter$1(this, void 0, void 0, function* () {
            const is_service_worker_index = req.path === '/service-worker-index.html';
            const build_info = get_build_info();
            res.setHeader('Content-Type', 'text/html');
            // preload main js and css
            // TODO detect other stuff we can preload like fonts?
            let preload_files = Array.isArray(build_info.assets.main) ? build_info.assets.main : [build_info.assets.main];
            if ((_a = build_info === null || build_info === void 0 ? void 0 : build_info.css) === null || _a === void 0 ? void 0 : _a.main) {
                preload_files = preload_files.concat((_b = build_info === null || build_info === void 0 ? void 0 : build_info.css) === null || _b === void 0 ? void 0 : _b.main);
            }
            let es6_preload = false;
            if (build_info.bundler === 'rollup') {
                es6_preload = true;
                const route = page.parts[page.parts.length - 1].file;
                const deps = build_info.dependencies[route];
                if (deps) {
                    preload_files = preload_files.concat(deps);
                }
            }
            else if (!error && !is_service_worker_index) {
                page.parts.forEach(part => {
                    if (!part)
                        return;
                    // using concat because it could be a string or an array. thanks webpack!
                    preload_files = preload_files.concat(build_info.assets[part.name]);
                });
            }
            const link = preload_files
                .filter((v, i, a) => a.indexOf(v) === i) // remove any duplicates
                .filter(file => file && !file.match(/\.map$/)) // exclude source maps
                .map((file) => {
                const as = /\.css$/.test(file) ? 'style' : 'script';
                const rel = es6_preload && as === 'script' ? 'modulepreload' : 'preload';
                return `<${req.baseUrl}/client/${file}>;rel="${rel}";as="${as}"`;
            })
                .join(', ');
            res.setHeader('Link', link);
            let session;
            try {
                session = yield session_getter(req, res);
            }
            catch (err) {
                return bail(res, err);
            }
            let redirect;
            let preload_error;
            const preload_context = {
                redirect: (statusCode, location) => {
                    if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
                        throw new Error('Conflicting redirects');
                    }
                    location = location.replace(/^\//g, ''); // leading slash (only)
                    redirect = { statusCode, location };
                },
                error: (statusCode, message) => {
                    preload_error = { statusCode, message };
                },
                fetch: (url, opts) => {
                    const protocol = req.socket.encrypted ? 'https' : 'http';
                    const parsed = new Url__default['default'].URL(url, `${protocol}://127.0.0.1:${process.env.PORT}${req.baseUrl ? req.baseUrl + '/' : ''}`);
                    opts = Object.assign({}, opts);
                    const include_credentials = (opts.credentials === 'include' ||
                        opts.credentials !== 'omit' && parsed.origin === `${protocol}://127.0.0.1:${process.env.PORT}`);
                    if (include_credentials) {
                        opts.headers = Object.assign({}, opts.headers);
                        const cookies = Object.assign({}, parse_1(req.headers.cookie || ''), parse_1(opts.headers.cookie || ''));
                        const set_cookie = res.getHeader('Set-Cookie');
                        (Array.isArray(set_cookie) ? set_cookie : [set_cookie]).forEach((s) => {
                            const m = /([^=]+)=([^;]+)/.exec(s);
                            if (m)
                                cookies[m[1]] = m[2];
                        });
                        const str = Object.keys(cookies)
                            .map(key => `${key}=${cookies[key]}`)
                            .join('; ');
                        opts.headers.cookie = str;
                        if (!opts.headers.authorization && req.headers.authorization) {
                            opts.headers.authorization = req.headers.authorization;
                        }
                    }
                    return fetch(parsed.href, opts);
                }
            };
            let preloaded;
            let match;
            let params;
            try {
                const root_preload = manifest.root_comp.preload || (() => { });
                const root_preloaded = root_preload.call(preload_context, {
                    host: req.headers.host,
                    path: req.path,
                    query: req.query,
                    params: {}
                }, session);
                match = error ? null : page.pattern.exec(req.path);
                let toPreload = [root_preloaded];
                if (!is_service_worker_index) {
                    toPreload = toPreload.concat(page.parts.map(part => {
                        if (!part)
                            return null;
                        // the deepest level is used below, to initialise the store
                        params = part.params ? part.params(match) : {};
                        return part.component.preload
                            ? part.component.preload.call(preload_context, {
                                host: req.headers.host,
                                path: req.path,
                                query: req.query,
                                params
                            }, session)
                            : {};
                    }));
                }
                preloaded = yield Promise.all(toPreload);
            }
            catch (err) {
                if (error) {
                    return bail(res, err);
                }
                preload_error = { statusCode: 500, message: err };
                preloaded = []; // appease TypeScript
            }
            try {
                if (redirect) {
                    const location = Url__default['default'].resolve((req.baseUrl || '') + '/', redirect.location);
                    res.statusCode = redirect.statusCode;
                    res.setHeader('Location', location);
                    res.end();
                    return;
                }
                if (preload_error) {
                    if (!error) {
                        handle_error(req, res, preload_error.statusCode, preload_error.message);
                    }
                    else {
                        bail(res, preload_error.message);
                    }
                    return;
                }
                const segments = req.path.split('/').filter(Boolean);
                // TODO make this less confusing
                const layout_segments = [segments[0]];
                let l = 1;
                page.parts.forEach((part, i) => {
                    layout_segments[l] = segments[i + 1];
                    if (!part)
                        return null;
                    l++;
                });
                if (error instanceof Error && error.stack) {
                    error.stack = sourcemap_stacktrace(error.stack);
                }
                const pageContext = {
                    host: req.headers.host,
                    path: req.path,
                    query: req.query,
                    params,
                    error: error
                        ? error instanceof Error
                            ? error
                            : { message: error, name: 'PreloadError' }
                        : null
                };
                const props = {
                    stores: {
                        page: {
                            subscribe: writable(pageContext).subscribe
                        },
                        preloading: {
                            subscribe: writable(null).subscribe
                        },
                        session: writable(session)
                    },
                    segments: layout_segments,
                    status: error ? status : 200,
                    error: pageContext.error,
                    level0: {
                        props: preloaded[0]
                    },
                    level1: {
                        segment: segments[0],
                        props: {}
                    }
                };
                if (!is_service_worker_index) {
                    let level_index = 1;
                    for (let i = 0; i < page.parts.length; i += 1) {
                        const part = page.parts[i];
                        if (!part)
                            continue;
                        props[`level${level_index++}`] = {
                            component: part.component.default,
                            props: preloaded[i + 1] || {},
                            segment: segments[i]
                        };
                    }
                }
                const { html, head, css } = App.render(props);
                const serialized = {
                    preloaded: `[${preloaded.map(data => try_serialize(data, err => {
                        console.error(`Failed to serialize preloaded data to transmit to the client at the /${segments.join('/')} route: ${err.message}`);
                        console.warn('The client will re-render over the server-rendered page fresh instead of continuing where it left off. See https://sapper.svelte.dev/docs#Return_value for more information');
                    })).join(',')}]`,
                    session: session && try_serialize(session, err => {
                        throw new Error(`Failed to serialize session data: ${err.message}`);
                    }),
                    error: error && serialize_error(props.error)
                };
                let script = `__SAPPER__={${[
                    error && `error:${serialized.error},status:${status}`,
                    `baseUrl:"${req.baseUrl}"`,
                    serialized.preloaded && `preloaded:${serialized.preloaded}`,
                    serialized.session && `session:${serialized.session}`
                ].filter(Boolean).join(',')}};`;
                if (has_service_worker) {
                    script += `if('serviceWorker' in navigator)navigator.serviceWorker.register('${req.baseUrl}/service-worker.js');`;
                }
                const file = [].concat(build_info.assets.main).filter(f => f && /\.js$/.test(f))[0];
                const main = `${req.baseUrl}/client/${file}`;
                // users can set a CSP nonce using res.locals.nonce
                const nonce_value = (res.locals && res.locals.nonce) ? res.locals.nonce : '';
                const nonce_attr = nonce_value ? ` nonce="${nonce_value}"` : '';
                if (build_info.bundler === 'rollup') {
                    if (build_info.legacy_assets) {
                        const legacy_main = `${req.baseUrl}/client/legacy/${build_info.legacy_assets.main}`;
                        script += `(function(){try{eval("async function x(){}");var main="${main}"}catch(e){main="${legacy_main}"};var s=document.createElement("script");try{new Function("if(0)import('')")();s.src=main;s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main",main);}document.head.appendChild(s);}());`;
                    }
                    else {
                        script += `var s=document.createElement("script");try{new Function("if(0)import('')")();s.src="${main}";s.type="module";s.crossOrigin="use-credentials";}catch(e){s.src="${req.baseUrl}/client/shimport@${build_info.shimport}.js";s.setAttribute("data-main","${main}")}document.head.appendChild(s)`;
                    }
                }
                else {
                    script += `</script><script${nonce_attr} src="${main}" defer>`;
                }
                let styles;
                // TODO make this consistent across apps
                // TODO embed build_info in placeholder.ts
                if (build_info.css && build_info.css.main) {
                    const css_chunks = new Set(build_info.css.main);
                    page.parts.forEach(part => {
                        if (!part || !build_info.dependencies)
                            return;
                        const deps_for_part = build_info.dependencies[part.file];
                        if (deps_for_part) {
                            deps_for_part.filter(d => d.endsWith('.css')).forEach(chunk => {
                                css_chunks.add(chunk);
                            });
                        }
                    });
                    styles = Array.from(css_chunks)
                        .map(href => `<link rel="stylesheet" href="client/${href}">`)
                        .join('');
                }
                else {
                    styles = (css && css.code ? `<style${nonce_attr}>${css.code}</style>` : '');
                }
                const body = template()
                    .replace('%sapper.base%', () => `<base href="${req.baseUrl}/">`)
                    .replace('%sapper.scripts%', () => `<script${nonce_attr}>${script}</script>`)
                    .replace('%sapper.html%', () => html)
                    .replace('%sapper.head%', () => head)
                    .replace('%sapper.styles%', () => styles)
                    .replace(/%sapper\.cspnonce%/g, () => nonce_value);
                res.statusCode = status;
                res.end(body);
            }
            catch (err) {
                if (error) {
                    bail(res, err);
                }
                else {
                    handle_error(req, res, 500, err);
                }
            }
        });
    }
    return function find_route(req, res, next) {
        const path = req.path === '/service-worker-index.html' ? '/' : req.path;
        const page = pages.find(page => page.pattern.test(path));
        if (page) {
            handle_page(page, req, res);
        }
        else {
            handle_error(req, res, 404, 'Not found');
        }
    };
}
function read_template(dir = build_dir) {
    return fs__default['default'].readFileSync(`${dir}/template.html`, 'utf-8');
}
function try_serialize(data, fail) {
    try {
        return devalue(data);
    }
    catch (err) {
        if (fail)
            fail(err);
        return null;
    }
}
// Ensure we return something truthy so the client will not re-render the page over the error
function serialize_error(error) {
    if (!error)
        return null;
    let serialized = try_serialize(error);
    if (!serialized) {
        const { name, message, stack } = error;
        serialized = try_serialize({ name, message, stack });
    }
    if (!serialized) {
        serialized = '{}';
    }
    return serialized;
}
function escape_html(html) {
    const chars = {
        '"': 'quot',
        '\'': '#39',
        '&': 'amp',
        '<': 'lt',
        '>': 'gt'
    };
    return html.replace(/["'&<>]/g, c => `&${chars[c]};`);
}

function middleware(opts = {}) {
    const { session, ignore } = opts;
    let emitted_basepath = false;
    return compose_handlers(ignore, [
        (req, res, next) => {
            if (req.baseUrl === undefined) {
                let originalUrl = req.originalUrl || req.url;
                if (req.url === '/' && originalUrl[originalUrl.length - 1] !== '/') {
                    originalUrl += '/';
                }
                req.baseUrl = originalUrl
                    ? originalUrl.slice(0, -req.url.length)
                    : '';
            }
            if (!emitted_basepath && process.send) {
                process.send({
                    __sapper__: true,
                    event: 'basepath',
                    basepath: req.baseUrl
                });
                emitted_basepath = true;
            }
            if (req.path === undefined) {
                req.path = req.url.replace(/\?.*/, '');
            }
            next();
        },
        fs__default['default'].existsSync(path__default['default'].join(build_dir, 'service-worker.js')) && serve({
            pathname: '/service-worker.js',
            cache_control: 'no-cache, no-store, must-revalidate'
        }),
        fs__default['default'].existsSync(path__default['default'].join(build_dir, 'service-worker.js.map')) && serve({
            pathname: '/service-worker.js.map',
            cache_control: 'no-cache, no-store, must-revalidate'
        }),
        serve({
            prefix: '/client/',
            cache_control:  'no-cache' 
        }),
        get_server_route_handler(manifest.server_routes),
        get_page_handler(manifest, session || noop$1)
    ].filter(Boolean));
}
function compose_handlers(ignore, handlers) {
    const total = handlers.length;
    function nth_handler(n, req, res, next) {
        if (n >= total) {
            return next();
        }
        handlers[n](req, res, () => nth_handler(n + 1, req, res, next));
    }
    return !ignore
        ? (req, res, next) => nth_handler(0, req, res, next)
        : (req, res, next) => {
            if (should_ignore(req.path, ignore)) {
                next();
            }
            else {
                nth_handler(0, req, res, next);
            }
        };
}
function should_ignore(uri, val) {
    if (Array.isArray(val))
        return val.some(x => should_ignore(uri, x));
    if (val instanceof RegExp)
        return val.test(uri);
    if (typeof val === 'function')
        return val(uri);
    return uri.startsWith(val.charCodeAt(0) === 47 ? val : `/${val}`);
}
function serve({ prefix, pathname, cache_control }) {
    const filter = pathname
        ? (req) => req.path === pathname
        : (req) => req.path.startsWith(prefix);
    const read =  (file) => fs__default['default'].readFileSync(path__default['default'].join(build_dir, file))
        ;
    return (req, res, next) => {
        if (filter(req)) {
            const type = lite.getType(req.path);
            try {
                const file = path__default['default'].posix.normalize(decodeURIComponent(req.path));
                const data = read(file);
                res.setHeader('Content-Type', type);
                res.setHeader('Cache-Control', cache_control);
                res.end(data);
            }
            catch (err) {
                if (err.code === 'ENOENT') {
                    next();
                }
                else {
                    console.error(err);
                    res.statusCode = 500;
                    res.end('an error occurred while reading a static file from disk');
                }
            }
        }
        else {
            next();
        }
    };
}
function noop$1() { }

const { PORT, NODE_ENV } = process.env;
const dev = NODE_ENV === 'development';

polka__default['default']() // You can also use Express
	.use(
		compression__default['default']({ threshold: 0 }),
		sirv__default['default']('static', { dev }),
		middleware()
	)
	.listen(PORT, err => {
		if (err) console.log('error', err);
	});

exports.commonjsGlobal = commonjsGlobal;
exports.createCommonjsModule = createCommonjsModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
