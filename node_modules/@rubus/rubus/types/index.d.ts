import type { ISO6391 } from "./static/language";
import type { IViewStyleProps } from "./tabs/view-style";
import type { DimensionValue } from "./static/dna";
import type {
  FlexAlignContent,
  FlexAlignItems,
  FlexDirection,
  FlexDisplay,
  FlexJustifyContent,
  FlexWrap,
} from "./tabs/props";
import { ActionMenuPosition } from "./action-menu/position";
import type { linkTarget } from "./static/link";
import type { ILayout } from "./tabs/layout";
import type { ISpacing } from "./tabs/spacing";
import type { ISize } from "./tabs/size";
import type { IPosition } from "./tabs/position";

export class RubusSvelteComponent {
  $$prop_def: {};

  $$slot_def: {};

  // stub all `on:{eventname}` directives
  $on(eventname: string, handler: (e: Event) => any): () => void;
}

export class AccordionItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the accordion item
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the unique index for the accordion item
     * @type {number} [tselfIndex = 0]
     */
    selfIndex?: 0;

    /**
     * Set accordion item open state
     * @type {boolean} [isOpen=false]
     */
    isOpen?: false;
  };

  $$slot_def: { default: {} };
}

export class ActionGroup extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the orientation
     * @type {"horizontal" | "vertical"}[orientation="horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Specify the variants of action group
     * @type {"general" | "justified"}[variants = "justified"]
     */
    variants?: "general" | "justified";

    /**
     * When variants==="justified", set its dimensionã€‚
     * @type {DimensionValue}[dimension = ""]
     */
    dimension?: DimensionValue;

    /**
     * Is it a only icon of action group
     * @type {boolean}[onlyIcon=false]
     */
    onlyIcon?: boolean;

    /**
     * Whether the action group is in quiet state
     * @type {boolean}[isQuiet=false]
     */
    isQuiet?: boolean;

    /**
     * Whether the action group is in compact state
     * @type {boolean}[isCompact=false]
     */
    isCompact?: boolean;

    /**
     * Specify the emphasized status of button group
     * @type { boolean } [emphasized= false]
     */
    emphasized?: boolean;

    /**
     * Disable all action buttons
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}
export class ActionMenu extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the action menu button label
     * @type {string}[menuLabel=""]
     */
    menuLabel?: string;

    /**
     * The position of the popver when it pops up
     * When the value is `auto`, it will automatically pop up according to the position of the component
     * For example, `bottomRight` the first one is Y direction, the second one is X direction
     * The parameter with `center` in the character is only valid when `variants == "dialog"`
     * The parameter with `center` in the character is invalid when `variants == "menu"`
     * @type {actionMenuPosition} [popverPosition = "auto"]
     */
    popverPosition?: actionMenuPosition;

    /**
     * Specify the variant of action menu
     * @type {"menu"  | "dialog"} [variant="menu"]
     */
    variants?: "menu" | "dialog";

    /**
     * Specify the quiet mode of action menu button
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the emphasized status of action menu button
     * @type { boolean } [emphasized= false]
     */
    emphasized?: boolean;

    /**
     * Specify the tabindex
     * @type {string}[tabindex="0"]
     */
    tabindex?: string;

    /**
     * Set to `true` to disable the button
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether the action menu is collapsed
     * @type {boolean}[isOpen=false]
     */

    isOpen?: boolean;

    /**
     * Whether long press to educe
     * @type {boolean}[holdEduce=false]
     */

    holdEduce?: boolean;

    /**
     * Whether to automatically fold
     * @type {boolean}[autoFold=false]
     */

    autoFold?: boolean;

    /**
     * Preconditions: holdEduce => true
     * Long press time
     * @type {number}[educeDuration=1000]
     */

    educeDuration?: number;
  };
  $$slot_def: { default: {} };
}
export class Alert extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the variant of alert
     * @type {"info"  | "success" | "warning" | "help" | "error"} [variant="info"]
     */
    variants?: "info" | "success" | "warning" | "help" | "error";

    /**
     * Specify the title of alert
     * @type {string} [title = "Alert title"]
     */
    title?: string;

    /**
     * Specify the text content of alert
     * @type {string} [content = "This is a default text."]
     */
    content?: string;

    /**
     * Specify the max-width css style of alert
     * @type {DimensionValue} [maxWidth = ""]
     */
    maxWidth?: DimensionValue;

    /**
     * Specify the min-width css style of alert
     * @type {DimensionValue} [minWidth = ""]
     */
    minWidth?: DimensionValue;

    /**
     * Specify the min-height css style of alert
     * @type {DimensionValue} [minHeight = ""]
     */
    minHeight?: DimensionValue;
  };
  $$slot_def: { default: {} };
}
export class Asset extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Preconditions:variants => "image"
     * Set the src attribute of the img element
     * @type {string} [imgUrl = ""]
     */
    imgUrl?: string;

    /**
     * Preconditions:variants => "image"
     * Set the alt attribute of the img element
     * @type {string} [imgAlt= "Asset image"]
     */
    imgAlt?: string;

    /**
     * Specify the variant of asset
     * @type {"image"|"file"|"folder"|"customize"} [variants = "image"]
     */
    variants?: "image" | "file" | "folder" | "customize";
  };
  $$slot_def: { default: {} };
}
export class AssetList extends RubusSvelteComponent {
  $$prop_def: {};
  $$slot_def: { default: {} };
}
export class AssetListItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Preconditions:variants => "image"
     * Set the src attribute of the img element
     * @type {string} [imgUrl = ""]
     */
    imgUrl?: string;

    /**
     * Preconditions:variants => "image"
     * Set the alt attribute of the img element
     * @type {string} [imgAlt = "Asset list item image"]
     */
    imgAlt?: string;
    /**
     * Specify the asset type of asset
     * @type {"image"|"floder"|"csv"|"html"|"xml"|"zip"|"txt"|"json"|"code"} [variants = "folder"]
     */
    variants?: "image" | "floder" | "csv" | "html" | "xml" | "zip" | "txt" | "json" | "code";

    /**
     * Is it selected
     * @type {boolean } [isSelected = false]
     */
    isSelected?: boolean;

    /**
     * Specify the tabindex
     * @type {string}[tabindex="0"]
     */
    tabindex?: string;

    /**
     * Set to `true` to disable the asset list item
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the text label
     * @type {string}[label = ""]
     */
    label?: string;

    /**
     * Whether there is a branch
     * @type {boolean}[isBranch = false]
     */
    isBranch?: boolean;

    /**
     * Is it selectable
     * @type {boolean}[isSelectable = true]
     */
    isSelectable?: boolean;
  };
  $$slot_def: { default: {} };
}
export class Avatar extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Preconditions:variants => "image"
     * Set the src attribute of the img element
     * @type {string} [imgUrl = ""]
     */
    imgUrl?: string;

    /**
     * Preconditions:variants => "image"
     * Set the alt attribute of the img element
     * @type {string} [imgAlt = "Avatar image"]
     */
    imgAlt?: string;

    /**
     * Set to `true` to disable the avatar
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}
export class Banner extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the title of banner
     * @type {string} [title = ""]
     */
    title?: string;

    /**
     * Specify the text content of banner
     * @type {string} [content = ""]
     */
    content?: string;

    /**
     * Specify the max-width css style of banner
     * @type {DimensionValue} [maxWidth = "size-2000"]
     */
    maxWidth?: DimensionValue;

    /**
     * Specify the min-width css style of banner
     * @type {DimensionValue} [minWidth = ""]
     */
    minWidth?: DimensionValue;

    /**
     * Specify the min-height css style of banner
     * @type {DimensionValue} [minHeight = ""]
     */
    minHeight?: DimensionValue;

    /**
     * Specify the variant of banner
     * @type {"info"  | "warning" | "error" } [variant="info"]
     */
    variants?: "info" | "warning" | "error";

    /**
     * Whether to automatically display in the corner
     * @type {boolean } [corner = false]
     */
    corner?: boolean;
  };
  $$slot_def: { default: {} };
}
export class BarLoader extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the value of barloader
     * @type { number } [value=50]
     */
    value?: number;

    /**
     * Specify the min value of barloader
     * @type { number } [minValue=0]
     */
    minValue?: number;

    /**
     * Specify the max value of barloader
     * @type { number } [maxValue=0]
     */
    maxValue?: number;

    /**
     * Specify the label of barloader
     * @type { string } [label = "Loading"]
     */
    label?: string;

    /**
     * Specify the variant of barloader
     * @type {"label"  | "side-label"  } [variant="info"]
     */
    variants?: "label" | "side-label";

    /**
     * Specify the small mode of barloader
     * @type { boolean } [isSmall = false]
     */
    isSmall?: boolean;

    /**
     * Specify the over background of barloader
     * @type { boolean } [overBackground = false]
     */
    overBackground?: boolean;

    /**
     * Specify the loading status of barloader
     * @type { boolean } [loading = false]
     */
    loading?: boolean;
  };
  $$slot_def: { default: {} };
}

export class BreadcrumbsWrap extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the variant of breadcrumbs
     * @type {"general" | "compact" | "multiline" } [variant="general"]
     */
    variant?: "general" | "compact" | "multiline";
  };
  $$slot_def: { default: {} };
}

export class BreadcrumbsItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;

    /**
     * Whether the breadcrumbs item is dragged marked
     * @type {boolean}[dragged = false]
     */
    dragged?: boolean;

    /**
     *Does the breadcrumbs item contain nesting
     * @type {boolean}[nested = false]
     */
    nested?: boolean;

    /**
     * Set to `true` to disable the breadcrumbs item
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Button extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the tabindex
     * @type {string}[tabindex="0"]
     */
    tabindex?: string | number;

    /**
     * Set to `true` to disable the button
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the id
     * @type {string}[id=""]
     */
    id?: string;

    /**
     * Specify the aria-label
     * @type {string} [aria-label="button"]
     */
    ariaLabel?: "button";

    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;
    /**
     * Preconditions: href
     * Where to display the linked URL
     * @type {linkTarget}[target = ""]
     */
    target?: linkTarget;

    /**
     * Specify the `type` attribute for the button element
     * @type {"button"|"submit"|"reset"}[type="button"]
     */
    type?: "button" | "submit" | "reset";

    /**
     * Specify the exterior of button
     * @type {"general" | "clear" | "logic-or" | "logic-and"  |"action"} [exterior="general"]
     */
    exterior?: "general" | "clear" | "logic-or" | "logic-and" | "action";

    /**
     * Specify the variant of button
     * @type {"cta" | "overBackground" | "primary" | "secondary" | "warning"} [variant="cta"]
     */
    variant?: "cta" | "overBackground" | "primary" | "secondary" | "warning";

    /**
     * Specify the quiet mode of button
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the selected status of button
     * @type { boolean } [isSelected= false]
     */
    isSelected?: boolean;

    /**
     * Preconditions: exterior === "clear"
     * Specify the small mode of button
     * @type { boolean } [isSmall= false]
     */
    isSmall?: boolean;

    /**
     * Preconditions: exterior === "action"
     * Specify the emphasized status of button
     * @type { boolean } [emphasized= false]
     */
    emphasized?: boolean;

    /**
     * Preconditions: disabled === true
     * Cursor not-allowed when the button is disabled
     * @type { boolean } [notAllowed= false]
     */
    notAllowed?: boolean;
  };

  $$slot_def: { default: {} };
}

export class ButtonGroup extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the orientation
     * @type {"horizontal" | "vertical"}[orientation="horizontal"]
     */
    orientation?: "horizontal" | "vertical";
    /**
     * Unified settings the variant of button group
     * @type {"cta" | "overBackground" | "primary" | "secondary" | "warning"} [variant=""]
     */
    variant?: "cta" | "overBackground" | "primary" | "secondary" | "warning";
    /**
     * Disable all buttons
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class ButtonIconWrap extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Is it a only icon button
     * @type {boolean}[onlyIcon=false]
     */
    onlyIcon?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Calendar extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set base date
     * @type { Date | dateString }[nowDate = new Date()]
     */
    nowDate?: Date;

    /**
     * internationalization
     * @type { ISO6391 }[lang = "en"]
     */
    lang?: "zh" | "en";

    /**
     * Set view date
     * @type { Date | dateString }[viewDate = nowDate]
     */
    viewDate?: Date;

    /**
     * Whether to display dates other than this month
     * @type { boolean }[showOutsideMonth = true]
     */
    showOutsideMonth?: boolean;

    /**
     * Date selection mode
     * @type { "single" | "range" }[pickerMode = "single"]
     */
    pickerMode?: "single" | "range";

    /**
     * List of dates that need to be disabled
     * @type { Array }[disabled = []]
     */
    disabled?: Array;

    /**
     * Selected date
     * @type { string | Array }[selected = []]
     */
    selected?: string | Array;

    /**
     * Focused date
     * @type {  Array }[focused = []]
     */
    focused?: Array;

    /**
     * Valid date range
     * @type { "any" | Array }[validRange = "any"]
     */
    validRange?: "any" | Array;

    /**
     * Week name adopts pattern
     * @type { "weekShortAbbreviation" | "weekAbbreviation" | "weekFullName"}[weekNameMode = "weekShortAbbreviation"]
     */
    weekNameMode?: "weekShortAbbreviation" | "weekAbbreviation" | "weekFullName";

    /**
     * Month name adopts pattern
     * @type { "monthAbbreviation" | "monthFullName" }[monthNameMode = "monthFullName"]
     */
    monthNameMode?: "monthAbbreviation" | "monthFullName";
  };
  $$slot_def: { default: {} };
}

export class Calendar extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the alt attribute of the foreground img
     * @type {string} [coverPhotoAlt = "Cover photo"]
     */
    coverPhotoAlt?: string;

    /**
     * Set the src attribute of the foreground img
     * @type {string} [coverPhotoUrl = ""]
     */
    coverPhotoUrl?: string;

    /**
     * Specify the orientation index for the card
     * @type {"horizontal" | "vertical"}  [orientation = "vertical"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Is it selected
     * @type {boolean } [isSelected = false]
     */
    isSelected?: boolean;

    /**
     * Set to `true` to disable the card checkbox
     * @type {boolean}[ disabled=false ]
     */
    disabled?: boolean;

    /**
     * Set to `true` to focused the action
     * @type {boolean}[ isFocused=false ]
     */
    isFocused?: boolean;

    /**
     * Specify the quiet mode of card
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the small mode of card
     * @type { boolean } [isSmall= false]
     */
    isSmall?: boolean;

    /**
     * Specify the main title of card
     * @type { string } [title= ""]
     */
    title?: string;

    /**
     * Specify the subtitle of card
     * @type { string } [subtitle= ""]
     */
    subtitle?: string;

    /**
     * Specify the width of card
     * @type { string } [width= ""]
     */
    width?: DimensionValue;

    /**
     * Specify the height of card
     * @type { string } [height= ""]
     */
    height?: DimensionValue;

    /**
     * Specify the description of card
     * @type { string } [description= ""]
     */
    description?: string;
  };
  $$slot_def: { default: {} };
}

export class Checkbox extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify whether the checkbox is checked
     * @type {boolean} [checked=false]
     */
    checked?: boolean;

    /**
     * Set to `true` to disable the checkbox
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether the input should display its "valid" or "invalid" visual styling.
     * @type {boolean} [isInvalid=false]
     */
    isInvalid?: boolean;

    /**
     * This prop sets the quiet style which provides visual weaken.
     * @type {boolean} [isQuiet=false]
     */
    isQuiet?: boolean;

    /**
     * Specify whether the checkbox is indeterminate
     * @type {boolean} [indeterminate=false]
     */
    indeterminate?: boolean;

    /**
     * Set to `true` for the checkbox to be read-only
     * @type {boolean} [readonly=false]
     */
    readonly?: boolean;

    /**
     * Set a name for the input element
     * @type {string} [name=""]
     */
    name?: string;

    /**
     * Set an id for the input element
     * @type {string} [id = "checkbox-" + Math.random().toString(24)]
     */
    id?: string;

    /**
     * Set an id for the input element
     * @type {string} [value = ""]
     */
    value?: string;

    /**
     * Set an title for the input labal
     * @type {string} [title = ""]
     */
    title?: string;
  };
  $$slot_def: { default: {} };
}

export class CircleLoader extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the scale of circle loader
     * @type {"medium" | "small" | "large"} [scale ="medium"]
     */
    scale?: "medium" | "small" | "large";

    /**
     * Specify the variants of circle loader
     * @type {"general" | "overBackground"} [variants ="general"]
     */
    variants?: "general" | "overBackground";

    /**
     * Set an indeterminate status for the circle loader
     * @type {boolean} [indeterminate = false]
     */
    indeterminate?: boolean;
  };
  $$slot_def: { default: {} };
}

export class CoachMark extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set an quiet mode for the coach mark
     * @type {boolean} [indeterminate = false]
     */
    isQuiet?: boolean;

    /**
     * Specify the variants of coach mark
     * @type { "general" | "light" | "dark" } [variants = "general"
     */
    variants?: "general" | "light" | "dark";

    /**
     * Set the alt attribute of the  cover photo url
     * @type {string} [coverPhotoAlt = "Cover photo"]
     */
    coverPhotoAlt?: string;

    /**
     * Set the src attribute of the cover photo url
     * @type {string} [coverPhotoUrl = ""]
     */
    coverPhotoUrl?: string;

    /**
     * Set the src coachMarkPopover title
     * @type {string} [title = ""]
     */
    title?: string;

    /**
     * Set the total steps text
     * @type {number} [totalStep = 0]
     */
    totalStep?: number;

    /**
     * Set the present steps text
     * @type {number} [presentStep = 1]
     */
    presentStep?: number;

    /**
     * Set the position of coachMarkPopover
     * @type {"leftTop"|"leftBottom"|"rightTop"|"rightBottom"} [coachMarkPopoverPosition = "leftTop"]
     */
    coachMarkPopoverPosition?: "leftTop" | "leftBottom" | "rightTop" | "rightBottom";

    /**
     * Overrides the positioning related style.
     * @type { IPosition } [positioning = {}]
     */
    positioning?: IPosition;
  };
  $$slot_def: { default: {} };
}

export class ColorArea extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Custom size: width
     * @type { number } [width = 192]
     */
    width?: number;

    /**
     * Custom size: height
     * @type { number } [height = width]
     */
    height?: number;

    /**
     * Set to `true` to disable the colorarea
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Final color pick result
     * @type {string}[currentColor = "#fff"]
     */
    currentColor?: string;
  };
  $$slot_def: { default: {} };
}

export class ColorHandle extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the color loupe
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Set its color loupe pop-up orientation
     * @type {"horizontal" | "vertical" }[orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Preconditions: variants => "alpha"
     * Get current opacity
     * @type {number}  [alpha = 1ã€‘
     */
    alpha?: number;
  };
  $$slot_def: { default: {} };
}

export class ColorLoupe extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set its color loupe  open status
     * @type {boolean}[isOpen = false]
     */
    isOpen?: boolean;

    /**
     * Set its color loupe  background color
     * @type {string}[orientation = "horizontal"]
     */
    color?: string;

    /**
     * Set its color loupe pop-up orientation
     * @type {"horizontal" | "vertical" }[orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Preconditions: variants => "alpha"
     * Get current opacity
     * @type {number}  [alpha = 1ã€‘
     */
    alpha?: number;
  };
  $$slot_def: { default: {} };
}

export class ColorSlider extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the colorSlider
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Final color pick result
     * @type {string}[currentColor = "#fff"]
     */
    currentColor?: string;

    /**
     * Specify the variants  for the color slider
     * @type {"hue" | "alpha" | "range"}[variants = "hue"
     */
    variants?: "hue" | "alpha" | "range";

    /**
     * Specify the orientation  for the color slider
     * @type {"horizontal" | "vertical"}  [orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Preconditions: variants => "alpha" or "range"
     * Specify the start color value for the color slider
     * @type {string}  [startColor = "rgb(0,0,0)"
     */

    startColor?: string;

    /**
     * Preconditions: variants =>  "range"
     * Specify the end color value for the color slider
     * @type {string}  [endColor = "rgb(255,255,255)"]
     */

    endColor?: string;

    /**
     * Preconditions: variants => "alpha"
     * Get current opacity
     * @type {number}  [alpha = 1ã€‘
     */
    alpha?: number;
  };
  $$slot_def: { default: {} };
}

export class Cornerstone extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the scale css variables of page
     * @type {"medium" | "large"} [spectrumScale="medium"]
     */
    spectrumScale?: "medium" | "large";

    /**
     * Specify the theme css variables of page
     * @type {"dark" | "darkest" | "light" | "lightest"} [spectrumTheme="light"]
     */
    spectrumTheme?: "dark" | "darkest" | "light" | "lightest";

    /**
     * Specify the reset css variables of page
     * @type {[{"--css-variable-name":"variable-value"}] | []} [resetCss= []]
     */
    resetCss?: Object;

    /**
     * Specify the reset css of page
     * @type {string} [resetCss= []]]
     */
    resetCssText?: string;
    /**
     * Specify the theme color of mate element
     * If it is not set, the page theme color is automatically obtained
     * @type {string} [themeColor= undefined]]
     */
    themeColor?: string;

    /**
     * Specify the language of page
     * @type {string:ISO 639-1} [language="en"]
     */
    language?: ISO6391;

    /**
     * Set the dir attribute for components to render correctly
     * ltr: left-to-right
     * rtl: right-to-left
     * @type {"ltr" | "rtl"} [languageReadingOrder="ltr"]
     */
    languageReadingOrder?: "ltr" | "rtl";
  };
  $$slot_def: { default: {} };
}

export class CycleButton extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Whether the CycleButton  is currently active
     * @type {boolean}[isSelected = false]
     */
    isSelected?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Dial extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the value of dial input
     * @type { number }[value = 0]
     */
    value?: number;

    /**
     * Set the drag damping of dial input
     * @type { number }[damping = 0.8]
     */
    damping?: number;

    /**
     * Set to `true` to disable the dial input
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the small mode of dial input
     * @type { boolean } [isSmall= false]
     */
    isSmall?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Dialog extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the variant of dialog
     * @type {"small" | "medium" | "large" | "alert" | "fullscreen" | "fullscreenTakeover" } [variants = ""]
     */
    variants?: "small" | "medium" | "large" | "alert" | "fullscreen" | "fullscreenTakeover";

    /**
     * Specify the css `z-index` of dialog
     * @type {number} [zIndex = 100]
     */
    zIndex?: boolean;

    /**
     * Specify the title of dialog
     * @type {string} [title = ""]
     */
    title?: string;

    /**
     * Set the src attribute of the hero image
     * @type {string} [imgUrl = ""]
     */
    heroImgUrl?: string;

    /**
     * Set the alt attribute of the hero image
     * @type {string} [imgAlt = "Hero image"]
     */
    heroImgAlt?: string;

    /**
     * Whether to keep the dismissible option
     * @type {boolean} [dismissible = false]
     */
    dismissible?: boolean;

    /**
     * Set dialog to an error status
     * Preconditions: variants =>  "alert"
     * @type {boolean} [isError = false]
     */
    isError?: boolean;

    /**
     * Whether to keep the divider
     * @type {boolean} [noDivider = false]
     */
    noDivider?: boolean;

    /**
     * Whether to keep the open status
     * @type {boolean} [isOpen = false]
     */
    isOpen?: boolean;

    /**
     * Whether to allow clicking on the Underlay area to close the dialog
     * @type {boolean} [puncture = false]
     */
    puncture?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Dropdown extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the placeholder of dropdown
     * @type {string} [placeholder = ""]
     */
    placeholder?: string;

    /**
     * Set to `true` to disable the dropdown
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Set whether dropdown is open
     * @type {boolean}[isOpen=false]
     */
    isOpen?: boolean;

    /**
     * Set its external result index
     * @type { number } [resultIndex = 0
     */
    resultIndex?: number;

    /**
     * Set its current index
     * @type { number } [thisIndex = 0
     */
    thisIndex?: number;

    /**
     * Specify the invalid mode of dropdown
     * @type { boolean } [isInvalid= false]
     */
    isInvalid?: boolean;

    /**
     * Specify the quiet mode of dropdown
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the css `min-width` of dropdown and child menu
     * @type { number } [minWidth = "200"]
     */
    minWidth?: number;
  };
  $$slot_def: { default: {} };
}

export class DropIndicator extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the orientation  for the drop indicator
     * @type {"horizontal" | "vertical"}  [orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Overrides the spacing related style.
     * @type { ISpacing } [spacing = {}]
     */
    spacing?: ISpacing;

    /**
     * Specify the dimension  for the drop indicator
     * @type { DimensionValue } [spacing = "size-600"]
     */
    dimension?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class Dropzone extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the dragged mode of dropzone
     * @type { boolean } [isDragged= false]
     */
    isDragged?: boolean;

    /**
     * Specify the title of dropzone
     * @type { string } [title = ""]
     */
    title?: string;

    /**
     * Specify the element width of dropzone
     * @type { DimensionValue } [width = 600;]
     */
    width?: DimensionValue;

    /**
     * Specify the element height of dropzone
     * @type { DimensionValue } [height = 600;]
     */
    height?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class View extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Overrides the style.
     * @type { IViewStyleProps } [style = {}]
     */
    style?: IViewStyleProps;
  };
  $$slot_def: { default: {} };
}

export class Flex extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string } [id=""]
     */
    id?: string;

    /**
     * The display CSS property sets whether an element is treated as a block or inline element and the layout used for its children
     * @type { FlexDisplay } [display="flex"]
     * **/
    display?: FlexDisplay;
    /**
     * The direction in which to layout children.
     * @type { FlexDirection } [direction="row"]
     */
    direction?: FlexDirection;

    /**
     * Whether to wrap items onto multiple lines.
     * @type { FlexWrap } [wrap = ""]
     */
    wrap?: FlexWrap;

    /**
     * The distribution of space around items along the main axis.
     * @type { FlexJustifyContent } [justifyContent = "start"]
     */
    justifyContent?: FlexJustifyContent;

    /**
     * The distribution of space around child items along the cross axis
     * @type { FlexAlignContent } [alignContent = ""]
     */
    alignContent?: FlexAlignContent;

    /**
     * The alignment of children within their container.
     * @type { FlexAlignItems } [alignItems = ""]
     */
    alignItems?: FlexAlignItems;

    /**
     * Whether to wrap items onto multiple lines.
     * @type { DimensionValue } [gap = ""]
     */
    gap?: DimensionValue;

    /**
     * The space to display between columns.
     * @type { DimensionValue } [columnGap = ""]
     */
    columnGap?: DimensionValue;

    /**
     * The space to display between row.
     * @type { DimensionValue } [rowGap = ""]
     */
    rowGap?: DimensionValue;

    /**
     * Overrides the layout related style.
     * @type { ILayout } [layout = {}]
     */
    layout?: ILayout;

    /**
     * Overrides the spacing related style.
     * @type { ISpacing } [spacing = {}]
     */
    spacing?: ISpacing;

    /**
     * Overrides the sizing related style.
     * @type { ISize } [sizing = {}]
     */
    sizing?: ISize;

    /**
     * Overrides the positioning related style.
     * @type { IPosition } [positioning = {}]
     */
    positioning?: IPosition;
  };
  $$slot_def: { default: {} };
}

export class Label extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the scale of Label
     * @type {"medium" | "small" | "large"} [scale ="medium"]
     */
    scale?: "medium" | "small" | "large";

    /**
     * Specify the variants of Label
     * @type {"active" | "inactive" | "grey" | "orange" | "yellow" | "seafoam" | "green" | "blue" | "fuchsia"} [variants = "active"]
     */
    variants?: "active" | "inactive" | "grey" | "orange" | "yellow" | "seafoam" | "green" | "blue" | "fuchsia";

    /**
     * Specify the label text of Label
     * @type { string } [ label = "" ]
     */
    label?: string;
  };
  $$slot_def: { default: {} };
}

export class Link extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;
    /**
     * Where to display the linked URL
     * @type {"_self" | "_blank" | "_parent" | "_top"}[target = ""]
     */
    target?: "_self" | "_blank" | "_parent" | "_top";

    /**
     * Specify the variants of link
     * @type {"primary" | "secondary" | "overBackground" } [variants="primary"]
     */
    variants?: "primary" | "secondary" | "overBackground";

    /**
     * The relationship of the linked URL as space-separated link types.
     *More: https://developer.mozilla.org/zh-CN/docs/Web/HTML/Link_types
     * @type {string}[rel = ""]
     */
    rel?: string;

    /**
     * Specify the id of link
     * @type {string} [id = ""]
     */
    id?: string;

    /**
     * Specify quiet mode id of link
     * @type {boolean} [isQuiet = false]
     */
    isQuiet?: boolean;

    /**
     * Set to `true` to disable the link
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Menu extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the role of menu
     * @type {string} [role = "menu"]
     */
    role?: string;

    /**
     * Specify the max-width of menu
     * @type {number} [maxWidth = 0]
     */
    maxWidth?: number;

    /**
     * Specify the min-width of menu
     * @type {number} [minWidth = 0]
     */
    minWidth?: number;

    /**
     * Specify the aria-labelledby of menu
     * @type {string} [ariaLabelledby = ""]
     */
    ariaLabelledby?: string;

    /**
     * Specify the nested mode of menu
     * @type {boolean} [nested = false]
     */
    nested?: boolean;
  };
  $$slot_def: { default: {} };
}

export class MenuGroup extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the title of  menu group
     * @type {string} [title = ""]
     */
    title?: string;

    /**
     * The element's unique identifier.
     * @type {string} [id = ""]
     */
    id?: string;
  };
  $$slot_def: { default: {} };
}

export class MenuItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the label of  menu item
     * @type {string} [label = ""]
     */
    label?: string;

    /**
     * Specify the selected status of  menu item
     * @type {boolean} [isSelected = false]
     */
    isSelected?: boolean;

    /**
     * Set to `true` to disable the menu item
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the divider status of  menu item
     * @type {boolean} [isDivider = false]
     */
    isDivider?: boolean;

    /**
     * Specify the finally result index of  menu item
     * @type {number} [resultIndex = 0]
     */
    resultIndex?: number;

    /**
     * Specify the this item index of  menu item
     * @type {number} [thisIndex = 0]
     */
    thisIndex?: number;

    /**
     * Specify the tabindex of  menu item
     * @type {number} [tabindex = 0]
     */
    tabindex?: number;

    /**
     * Specify the role of  menu item
     * @type {string} [role = "menuitem"]
     */
    role?: string;

    /**
     * Whether to display Checkmark icon
     * @type {number} [showCheckmark = true]
     */
    showCheckmark?: number;

    /**
     * Specify the nested mode of  menu item
     * @type {boolean} [nested = false]
     */
    nested?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationButtonStyle extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the side of buttons
     * @type {"left" | "right" } [side = "left"]
     */
    side?: "left" | "right";

    /**
     * Specify the variant of buttons
     * @type {"cta" | "primary" | "secondary" } [variant="cta"]
     */
    variants?: "cta" | "primary" | "secondary";
  };
  $$slot_def: { default: {} };
}

export class PaginationButtonStyleNext extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;

    /**
     * Specify the `type` attribute for the button element
     * @type {"button"|"submit"|"reset"}[type="button"]
     */
    type?: "button" | "submit" | "reset";

    /**
     * Specify the labe text for the button element
     * @type { string }[label="Next"]
     */
    label?: string;

    /**
     * Set to `true` to disable the button
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationButtonStylePrev extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;

    /**
     * Specify the `type` attribute for the button element
     * @type {"button"|"submit"|"reset"}[type="button"]
     */
    type?: "button" | "submit" | "reset";

    /**
     * Set to `true` to disable the button
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationExplicit extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the current  pagination number
     * @type {number}[currentPageNumber = 1]
     */
    currentPageNumber?: number;

    /**
     * Set the total number of pagination
     * @type {number}[totalPageNumber = 3]
     */
    totalPageNumber?: number;
  };
  $$slot_def: { default: {} };
}

export class PaginationExplicitNext extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the button
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationExplicitPrev extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the button
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationPage extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the current  pagination number
     * @type {number}[currentPageNumber = 1]
     */
    currentPageNumber?: number;

    /**
     * Set the total number of pagination
     * @type {number}[totalPageNumber = 3]
     */
    totalPageNumber?: number;

    /**
     *Set up to display a few items
     * @type {number}[showPaginationNumber = 8]
     */
    showPaginationNumber?: number;
  };
  $$slot_def: { default: {} };
}

export class PaginationPageNext extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the button
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class PaginationPagePrev extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set to `true` to disable the button
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Picker extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the placeholder of picker
     * @type {string} [placeholder = ""]
     */
    placeholder?: string;

    /**
     * Set to `true` to disable the picker
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Set whether picker is open
     * @type {boolean}[isOpen=false]
     */
    isOpen?: boolean;

    /**
     * Set its external result index
     * @type { number } [resultIndex = 0
     */
    resultIndex?: number;

    /**
     * Set its current index
     * @type { number } [thisIndex = 0
     */
    thisIndex?: number;

    /**
     * Specify the invalid mode of picker
     * @type { boolean } [isInvalid= false]
     */
    isInvalid?: boolean;

    /**
     * Specify the quiet mode of picker
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the css `min-width` of picker and child menu
     * @type { number } [minWidth = "200"]
     */
    minWidth?: number;
  };
  $$slot_def: { default: {} };
}

export class Popover extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set whether popover is open
     * @type {boolean}[isOpen=false]
     */
    isOpen?: boolean;

    /**
     * Specify the  variants of popver
     * @type {"menu"|"dialog"}[variants = "menu"]
     */
    variants?: "menu" | "dialog";

    /**
     * Specify the  position mode of popver
     * variants => "menu" @type { "auto"|"topLeft"|"topRight"|"bottomLeft"|"bottomRight"|"leftTop"|"rightTop"|"leftBottom"|"rightBottom"} [ popverPosition = "auto"]
     * variants => "dialog" @type { "centerLeft"|"centerRight"|"centerTop"|"centerBottom" }
     */
    popverPosition?:
      | "auto"
      | "topLeft"
      | "topRight"
      | "bottomLeft"
      | "bottomRight"
      | "leftTop"
      | "rightTop"
      | "leftBottom"
      | "rightBottom"
      | "centerLeft"
      | "centerRight"
      | "centerTop"
      | "centerBottom";

    /**
     * Specify the  quite mode of popver
     * @type {boolean}[isOpen=false]
     */
    isQuiet?: boolean;

    /**
     * Specify the  title of popver
     * @type {string}[title = "Popover Title"]
     */
    title?: string;
  };
  $$slot_def: { default: {} };
}

export class QuickActions extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set whether quick actions is open
     * @type {boolean}[isOpen=false]
     */
    isOpen?: boolean;

    /**
     * Set whether quick actions only display text
     * @type {boolean}[textOnly=false]
     */
    textOnly?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Radio extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string }[id = `radio-${Math.round(Math.random() * (99999 - 0)) + 0}`]
     */
    id?: string;

    /**
     * Set to `true` to checked the radio
     * @type {boolean}[checked=false]
     */
    checked?: boolean;

    /**
     * Set to `true` to invalid the radio
     * @type {boolean}[checked=false]
     */
    isInvalid?: boolean;

    /**
     * Set to `true` to disable the dropdown
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the quiet mode of radio
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * The name of the radio button, used when submitting an HTML form.
     * @type { string }[ name = "radio" ]
     */
    name?: string;

    /**
     * The value of the radio button, used when submitting an HTML form.
     * @type { string }[value = ""]
     */
    value?: string;

    /**
     * Specify the readonly mode of radio
     * @type {boolean}[readonly=false]
     */
    readonly?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Rating extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set whether its input is read-only
     * @type {boolean}[readonly=false]
     */
    readonly?: boolean;

    /**
     * Whether to emphasized the Rating
     * @type {boolean}[emphasized=false]
     */
    emphasized?: boolean;

    /**
     * Whether to disabled the Rating
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether to value the Rating
     * @type {number}}[value = 0]
     */
    value?: number;

    /**
     * Whether to max value the Rating
     * @type {number}}[maxValue = 5]
     */
    maxValue?: number;

    /**
     * Whether to min value the Rating
     * @type {number}}[minValue = 0]
     */
    minValue?: number;
  };
  $$slot_def: { default: {} };
}

export class Search extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string }[id = `search-${Math.round(Math.random() * (99999 - 0)) + 0}`]
     */
    id?: string;

    /**
     * Temporary text that occupies the text input when it is empty.
     * @type { string }[placeholder = "Search"]
     */
    placeholder?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "search"]
     */
    name?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    value?: string;

    /**
     * Set to `true` to disable the search input
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether the search should be displayed with a quiet style.
     * @type {boolean} [isQuiet=false]
     */
    isQuiet?: boolean;

    /**
     * Used to specify the autocomplete attribute of the input element
     * @type { string }[autocomplete = "off"]
     */
    autocomplete?: string;
  };
  $$slot_def: { default: {} };
}

export class SearchWithin extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string }[id = `searchwithin-${Math.round(Math.random() * (99999 - 0)) + 0}`]
     */
    id?: string;

    /**
     * Temporary text that occupies the text input when it is empty.
     * @type { string }[placeholder = "Search"]
     */
    placeholder?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "search"]
     */
    name?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    value?: string;

    /**
     * Set to `true` to disable the SearchWithin input
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Used to specify the autocomplete attribute of the input element
     * @type { string }[autocomplete = "off"]
     */
    autocomplete?: string;
  };
  $$slot_def: { default: {} };
}

export class SideNavGroup extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the  multiLevel mode  of SideNav
     * @type { boolean }[multiLevel = false]
     */
    multiLevel?: boolean;

    /**
     * Specify the heading title of SideNav
     * @type { string }[ title = "" ]
     */
    title?: string;

    /**
     * The element's unique identifier.
     * @type { string }[ id = `nav-heading-${Math.round(Math.random() * (99999 - 0)) + 0} ]
     */
    id?: string;
  };
  $$slot_def: { default: {} };
}

export class SideNavItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the label text of SideNav item
     * @type { string }[ title = "" ]
     */
    label?: string;

    /**
     * Whether the SideNav item is selected
     * @type { boolean }[ isSelected = false ]
     */
    isSelected?: boolean;

    /**
     * Set to `true` to disable the  SideNav item
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Set the `href` to use an anchor link
     * @type {string}[href = ""]
     */
    href?: string;
  };
  $$slot_def: { default: {} };
}

export class Slider extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { number }[id = Math.round(Math.random() * (99 - 0)) + 0]
     */
    id?: number;

    /**
     * Specify the label text  for the  slider
     * @type { string }[ label = ""]
     */
    label?: string;

    /**
     * The value of the slider
     * @type { number }[value = 0]
     */
    value?: number;

    /**
     * Specify the range value for the  slider
     * @type { Array }[rangeValue = []]
     */
    rangeValue?: Array;

    /**
     * Set to `true` to disable the slider
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Specify the variants  for the  slider
     * @type {"basic" | "filled" | "filled-offset" | "range" | "tick" | "tick-with-label" | "ramp"}[variants = "basic"]
     */
    variants?: "basic" | "filled" | "filled-offset" | "range" | "tick" | "tick-with-label" | "ramp";

    /**
     * Preconditions: variants => "tick" or "tick-with-label"
     * Specify the tick total for the  slider
     * @type { number }[tickTotal = 5]
     */
    tickTotal?: number;

    /**
     * Preconditions: variants => "tick" or "tick-with-label"
     * Whether to limit its value to proportional value
     * @type { boolean }[tickRestrict = false]
     */
    tickRestrict?: boolean;

    /**
     * Specify the max value for the  slider
     * @type { number }[maxValue = 100]
     */
    maxValue?: number;

    /**
     * Specify the min value for the  slider
     * @type { number }[maxValue = 0]
     */
    minValue?: number;
  };
  $$slot_def: { default: {} };
}

export class SplitView extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the draggable status for the SplitView
     * @type { boolean }  [isDraggable = false]
     */
    isDraggable?: boolean;

    /**
     * Specify the orientation  for the SplitView
     * @type {"horizontal" | "vertical"}  [orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Specify the height for the SplitView
     * @type { DimensionValue }  [height = "size-3000"]
     */
    height?: DimensionValue;

    /**
     * Specify the width for the SplitView
     * @type { DimensionValue }  [width = "size-6000"]
     */
    width?: DimensionValue;

    /**
     * Specify the dimension for the first pane
     * @type { number }  [paneDimension = 50]
     */
    paneDimension?: number;

    /**
     * Specify the dimension for the another pane
     * @type { number }  [paneAnotherDimension = 50]
     */
    paneAnotherDimension?: number;
  };
  $$slot_def: { default: {} };
}

export class StatusLight extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the variants  for the StatusLight
     * @type { "active"| "celery"
            | "chartreuse"
            | "fuchsia"
            | "indigo"
            | "info"
            | "magenta"
            | "negative"
            | "neutral"
            | "notice"
            | "positive"
            | "purple"
            | "seafoam"
            | "yellow"}  [orientation = "horizontal"]
          */
    variants?:
      | "active"
      | "celery"
      | "chartreuse"
      | "fuchsia"
      | "indigo"
      | "info"
      | "magenta"
      | "negative"
      | "neutral"
      | "notice"
      | "positive"
      | "purple"
      | "seafoam"
      | "yellow";

    /**
     * Set to `true` to disable the StatusLight
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Steplist extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the  interactive mode of step list
     * @type { boolean } [interactive = false]
     */
    interactive?: boolean;

    /**
     * Specify the  small mode of step list
     * @type { boolean } [isSmall = false]
     */
    isSmall?: boolean;
  };
  $$slot_def: { default: {} };
}

export class StepItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the total step number of step item
     * @type { number } [totalStep = 4]
     */
    totalStep?: number;

    /**
     * Specify the  step number of step item
     * @type { number } [thisStep = 1]
     */
    thisStep?: number;

    /**
     * Specify the active step number of step item
     * @type { number } [activeStep = 1]
     */
    activeStep?: number;

    /**
     * whether the step item is selected
     * @type { boolean } [activeStep = 1]
     */
    isSelected?: boolean;

    /**
     * Specify the label text of step item
     * @type { string } [label = "Step"]
     */
    label?: string;
    /**
     * Set to `true` to disable the step item
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether to use tooltip
     * @type {boolean}[tooltip=false]
     */
    tooltip?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Stepper extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The Boolean readonly attribute, when present, makes
     * the element not mutable, meaning the user can not edit the control.
     * @type {boolean}[readonly=false]
     */
    readonly?: boolean;

    /**
     * Whether to disabled the Stepper
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether to invalid the Stepper
     * @type {boolean}[isInvalid=false]
     */
    isInvalid?: boolean;

    /**
     * Specify the quiet mode of Stepper
     * @type { boolean } [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the value of Stepper
     * @type { number } [ value = 1]
     */
    value?: number;

    /**
     * Specify the min value of Stepper
     * @type { number } [ minValue = -5]
     */
    minValue?: number;

    /**
     * Specify the max value of Stepper
     * @type { number } [ maxValue = 5]
     */
    maxValue?: number;

    /**
     *The stepper increments or decrements each time
     * @type { number } [ stepValue = 1]
     */
    stepValue?: number;
  };
  $$slot_def: { default: {} };
}

export class Switch extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify whether the switch is checked
     * @type {boolean} [checked=false]
     */
    checked?: boolean;

    /**
     * Set to `true` to disable the switch
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Set an id for the input element
     * @type {string} [id = "switch-" + Math.random().toString(24)]
     */
    id?: string;

    /**
     * Specify whether the switch is emphasized
     * @type {boolean} [emphasized=false]
     */
    emphasized?: boolean;

    /**
     * Set to `true` for the switch to be read-only
     * @type {boolean} [readonly=false]
     */
    readonly?: boolean;

    /**
     * Set the label text of the Switch
     * @type { string } [label = "Switch"]
     */
    label?: string;
  };
  $$slot_def: { default: {} };
}

export class Table extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the quiet for the table
     * @type {boolean} [isQuiet = false]
     */
    isQuiet?: boolean;

    /**
     * Whether to use "div" as element
     * @type {boolean} [useDivElement = false]
     */
    useDivElement?: boolean;

    /**
     * Whether to support multiple selection
     * @type {boolean} [multiSelect = false]
     */
    multiSelect?: boolean;

    /**
     * The element css height
     * @type {DimensionValue} [height = "100%"]
     */
    height?: DimensionValue;

    /**
     * The element css width
     * @type {DimensionValue} [width = "auto"]
     */
    width?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class TableBody extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element css height
     * @type {DimensionValue} [height = "120px"]
     */
    height?: DimensionValue;

    /**
     * The element css width
     * @type {DimensionValue} [height = "100%"]
     */
    width?: DimensionValue;

    /**
     * Whether the element can be used as the target of the drop event
     * @type {boolean} [isDropTarget = false]
     */
    isDropTarget?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TableTr extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element tabindex attribute
     * @type {boolean|number} [tabindex = false]
     */
    tabindex?: boolean | number;

    /**
     * Whether the row is selected
     * @type {boolean} [isSelected = false]
     */
    isSelected?: boolean;

    /**
     * Whether the row can be used as the target of the drop event
     * @type {boolean} [isDropTarget = false]
     */
    isDropTarget?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TableTh extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Does the headCell support sorting
     * @type {boolean} [isSortable = false]
     */
    isSortable?: boolean;

    /**
     *Whether to display the ascending and descending order Icon
     * @type {boolean} [showSortedIcon = false]
     */
    showSortedIcon?: boolean;

    /**
     * The element tabindex attribute
     * @type {boolean|number} [tabindex = false]
     */
    tabindex?: boolean | number;

    /**
     * The element aria-sort attribute
     * @type { "ascending" | "descending" |"none"} [ariaSort = "none"]
     */
    ariaSort?: "ascending" | "descending" | "none";

    /**
     * Whether to provide check option
     * @type {boolean} [isCheckbox = false]
     */
    isCheckbox?: boolean;

    /**
     * Whether the row is checked
     * @type {boolean} [checked = false]
     */
    checked?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TableTd extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element tabindex attribute
     * @type {boolean|number} [tabindex = false]
     */
    tabindex?: boolean | number;

    /**
     * Whether to provide check option
     * @type {boolean} [isCheckbox = false]
     */
    isCheckbox?: boolean;

    /**
     * Whether the row is checked
     * @type {boolean} [checked = false]
     */
    checked?: boolean;

    /**
     * Whether it contains dividing line
     * @type {boolean} [hasDivider = false]
     */
    hasDivider?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Tags extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Control whether the corresponding label component is displayed in an editable state
     * @type {boolean} [editable = false]
     */
    editable?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Tag extends RubusSvelteComponent {
  $$prop_def: {
    /**
     *  Specify the label text for the tag
     * @type {string} [label = "Tag"]
     */
    label?: string;

    /**
     * Whether to invalid the tag
     * @type {boolean}[isInvalid=false]
     */
    isInvalid?: boolean;

    /**
     * Whether to disabled the tag
     * @type {boolean}[disabled=false]
     */
    disabled?: boolean;

    /**
     * The element tabindex attribute
     * @type { boolean | number } [tabindex = false]
     */
    tabindex?: boolean | number;

    /**
     *  Specify the avatar img element art attribute for the tag
     * @type {string} [avatarAlt = "Avatar"]
     */
    avatarAlt?: string;

    /**
     *  Specify the avatar img element url attribute for the tag
     * @type {string} [avatarUrl = ""]
     */
    avatarUrl?: string;

    /**
     *  Control the display or hide of this component
     * @type {boolean} [ showTag = true ]
     */
    showTag?: boolean;

    /**
     *  Whether to provide editable options
     * @type {boolean} [ editable = getContext("rubusTagsEditable") ]
     */
    editable?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Thumbnail extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the src attribute of the img element
     * @type {string} [imgUrl = ""]
     */
    imgUrl?: string;

    /**
     * Set the alt attribute of the img element
     * @type {string} [imgAlt = "Asset image"]
     */
    imgAlt?: string;

    /**
     * Use foreground or background to display the image
     * @type {"foreground" | "background"} [variants = "foreground"]
     */
    variants?: "foreground" | "background";

    /**
     * Set the background-color style of the element
     * @type {string} [backgroundColor = ""]
     */
    backgroundColor?: string;

    /**
     * Whether the Thumbnail is selected
     * @type {boolean} [isSelected = false]
     */
    isSelected?: boolean;

    /**
     * Whether the Thumbnail is focused
     * @type {boolean} [isFocused = false]
     */
    isFocused?: boolean;

    /**
     * Set Thumbnail scale specifications
     * @type {"S" | "M" | "L" | "XL" | "XXL"} [scale = "M"]
     */
    scale?: "S" | "M" | "L" | "XL" | "XXL";
  };
  $$slot_def: { default: {} };
}

export class Toast extends RubusSvelteComponent {
  $$prop_def: {
    /**
     *  Specify the label text for the toast
     * @type {string} [label = ""]
     */
    label?: string;

    /**
     * Specify the variants  for the  toast
     * @type {"default" | "info" | "negative" | "positive" | "error" | "warning" | "success"} [variants = "default"]
     */
    variants?: "default" | "info" | "negative" | "positive" | "error" | "warning" | "success";

    /**
     * The element css height
     * @type {DimensionValue} [height = "100%"]
     */
    height?: DimensionValue;

    /**
     * The element css width
     * @type {DimensionValue} [width = "auto"]
     */
    width?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class FieldGroup extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the orientation  for the field group
     * @type {"horizontal" | "vertical"}  [orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Specify the label below  for the  field group
     * @type { boolean }  [labelBelow = false]
     */
    labelBelow?: boolean;
  };
  $$slot_def: { default: {} };
}

export class FieldLabel extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the align side mode of fieldlabel
     * @type {"above" | "left" | "right"}[alignSide="above"]
     */
    alignSide?: "above" | "left" | "right";

    /**
     * Field label for a required field.
     * @type {boolean}[required=false]
     */
    required?: boolean;

    /**
     * Specify the label  of fieldlabel
     * @type {string}[label=""]
     */
    label?: string;

    /**
     * Specify the reset for attribute  of fieldlabel
     * @type {string}[forTargetId = ""]
     */
    forTargetId?: string;

    /**
     * Specify the element width of fieldlabel
     * @type { DimensionValue } [width = ""]
     */
    width?: DimensionValue;

    /**
     * Specify the element height of fieldlabel
     * @type { DimensionValue } [height = ""]
     */
    height?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class Form extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the align side mode of form.
     * @type {"above" | "left" | "right"}[alignSide="above"]
     */
    alignSide?: "above" | "left" | "right";
  };
  $$slot_def: { default: {} };
}

export class IllustratedMessage extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the variants of illustrated message
     * @type {"error" | "notFound" | "timeout" |"unauthorized" | "unavailable" | "upload"} [variants="error"]
     */
    variants?: "error" | "notFound" | "timeout" | "unauthorized" | "unavailable" | "upload";

    /**
     * Specify the title of illustrated message
     * @type {string} [title = ""]
     */
    title?: string;

    /**
     * Used for instruction/call to action.
     * @type {boolean} [isCta = false]
     */
    isCta?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Tab extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the current index for the tabs
     * @type {number} [currentTabIndex = 0]
     */
    currentTabIndex?: number;

    /**
     * Specify the unique index for the tab
     * @type {number} [tselfIndex = 0]
     */
    selfIndex?: number;

    /**
     * Whether to automatically change the index value
     * @type {boolean} [tabAutoSwitch = true]
     */
    tabAutoSwitch?: boolean;

    /**
     * Set to `true` to disable the tab
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Preconditions: disabled === true
     * Cursor not-allowed when the tab is disabled
     * @type { boolean }  [notAllowed= false]
     */
    notAllowed?: boolean;

    /**
     * Set the `href` to use an anchor link
     * @type {string} [href = ""]
     */
    href?: string;

    /**
     * Preconditions: href
     * Where to display the linked URL
     * @type { linkTarget } [target = ""]
     */
    target?: linkTarget;

    /**
     * Preconditions: href
     *  Prompts the user to save the linked URL instead of navigating to it.
     * @type {boolean} [download = false]
     */
    download?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Tabs extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Specify the orientation index for the tabs
     * @type {"horizontal" | "vertical"}  [orientation = "horizontal"]
     */
    orientation?: "horizontal" | "vertical";

    /**
     * Specify the aria-label
     * @type {string} [aria-label="tabList"]
     */
    ariaLabel?: string;

    /**
     * Specify the quiet mode of tab
     * @type { boolean }   [isQuiet= false]
     */
    isQuiet?: boolean;

    /**
     * Specify the compact mode of tab
     * Compact tabs should never be used without the quiet variation. Please use Quiet Compact Tabs instead.
     * @type { boolean }   [isQuiet= false]
     */
    isCompact?: boolean;
  };
  $$slot_def: { default: {} };
}

export class Textfield extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string }[id = `textfield-${Math.round(Math.random() * (99999 - 0)) + 0}`]
     */
    id?: string;

    /**
     * Temporary text that occupies the text input when it is empty.
     * @type { string }[placeholder = ""]
     */
    placeholder?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    name?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    value?: string;

    /**
     * Set to `true` to mark the field as required
     * @type {boolean} [required=false]
     */
    required?: boolean;

    /**
     * Set to `true` to disable the input
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether the textfield should be displayed with a quiet style.
     * @type {boolean} [isQuiet=false]
     */
    isQuiet?: boolean;

    /**
     * Whether the input should display its "valid" visual styling.
     * @type {boolean} [isValid=false]
     */
    isValid?: boolean;

    /**
     * Whether the input should display its "invalid" visual styling.
     * @type {boolean} [isInvalid=false]
     */
    isInvalid?: boolean;

    /**
     * Whether the input should display its "focused" visual styling.
     * @type {boolean} [isFocused=false]
     */
    isFocused?: boolean;

    /**
     * Whether the input should display its "keyboard focused" visual styling.
     * @type {boolean} [isFocused=false]
     */
    isKeyboardFocused?: boolean;
    /**
     * The maximum number of characters supported by the input.
     * @type {number} [maxLength = 32]
     */
    maxLength?: number;

    /**
     * The minimum number of characters required by the input.
     * @type {number} [minLength = 0]
     */
    minLength?: number;
  };
  $$slot_def: { default: {} };
}

export class TextArea extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element's unique identifier.
     * @type { string }[id = `textarea-${Math.round(Math.random() * (99999 - 0)) + 0}`]
     */
    id?: string;

    /**
     * Temporary text that occupies the text input when it is empty.
     * @type { string }[placeholder = ""]
     */
    placeholder?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    name?: string;

    /**
     * The name of the input element, used when submitting an HTML form.
     * @type { string }[name = "field"]
     */
    value?: string;

    /**
     * Set to `true` to mark the field as required
     * @type {boolean} [required=false]
     */
    required?: boolean;

    /**
     * Set to `true` to disable the input
     * @type {boolean} [disabled=false]
     */
    disabled?: boolean;

    /**
     * Whether the textfield should be displayed with a quiet style.
     * @type {boolean} [isQuiet=false]
     */
    isQuiet?: boolean;

    /**
     * Whether the input should display its "valid" visual styling.
     * @type {boolean} [isValid=false]
     */
    isValid?: boolean;

    /**
     * Whether the input should display its "invalid" visual styling.
     * @type {boolean} [isInvalid=false]
     */
    isInvalid?: boolean;

    /**
     * Whether the input should display its "focused" visual styling.
     * @type {boolean} [isFocused=false]
     */
    isFocused?: boolean;

    /**
     * Whether the input should display its "keyboard focused" visual styling.
     * @type {boolean} [isFocused=false]
     */
    isKeyboardFocused?: boolean;
    /**
     * The maximum number of characters supported by the input.
     * @type {number} [maxLength = 32]
     */
    maxLength?: number;

    /**
     * The minimum number of characters required by the input.
     * @type {number} [minLength = 0]
     */
    minLength?: number;
  };
  $$slot_def: { default: {} };
}

export class Tooltip extends RubusSvelteComponent {
  $$prop_def: {
    /**
     *  Specify the label text for the tooltip
     * @type {string} [label = ""]
     */
    label?: string;

    /**
     * Specify the variants  for the  tooltip
     * @type {"default" | "info" | "negative" | "positive" | "help" } [variants = "default"]
     */
    variants?: "default" | "info" | "negative" | "positive" | "help";

    /**
     *  Specify the open status for the tooltip
     * @type {boolean} [isOpen = false]
     */
    isOpen?: boolean;

    /**
     * Specify the directions  for the  tooltip
     * @type {"top" | "bottom" | "left" | "right" } [directions = "top"]
     */
    directions?: "top" | "bottom" | "left" | "right";

    /**
     *  Set the trigger event name to open the tooltip
     * @type {"mouseover" | "mouseenter" | "click" | "contextmenu" | "dblclick" | "mousedown" | "mouseup" | "select" | "keydown" | "keypress" | "keyup"} [induceStartEventName = "mouseover"]
     */
    induceStartEventName?:
      | "mouseover"
      | "mouseenter"
      | "click"
      | "contextmenu"
      | "dblclick"
      | "mousedown"
      | "mouseup"
      | "select"
      | "keydown"
      | "keypress"
      | "keyup"
      | string;

    /**
     * Set the trigger event name to close the tooltip
     * @type {"mouseout" | "mouseleave" | "click" | "contextmenu" | "dblclick" | "mousedown" | "mouseup" | "select" | "keydown" | "keypress" | "keyup"} [induceEndEventName = "mouseout"]
     */
    induceEndEventName?:
      | "mouseout"
      | "mouseleave"
      | "click"
      | "contextmenu"
      | "dblclick"
      | "mousedown"
      | "mouseup"
      | "select"
      | "keydown"
      | "keypress"
      | "keyup"
      | string;

    /**
     * The element css width
     * @type {DimensionValue} [width = "size-2000"]
     */
    width?: DimensionValue;
  };
  $$slot_def: { default: {} };
}

export class TreeView extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * The element css height
     * @type {DimensionValue} [height = "auto"]
     */
    height?: DimensionValue;

    /**
     * The element css width
     * @type {DimensionValue} [width = 250]
     */
    width?: DimensionValue;

    /**
     * Specify the quiet for the TreeView
     * @type {boolean} [isQuiet = false]
     */
    isQuiet?: boolean;

    /**
     * Whether to enable Thumbnail component
     * @type {boolean} [hasThumbnail = false]
     */
    hasThumbnail?: boolean;

    /**
     * Whether to enable resource explorer style
     * @type {boolean} [hasThumbnail = false]
     */
    resourceExplorer?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TreeItem extends RubusSvelteComponent {
  $$prop_def: {
    /**
     *  Specify the label text for the TreeView item
     * @type {string} [label = "Label"]
     */
    label?: string;

    /**
     *  Specify the open status for the TreeView item
     * @type {boolean} [isOpen = false]
     */
    isOpen?: boolean;

    /**
     * Whether the item can be used as the target of the drop event
     * @type {boolean} [isDropTarget = false]
     */
    isDropTarget?: boolean;

    /**
     * Whether to enable custom icon
     * @type {boolean} [customIcon = false]
     */
    customIcon?: boolean;

    /**
     * Set the background-color style of the thumbnail element
     * @type {string} [backgroundColor = ""]
     */
    thumbnailBackgroundColor?: string;

    /**
     * Set the src attribute of the thumbnail img element
     * @type {string} [imgUrl = ""]
     */
    thumbnailImgUrl?: string;

    /**
     * Set the alt attribute of the thumbnail img element
     * @type {string} [imgAlt = "Asset image"]
     */
    thumbnailImgAlt?: string;
  };
  $$slot_def: { default: {} };
}

export class TreeHeading extends RubusSvelteComponent {
  $$prop_def: {
    /**
     *  Specify the label text for the tree view heading
     * @type {string} [label = ""]
     */
    label?: string;
  };
  $$slot_def: { default: {} };
}

export class TypographyWrap extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set the language used in the preset
     * @type {string} [langContext = "en"]
     */
    langContext?: string;
  };
  $$slot_def: { default: {} };
}

export class TypographyBody extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set body scale specifications
     * @type {"XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL"} [scale = "M"]
     */
    scale?: "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";

    /**
     * Whether to use serif font family in the context
     * @type {boolean} [isSerif = false]
     */
    isSerif?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TypographyCode extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set code scale specifications
     * @type {"XS" | "S" | "M" | "L" | "XL" } [scale = "M"]
     */
    scale?: "XS" | "S" | "M" | "L" | "XL";
  };
  $$slot_def: { default: {} };
}

export class TypographyDetail extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set detail scale specifications
     * @type { "S" | "M" | "L" | "XL" } [scale = "M"]
     */
    scale?: "S" | "M" | "L" | "XL";

    /**
     * Whether to use serif font family in the context
     * @type {boolean} [isSerif = false]
     */
    isSerif?: boolean;

    /**
     * Whether to use light font family in the context
     * @type {boolean} [isLight = false]
     */
    isLight?: boolean;
  };
  $$slot_def: { default: {} };
}

export class TypographyHeading extends RubusSvelteComponent {
  $$prop_def: {
    /**
     * Set Heading scale specifications
     * @type {"XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL"} [scale = "M"]
     */
    scale?: "XXS" | "XS" | "S" | "M" | "L" | "XL" | "XXL" | "XXXL";

    /**
     * Whether to use serif font family in the context
     * @type {boolean} [isSerif = false]
     */
    isSerif?: boolean;

    /**
     * Set the font weight
     * @type {"heavy" | "light" | "default" } [thickness = "default"]
     */
    thickness?: "heavy" | "light" | "default";
  };
  $$slot_def: { default: {} };
}
