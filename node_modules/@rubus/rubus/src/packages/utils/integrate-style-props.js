function integrateProps(a) {
  let keys = Object.getOwnPropertyNames(a);
  let arr = [];
  for (let index = 0; index < keys.length; index++) {
    arr[index] = keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() + ":" + a[keys[index]] + ";";
  }
  return arr.filter(Boolean).join("");
}
function integrateDimensionProps(a) {
  let keys = Object.getOwnPropertyNames(a);
  let arr = [];
  for (let index = 0; index < keys.length; index++) {
    arr[index] =
      keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() +
      `:var(--spectrum-global-dimension-${a[keys[index]]}, var(--spectrum-alias-${a[keys[index]]}));`;
  }
  return arr.filter(Boolean).join("");
}

function integrateAutoProps(a) {
  let keys = Object.getOwnPropertyNames(a);
  let arr = [];
  for (let index = 0; index < keys.length; index++) {
    if (typeof a[keys[index]] == "string" && a[keys[index]].search("size") > -1) {
      if (a[keys[index]].search("-size") > -1) {
        arr[index] =
          keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() +
          `:calc(-1 * var(--spectrum-global-dimension-${a[keys[index]]}, var(--spectrum-alias-${a[keys[index]]})));`;
      } else {
        arr[index] =
          keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() +
          `:var(--spectrum-global-dimension-${a[keys[index]]}, var(--spectrum-alias-${a[keys[index]]}));`;
      }
    } else if (typeof a[keys[index]] == "string" && determineMode(a[keys[index]])) {
      arr[index] =
        keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() + `:var(--spectrum-global-color-${a[keys[index]]});`;
    } else {
      arr[index] = keys[index].replace(/([A-Z])/g, "-$1").toLowerCase() + ":" + a[keys[index]] + ";";
    }
  }
  return arr.filter(Boolean).join("");
}

function determineMode(t) {
  let colorKey = [
    "celery",
    "chartreuse",
    "yellow",
    "magenta",
    "fuchsia",
    "purple",
    "indigo",
    "seafoam",
    "red",
    "orange",
    "green",
    "blue",
    "gray",
  ];
  for (let index = 0; index < colorKey.length; index++) {
    if (t.search(colorKey[index]) != -1) {
      return true;
    }
  }
  return false;
}
export { integrateProps, integrateAutoProps, integrateDimensionProps };
